<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>意大利炮打友军</title>
    <link href="http://example.com" />
    <updated>2023-11-15T08:09:06.000Z</updated>
    <category term="随笔" />
    <category term="技术" />
    <category term="博客" />
    <category term="markdown" />
    <category term="python" />
    <category term="月历" />
    <category term="写作" />
    <category term="科幻" />
    <category term="世界观" />
    <category term="WSL" />
    <category term="Linux" />
    <category term="编译" />
    <category term="电赛" />
    <category term="记录" />
    <category term="周报" />
    <category term="课题组" />
    <category term="神经网络" />
    <category term="pytorch" />
    <entry>
        <id>http://example.com/2023/11/15/%E8%AF%BE%E9%A2%98%E7%BB%8423-11-15%E5%91%A8%E6%8A%A5/</id>
        <title>课题组23-11-15周报</title>
        <link rel="alternate" href="http://example.com/2023/11/15/%E8%AF%BE%E9%A2%98%E7%BB%8423-11-15%E5%91%A8%E6%8A%A5/"/>
        <content type="html">&lt;h1 id=&#34;实验关于fp16参数转换速度的问题&#34;&gt;&lt;a href=&#34;#实验关于fp16参数转换速度的问题&#34; class=&#34;headerlink&#34; title=&#34;实验关于fp16参数转换速度的问题&#34;&gt;&lt;/a&gt;实验关于fp16参数转换速度的问题&lt;/h1&gt;&lt;p&gt;本周进行了一个实验，主要用于观察pytorch中对张量转移的各种方法的性能差异。&lt;/p&gt;
&lt;h2 id=&#34;实验思路&#34;&gt;&lt;a href=&#34;#实验思路&#34; class=&#34;headerlink&#34; title=&#34;实验思路&#34;&gt;&lt;/a&gt;实验思路&lt;/h2&gt;&lt;h3 id=&#34;几种不同的传输方向&#34;&gt;&lt;a href=&#34;#几种不同的传输方向&#34; class=&#34;headerlink&#34; title=&#34;几种不同的传输方向&#34;&gt;&lt;/a&gt;几种不同的传输方向&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;cpu -&amp;gt; cpu&lt;/li&gt;
&lt;li&gt;cpu -&amp;gt; gpu&lt;/li&gt;
&lt;li&gt;gpu -&amp;gt; cpu&lt;/li&gt;
&lt;li&gt;gpu -&amp;gt; gpu&lt;h3 id=&#34;几种不同的数据&#34;&gt;&lt;a href=&#34;#几种不同的数据&#34; class=&#34;headerlink&#34; title=&#34;几种不同的数据&#34;&gt;&lt;/a&gt;几种不同的数据&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;fp32 -&amp;gt; fp32&lt;/li&gt;
&lt;li&gt;fp32 -&amp;gt; fp16&lt;br&gt;&lt;code&gt;调用half()函数，将fp32数据转换为fp16数据&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;fp16 -&amp;gt; fp16&lt;/li&gt;
&lt;li&gt;fp16 -&amp;gt; fp32&lt;br&gt;&lt;code&gt;调用float()函数，将fp16数据转换为fp32数据&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;目前第三、四种暂未测试&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;几种不同的传输方式&#34;&gt;&lt;a href=&#34;#几种不同的传输方式&#34; class=&#34;headerlink&#34; title=&#34;几种不同的传输方式&#34;&gt;&lt;/a&gt;几种不同的传输方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;copy_()&lt;/li&gt;
&lt;li&gt;to()&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实验过程&#34;&gt;&lt;a href=&#34;#实验过程&#34; class=&#34;headerlink&#34; title=&#34;实验过程&#34;&gt;&lt;/a&gt;实验过程&lt;/h2&gt;&lt;p&gt;准备一个目的地矩阵，一个源矩阵组（100个）。分别用随机数初始化。&lt;br&gt;循环100次，每次都遍历整个矩阵组，传输至对应的目的地矩阵。&lt;br&gt;测量总时长，对不同情况进行比较&lt;br&gt;代码模板如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; torch&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; time&lt;br&gt;tensor_cpu_1 = torch.rand(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;)&lt;br&gt;tensor_gpu_1 = torch.rand(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;).cuda()&lt;br&gt;tensor_cpu_2 = torch.rand(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;)&lt;br&gt;tensor_gpu_2 = torch.rand(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;).cuda()&lt;br&gt;time_sum = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;):&lt;br&gt;    start = time.time()&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;):&lt;br&gt;        tensor_cpu_1.copy_(tensor_cpu_2[i])&lt;br&gt;    end = time.time()&lt;br&gt;    time_sum += end - start&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;time for copy from cpu to cpu via _copy():&amp;quot;&lt;/span&gt;, time_sum)&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上代码展示了从cpu到cpu传输fp32的过程。最终展示了传输十万个1000*1000的矩阵所耗费的总时间。&lt;br&gt;经过实验，结果如下表所示：&lt;br&gt;记录数据如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;传输方向&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;传输方式&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数据类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;时间&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2.187&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.025&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5.855&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5.634&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9.663&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9.555&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9.876&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10.264&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8.895&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;13.649&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10.051&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7.320&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.605&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.029&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.484&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.591&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;注意，测试时间可能会有波动，尤其是在时间较短时，考虑到这种传输主要出现在gpu-&amp;gt;gpu中，不是主要考虑内容&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="技术" />
        <category term="周报" />
        <category term="课题组" />
        <category term="神经网络" />
        <category term="pytorch" />
        <updated>2023-11-15T08:09:06.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/10/22/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E4%BA%94%E5%91%A8%E5%AD%A6%E4%B9%A0/</id>
        <title>课题组第五周学习</title>
        <link rel="alternate" href="http://example.com/2023/10/22/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E4%BA%94%E5%91%A8%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;h1 id=&#34;高效直接访问主机内存的方法&#34;&gt;&lt;a href=&#34;#高效直接访问主机内存的方法&#34; class=&#34;headerlink&#34; title=&#34;高效直接访问主机内存的方法&#34;&gt;&lt;/a&gt;高效直接访问主机内存的方法&lt;/h1&gt;&lt;h2 id=&#34;现有方法存在的问题&#34;&gt;&lt;a href=&#34;#现有方法存在的问题&#34; class=&#34;headerlink&#34; title=&#34;现有方法存在的问题&#34;&gt;&lt;/a&gt;现有方法存在的问题&lt;/h2&gt;&lt;h3 id=&#34;通过加载后执行的方法&#34;&gt;&lt;a href=&#34;#通过加载后执行的方法&#34; class=&#34;headerlink&#34; title=&#34;通过加载后执行的方法&#34;&gt;&lt;/a&gt;通过加载后执行的方法&lt;/h3&gt;&lt;p&gt;面对巨大的模型参数规模，现有GPU的显存难以支撑大模型的训练。因此产生了一种通过加载后执行的方法，即将模型参数存储在主机内存中，每次训练时将参数加载到显存中，训练结束后将参数保存到主机内存中。这种方法的缺点是每次训练都需要将参数加载到显存中，这个过程会消耗大量的时间，例如在v100上，加载时间会是处理时间的4倍以上，导致训练效率低下。有一种异步加载方法，将加载层和训练层分开，训练层在训练时异步加载参数，但是这种方法会导致训练时的显存占用过高，而且层数较多时加载时间过高的劣势逐渐显现，优化并不明显。&lt;/p&gt;
&lt;h2 id=&#34;本文提出的方法&#34;&gt;&lt;a href=&#34;#本文提出的方法&#34; class=&#34;headerlink&#34; title=&#34;本文提出的方法&#34;&gt;&lt;/a&gt;本文提出的方法&lt;/h2&gt;&lt;h3 id=&#34;直接主机访问&#34;&gt;&lt;a href=&#34;#直接主机访问&#34; class=&#34;headerlink&#34; title=&#34;直接主机访问&#34;&gt;&lt;/a&gt;直接主机访问&lt;/h3&gt;&lt;p&gt;避开加载和训练不同步的问题，直接将cpu内存当作gpu的虚拟内存进行访问，这样避免了加载过程中占用gpu显存过高的问题，但是由于访问和数据流动要经过pcie总线，传输速度较慢。&lt;br&gt;因此，DHA使用了这样一种办法，使得其可以自适应选择访问方式，其可以通过直接主机访问和加载后执行两种方法进行训练，使得加载的时间可以隐藏在训练流的流水线中。&lt;/p&gt;
&lt;h3 id=&#34;多GPU方法&#34;&gt;&lt;a href=&#34;#多GPU方法&#34; class=&#34;headerlink&#34; title=&#34;多GPU方法&#34;&gt;&lt;/a&gt;多GPU方法&lt;/h3&gt;&lt;p&gt;对于多个GPU，由于GPU间通信效率要高于PCIE通信效率，因此可以将模型拆分成多个部分，分别存储在不同的GPU中，这样每次训练的加载都可以直接从其他GPU中加载，而不需要从主机内存中加载，这样可以减少加载时间。&lt;/p&gt;
&lt;h3 id=&#34;DeepPlan&#34;&gt;&lt;a href=&#34;#DeepPlan&#34; class=&#34;headerlink&#34; title=&#34;DeepPlan&#34;&gt;&lt;/a&gt;DeepPlan&lt;/h3&gt;&lt;p&gt;本文还提出了一个工具：用来为给定模型自动生成执行计划，过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对本地GPU显存和主机内存分析性能&lt;/li&gt;
&lt;li&gt;通过比较DHA和流水线方法的延迟差异来决定每一层的策略&lt;/li&gt;
&lt;li&gt;如果有多个GPU，则根据GPU数量平均划分模型&lt;/li&gt;
&lt;li&gt;协调将直接主机访问的执行和加载后执行的执行进行协调&lt;br&gt;本方案在部署时只需要进行一次执行。&lt;h2 id=&#34;原理分析&#34;&gt;&lt;a href=&#34;#原理分析&#34; class=&#34;headerlink&#34; title=&#34;原理分析&#34;&gt;&lt;/a&gt;原理分析&lt;/h2&gt;对于不同层，加载——执行策略与DHA策略的时间是不同的，&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;层&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;加载——执行策略&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;DHA策略&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;结论&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;卷积层&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;小规模差异不大&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;大规模较慢&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;推荐在较小卷积层使用DHA，同时加载较大卷积层等待直接执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;全连接层&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;加载快&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;执行慢&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;推荐在全连接层使用加载后执行，因为其需要频繁访问内存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;嵌入层&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;加载较慢&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;执行较快&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;推荐在嵌入层使用DHA，因为其规模较大，而层中一些参数的访问较少&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;归一化层&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;LayerNorm更好&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;BatchNorm更好&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;需要根据具体情况进行选择&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;产生差异的原因则是不同层对内存访问的需求不同，导致pcie访问次数不同，pcie作为瓶颈，访问次数越多，延迟越大。&lt;/p&gt;
&lt;h3 id=&#34;并行传输&#34;&gt;&lt;a href=&#34;#并行传输&#34; class=&#34;headerlink&#34; title=&#34;并行传输&#34;&gt;&lt;/a&gt;并行传输&lt;/h3&gt;&lt;p&gt;对于多GPU场景，将模型划分为多个部分后，采用并行传输策略：从内存并行地将模型传输到两个GPU，再从第二个GPU向第一个GPU传输，这样可以减少传输时间。&lt;br&gt;在此基础上，可以将GPU2——GPU1的传输变为流水线传输，这样可以进一步减少传输时间。&lt;br&gt;但是，由于CPU提供的PCIE总线数量限制，多GPU系统，例如8GPU也只能每两个GPU公用一组总线，因此多GPU的总线需要考虑总线拓扑。&lt;/p&gt;
&lt;h2 id=&#34;DeepPlan实现&#34;&gt;&lt;a href=&#34;#DeepPlan实现&#34; class=&#34;headerlink&#34; title=&#34;DeepPlan实现&#34;&gt;&lt;/a&gt;DeepPlan实现&lt;/h2&gt;&lt;h3 id=&#34;整体实现思路&#34;&gt;&lt;a href=&#34;#整体实现思路&#34; class=&#34;headerlink&#34; title=&#34;整体实现思路&#34;&gt;&lt;/a&gt;整体实现思路&lt;/h3&gt;&lt;p&gt;再进行训练前，deepPlan会根据每一层的性能分析，推理出当前层采用何种方式进行训练（加载——执行orDHA）。遍历完整个网络后，将根据策略直接执行训练。如果在多GPU系统中，DeepPlan还会根据GPU连连接拓扑，将模型划分为多个部分，应用并行传输方案。&lt;/p&gt;
&lt;h3 id=&#34;单层性能分析&#34;&gt;&lt;a href=&#34;#单层性能分析&#34; class=&#34;headerlink&#34; title=&#34;单层性能分析&#34;&gt;&lt;/a&gt;单层性能分析&lt;/h3&gt;&lt;p&gt;利用单层执行时间的统计数据，或者执行一次单层来得到每一层的性能数据。&lt;/p&gt;
&lt;h3 id=&#34;层间性能分析&#34;&gt;&lt;a href=&#34;#层间性能分析&#34; class=&#34;headerlink&#34; title=&#34;层间性能分析&#34;&gt;&lt;/a&gt;层间性能分析&lt;/h3&gt;&lt;p&gt;对于每层性能已经得到的情况。检查每一层切换策略到DHA后其获得的性能差异是否比加载后执行的停滞时间更短，如果是的话则切换为DHA。并且通过递归的方式检查每个层之前最多可以使用几个DHA来缩短总加载停滞时间。&lt;/p&gt;
&lt;h3 id=&#34;模型传输规划&#34;&gt;&lt;a href=&#34;#模型传输规划&#34; class=&#34;headerlink&#34; title=&#34;模型传输规划&#34;&gt;&lt;/a&gt;模型传输规划&lt;/h3&gt;&lt;p&gt;DeepPlan根据GPU拓扑，和PCIE交换机布局，避免并行加载的总线冲突，检查所选GPU是否使用NVLink，如果使用则直接进行并行传输，否则使用流水线传输。同时，根据并行传输带来的性能优化，重新规划每一层使用的策略。&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="周报" />
        <category term="课题组" />
        <category term="神经网络" />
        <category term="pytorch" />
        <updated>2023-10-22T15:36:49.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/10/13/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E5%9B%9B%E5%91%A8%E5%AD%A6%E4%B9%A0/</id>
        <title>课题组第四周学习</title>
        <link rel="alternate" href="http://example.com/2023/10/13/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E5%9B%9B%E5%91%A8%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;h1 id=&#34;ZeRO-Offload方法&#34;&gt;&lt;a href=&#34;#ZeRO-Offload方法&#34; class=&#34;headerlink&#34; title=&#34;ZeRO-Offload方法&#34;&gt;&lt;/a&gt;ZeRO-Offload方法&lt;/h1&gt;&lt;h2 id=&#34;提出背景&#34;&gt;&lt;a href=&#34;#提出背景&#34; class=&#34;headerlink&#34; title=&#34;提出背景&#34;&gt;&lt;/a&gt;提出背景&lt;/h2&gt;&lt;p&gt;对大模型训练来说，GPU显存对参数规模巨大的网络来说是一个瓶颈，然而CPU内存可以做到TB级别，因此可以考虑将一部分参数放在CPU上，而将需要频繁访问的参数放在GPU上，这样可以减少GPU显存的压力，提高训练速度。ZeRO-Offload提出了一种没有数据冗余的优化方法，可以将模型参数分布在CPU和GPU上，而且可以在CPU和GPU之间进行无缝的迁移。&lt;/p&gt;
&lt;h3 id=&#34;大模型传统方法&#34;&gt;&lt;a href=&#34;#大模型传统方法&#34; class=&#34;headerlink&#34; title=&#34;大模型传统方法&#34;&gt;&lt;/a&gt;大模型传统方法&lt;/h3&gt;&lt;p&gt;针对大模型需要的内存过大的问题，传统分为两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型分割：将模型分割成多个部分，每个部分在GPU上训练，然后将结果传递给下一个部分，&lt;/li&gt;
&lt;li&gt;流水线并行：将训练过程分为不同层，每个层分给不同的GPU，然后将结果传递给下一个GPU&lt;h2 id=&#34;增益来源&#34;&gt;&lt;a href=&#34;#增益来源&#34; class=&#34;headerlink&#34; title=&#34;增益来源&#34;&gt;&lt;/a&gt;增益来源&lt;/h2&gt;根据计算流程，CPU的计算量相比于GPU的$O(MB)$,只有$O(M)$，其中M是模型大小，B是批次大小。&lt;br&gt;这个过程中，ZeRO-Offload将前向与后向传播分配给了GPU，而标准化计算和权重更新等对模型大小有直接联系的计算则分配给了CPU。&lt;br&gt;在数据吞吐方面，cpu与gpu之间仅存在fp16数据的传输，相比与其他方法（例如L2L）有大幅度减少&lt;br&gt;在并行方面，随着计算节点的增加，CPU的计算资源会随着节点数量增加而增加&lt;br&gt;CPU计算通过提高并行性增加了效率&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对CPU作为计算瓶颈的解决方法&#34;&gt;&lt;a href=&#34;#对CPU作为计算瓶颈的解决方法&#34; class=&#34;headerlink&#34; title=&#34;对CPU作为计算瓶颈的解决方法&#34;&gt;&lt;/a&gt;对CPU作为计算瓶颈的解决方法&lt;/h3&gt;&lt;h4 id=&#34;对CPU计算的优化&#34;&gt;&lt;a href=&#34;#对CPU计算的优化&#34; class=&#34;headerlink&#34; title=&#34;对CPU计算的优化&#34;&gt;&lt;/a&gt;对CPU计算的优化&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;向量运算SIMD&lt;/li&gt;
&lt;li&gt;循环展开&lt;/li&gt;
&lt;li&gt;多核并行&lt;/li&gt;
&lt;li&gt;减少缓存抖动&lt;h4 id=&#34;延迟参数更新&#34;&gt;&lt;a href=&#34;#延迟参数更新&#34; class=&#34;headerlink&#34; title=&#34;延迟参数更新&#34;&gt;&lt;/a&gt;延迟参数更新&lt;/h4&gt;将参数更新延迟，重叠CPU与GPU计算。也就是说，在某一轮计算之后，此后每次gpu使用的优化器参数都是上一轮计算的结果，而不是这一轮计算的结果。，因此可以让cpu计算时间和gpu计算时间重叠。提高流水线负载率。&lt;h2 id=&#34;优化方法&#34;&gt;&lt;a href=&#34;#优化方法&#34; class=&#34;headerlink&#34; title=&#34;优化方法&#34;&gt;&lt;/a&gt;优化方法&lt;/h2&gt;ZeRO-Offload 同时利用CPU内存计算能力来优化。基于ZeRO优化方法，但是不是像原本多个GPU并行计算，并且通过联系收集器来进行并行。而是把这个通讯过程转化为与CPU的联系，相当于原本多个GPU同时做的工作，让单个GPU进行，每个阶段只进行原先一个GPU进行的工作，同时把其他GPU本应进行的计算状态经由内存进行存储。&lt;h3 id=&#34;ZeRO的工作&#34;&gt;&lt;a href=&#34;#ZeRO的工作&#34; class=&#34;headerlink&#34; title=&#34;ZeRO的工作&#34;&gt;&lt;/a&gt;ZeRO的工作&lt;/h3&gt;ZeRO，在ZeRO-Offload中使用ZeRO-2阶段，这个阶段你主要是分割模型状态和梯度。在ZeRO-2中，每个GPU都存储着所有参数，但是每轮训练只更新其中不包含的部分。&lt;br&gt;这个过程如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;每个GPU进行前馈，计算不同批次的损失。&lt;/li&gt;
&lt;li&gt;每个cpu进行反向传播，并且对每个有梯度的GPU使用减少梯度的算子进行平均。&lt;/li&gt;
&lt;li&gt;反向传播结束后，GPU使用其对应的梯度平均值对其部分参数和优化器状态进行更新。&lt;/li&gt;
&lt;li&gt;进行一次全收集，接收其他GPU计算的参数更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;ZeRO-Offload的工作&#34;&gt;&lt;a href=&#34;#ZeRO-Offload的工作&#34; class=&#34;headerlink&#34; title=&#34;ZeRO-Offload的工作&#34;&gt;&lt;/a&gt;ZeRO-Offload的工作&lt;/h3&gt;&lt;p&gt;ZeRO-Offload将训练修改为数据流图，主要优势：使得CPU计算量减少了几个数量级。保证CPU与GPU通讯最小化。最大限度节省内存。&lt;/p&gt;
&lt;h4 id=&#34;计算流图&#34;&gt;&lt;a href=&#34;#计算流图&#34; class=&#34;headerlink&#34; title=&#34;计算流图&#34;&gt;&lt;/a&gt;计算流图&lt;/h4&gt;&lt;p&gt;计算流图是一种图形化的表示，用于表示计算过程中的数据流动。在计算流图中，节点表示计算，边表示数据流动。&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lianga1/picGo_test/main/1.jpg&#34; alt=&#34;计算流图&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;减少CPU计算&#34;&gt;&lt;a href=&#34;#减少CPU计算&#34; class=&#34;headerlink&#34; title=&#34;减少CPU计算&#34;&gt;&lt;/a&gt;减少CPU计算&lt;/h4&gt;&lt;p&gt;ZeRO-Offload将前向与后向传播分配给了GPU，而标准化计算和权重更新等对模型大小有直接联系的计算则分配给了CPU。&lt;/p&gt;
&lt;h4 id=&#34;减少CPU与GPU通讯&#34;&gt;&lt;a href=&#34;#减少CPU与GPU通讯&#34; class=&#34;headerlink&#34; title=&#34;减少CPU与GPU通讯&#34;&gt;&lt;/a&gt;减少CPU与GPU通讯&lt;/h4&gt;&lt;p&gt;创建fp32区：为了避免fp32数据在pcie总线传输，需要将所有fp32数据放在一个设备上进行处理&lt;br&gt;p16分配：将fp16必须放在前馈与反向传播共同节点的位置，因为这两个节点之间的通信是较大的。&lt;br&gt;因此，ZeRO-Offload将fp16分配给GPU，而将fp32分配给CPU。&lt;/p&gt;
&lt;h4 id=&#34;减少内存&#34;&gt;&lt;a href=&#34;#减少内存&#34; class=&#34;headerlink&#34; title=&#34;减少内存&#34;&gt;&lt;/a&gt;减少内存&lt;/h4&gt;&lt;p&gt;将反向传播后得到的梯度，以及更新梯度所需要的计算和存储空间，写遭到CPU上，可以节省最多的显存使用。&lt;/p&gt;
&lt;h2 id=&#34;优势&#34;&gt;&lt;a href=&#34;#优势&#34; class=&#34;headerlink&#34; title=&#34;优势&#34;&gt;&lt;/a&gt;优势&lt;/h2&gt;&lt;h3 id=&#34;扩展性强&#34;&gt;&lt;a href=&#34;#扩展性强&#34; class=&#34;headerlink&#34; title=&#34;扩展性强&#34;&gt;&lt;/a&gt;扩展性强&lt;/h3&gt;&lt;p&gt;对于任何模型，其优化算法的优化参数对于ZeRO-Offload来说并不关键，其只是需要把fp32的计算内容单独放在CPU中。&lt;/p&gt;
&lt;h3 id=&#34;支持并行&#34;&gt;&lt;a href=&#34;#支持并行&#34; class=&#34;headerlink&#34; title=&#34;支持并行&#34;&gt;&lt;/a&gt;支持并行&lt;/h3&gt;&lt;p&gt;对多个GPU而言。ZeRO-Offload基于ZeRO-2，因此可以将分区的参数分配给多个GPU。&lt;/p&gt;
&lt;h3 id=&#34;模型并行&#34;&gt;&lt;a href=&#34;#模型并行&#34; class=&#34;headerlink&#34; title=&#34;模型并行&#34;&gt;&lt;/a&gt;模型并行&lt;/h3&gt;&lt;p&gt;ZeRO-Offload还可以用模型并行来实现更好的并行性。通过给cpu卸载梯度、优化器状态和优化器计算来和模型并行计算相适应。在这个情况下，首先，借由更难耗尽内存，可以使用更大的批次大小。其次，可以使用更多的GPU来进行模型并行计算。&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="周报" />
        <category term="课题组" />
        <category term="神经网络" />
        <category term="pytorch" />
        <updated>2023-10-13T10:23:34.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/09/30/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0/</id>
        <title>课题组第一周学习</title>
        <link rel="alternate" href="http://example.com/2023/09/30/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;h1 id=&#34;理论学习&#34;&gt;&lt;a href=&#34;#理论学习&#34; class=&#34;headerlink&#34; title=&#34;理论学习&#34;&gt;&lt;/a&gt;理论学习&lt;/h1&gt;&lt;h2 id=&#34;反向传播算法&#34;&gt;&lt;a href=&#34;#反向传播算法&#34; class=&#34;headerlink&#34; title=&#34;反向传播算法&#34;&gt;&lt;/a&gt;反向传播算法&lt;/h2&gt;&lt;p&gt;反向传播是一种基于有监督学习，用于根据误差和损失函数调整网络权重的算法。反向传播算法的核心思想是通过链式法则计算损失函数对于每个权重的梯度，然后使用梯度下降法更新权重。&lt;br&gt;过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先通过正向传播，根据输入数据得到一个网络的激励&lt;/li&gt;
&lt;li&gt;根据得到的激励与目标值计算损失函数&lt;/li&gt;
&lt;li&gt;根据损失函数，从输出层开始，依次沿着计算图反向计算每个权重的梯度&lt;/li&gt;
&lt;li&gt;根据得到的梯度调整权重&lt;br&gt;[1]	 &lt;a href=&#34;https://books.google.com/books/about/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8.html?id=2-PWvQEACAAJ&#34;&gt;深度学习入门: 基于Python的理论与实现[M]. 人民邮电出版社, 2018.(p.121,161)&lt;/a&gt;&lt;h2 id=&#34;前馈&#34;&gt;&lt;a href=&#34;#前馈&#34; class=&#34;headerlink&#34; title=&#34;前馈&#34;&gt;&lt;/a&gt;前馈&lt;/h2&gt;前馈神经网络是一种最简单的神经网络，它的每个神经元都是前一层神经元的输出。前馈神经网络的每个神经元都是前一层神经元的输出，因此它的输出不会反馈到输入层，这种网络结构也被称为前馈神经网络。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;卷积神经网络&#34;&gt;&lt;a href=&#34;#卷积神经网络&#34; class=&#34;headerlink&#34; title=&#34;卷积神经网络&#34;&gt;&lt;/a&gt;卷积神经网络&lt;/h2&gt;&lt;h3 id=&#34;卷积&#34;&gt;&lt;a href=&#34;#卷积&#34; class=&#34;headerlink&#34; title=&#34;卷积&#34;&gt;&lt;/a&gt;卷积&lt;/h3&gt;&lt;p&gt;卷积（convolution）是一种数学运算，主要应用于信号处理中对系统响应的计算。卷积运算可以将某个冲激响应针对任意输入进行计算，得到对应的响应结果。卷积运算的公式如下：&lt;br&gt;$$&lt;br&gt;y(t) &amp;#x3D; \int_{-\infty}^{\infty} x(a)h(t-a)da&lt;br&gt;$$&lt;br&gt;其中，$x(t)$为输入信号，$h(t)$为系统响应，$y(t)$为输出信号。&lt;/p&gt;
&lt;h3 id=&#34;二维离散卷积&#34;&gt;&lt;a href=&#34;#二维离散卷积&#34; class=&#34;headerlink&#34; title=&#34;二维离散卷积&#34;&gt;&lt;/a&gt;二维离散卷积&lt;/h3&gt;&lt;p&gt;对于图像处理来说，卷积需要用到二维矩阵的滑动窗口来进行卷积运算。二维离散卷积的公式如下：&lt;br&gt;$$&lt;br&gt;y(i,j) &amp;#x3D; \sum_{m&amp;#x3D;-\infty}^{\infty}\sum_{n&amp;#x3D;-\infty}^{\infty}x(m,n)h(i-m,j-n)&lt;br&gt;$$&lt;br&gt;其中，$x(m,n)$为输入图像，$h(i,j)$为卷积核，$y(i,j)$为输出图像。&lt;/p&gt;
&lt;h3 id=&#34;卷积神经网络-1&#34;&gt;&lt;a href=&#34;#卷积神经网络-1&#34; class=&#34;headerlink&#34; title=&#34;卷积神经网络&#34;&gt;&lt;/a&gt;卷积神经网络&lt;/h3&gt;&lt;p&gt;卷积神经网络（CNN）中，增加了卷积层和池化层。其可以从原本多维度的数据中提取欧氏距离较近的单元之间蕴含的信息。&lt;/p&gt;
&lt;h4 id=&#34;卷积层&#34;&gt;&lt;a href=&#34;#卷积层&#34; class=&#34;headerlink&#34; title=&#34;卷积层&#34;&gt;&lt;/a&gt;卷积层&lt;/h4&gt;&lt;p&gt;在卷积层中，当输入数据是图像时，卷积层会以三维数据形式接收数据，并以三维数据形式传输到下一层，输入输出数据称为特征图（feature map）。其中，卷积层的输入数据称为输入特征图（input feature map），输出数据称为输出特征图（output feature map）。&lt;/p&gt;
&lt;h4 id=&#34;CNN的处理流&#34;&gt;&lt;a href=&#34;#CNN的处理流&#34; class=&#34;headerlink&#34; title=&#34;CNN的处理流&#34;&gt;&lt;/a&gt;CNN的处理流&lt;/h4&gt;&lt;p&gt;针对一个图像，有三维的信息（长、宽、通道），同样，对这个图像进行处理的卷积核也是三维的。但是最终卷积得到的输出结果是二维的（每个通道卷积的结果加在一起）。在CNN中，针对多个卷积核，会得到多个二维的输出结果，这些输出结果会被叠加在一起，得到一个三维的输出结果。这个结果传递给下一层。同时，对多个数据，即批处理，卷积层将多个样本汇总成一次处理，传递中综合成四维的数据。&lt;/p&gt;
&lt;h4 id=&#34;池化层&#34;&gt;&lt;a href=&#34;#池化层&#34; class=&#34;headerlink&#34; title=&#34;池化层&#34;&gt;&lt;/a&gt;池化层&lt;/h4&gt;&lt;p&gt;池化层是一种降低数据大小的方法，它可以减少数据的大小，同时也可以防止过拟合。池化层的处理流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按照设定的步长，从输入数据中提取数据块&lt;/li&gt;
&lt;li&gt;例如MAX池化，将数据块中的最大值作为输出结果&lt;/li&gt;
&lt;li&gt;输出结果的规模即随步长变大而缩小&lt;br&gt;同时，池化层输入数据和输出数据的维度相同&lt;h2 id=&#34;循环神经网络&#34;&gt;&lt;a href=&#34;#循环神经网络&#34; class=&#34;headerlink&#34; title=&#34;循环神经网络&#34;&gt;&lt;/a&gt;循环神经网络&lt;/h2&gt;循环神经网络常用于nlp领域。它和前馈神经网络或CNN的主要区别在于循环神经网络（RNN）的隐藏层的输出不仅仅取决于当前的输入，还取决于前一时刻的隐藏层的输出。因此，RNN具有某种程度上的“记忆”能力。&lt;br&gt;另一个显著特征在于它们在每个网络层共享参数，RNN在每一层都共享相同的参数，这使得它们可以处理任意长度的序列。&lt;br&gt;然而，RNN在反向传播的过程中，梯度会随着时间的推移而消失或爆炸，这使得它们很难学习长期依赖关系。&lt;h2 id=&#34;注意力机制&#34;&gt;&lt;a href=&#34;#注意力机制&#34; class=&#34;headerlink&#34; title=&#34;注意力机制&#34;&gt;&lt;/a&gt;注意力机制&lt;/h2&gt;注意力机制可以增强神经网络输入数据中某些部分的权重，同时减弱其他部分的权重。&lt;br&gt;例如对一个翻译句子的网络，普通的逐个词翻译会在每一轮翻译过程中对单词序列依次提高注意力，也就是其注意力矩阵会是一个对角线上权值高的矩阵。但是在注意力机制下，每一轮翻译过程中，网络会根据上一轮的翻译结果，对输入句子中的某些部分进行更多的关注，即其权值的最大值不一定在对角线。从而提高翻译的连贯性。&lt;h2 id=&#34;并行计算&#34;&gt;&lt;a href=&#34;#并行计算&#34; class=&#34;headerlink&#34; title=&#34;并行计算&#34;&gt;&lt;/a&gt;并行计算&lt;/h2&gt;并行计算对计算任务进行拆分，将同时进行的计算任务分配到不同的计算单元上，从而提高计算速度。拆分的方式统称为并行方式，并行计算后的结果重新聚合的方式称为模型更新传递方式。&lt;br&gt;常见的并行方式有：&lt;/li&gt;
&lt;li&gt;数据并行：把数据集切分放到各个计算节点，并在哥哥节点之间传递模型参数&lt;/li&gt;
&lt;li&gt;模型并行：把模型切分放到各个计算节点，并在各个节点之间传递数据。一般把单个算子分配在配置相同的几个硬件上进行模型存储和计算。&lt;/li&gt;
&lt;li&gt;流水线并行：将模型切分成多个阶段，每个阶段在不同的计算节点上进行计算，每个阶段的计算结果传递给下一个阶段。&lt;br&gt;另外，如何更新模型参数也是并行计算的一个重要问题。在硬件组织架构方面，分为参数服务器架构和collective架构。在更新参数方面分为同步和异步更新&lt;a href=&#34;https://zhuanlan.zhihu.com/p/350501860&#34;&gt;参考内容&lt;/a&gt;&lt;h3 id=&#34;allreduce训练&#34;&gt;&lt;a href=&#34;#allreduce训练&#34; class=&#34;headerlink&#34; title=&#34;allreduce训练&#34;&gt;&lt;/a&gt;allreduce训练&lt;/h3&gt;在同步更新参数的训练中，利用AllReduce来整合不同worker的梯度数据。AllReduce有很多种类的实现，主要关注的问题在于不同worker之间传递信息的拓扑结构。例如，对于一个有4个worker的集群，有以下几种拓扑结构：&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ring&lt;/strong&gt;：每个worker只和相邻的worker通信&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mesh&lt;/strong&gt;：每个worker和所有其他worker通信，但是效率比较低。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Master-Worker&lt;/strong&gt;：一个worker作为master，其他worker作为worker，master和每个worker通信，worker之间不通信。&lt;br&gt;举N个worker的ring结构为例，考察这个结构的工作过程：&lt;/li&gt;
&lt;li&gt;每个worker计算自己的梯度&lt;/li&gt;
&lt;li&gt;每个worker把数据分成N份&lt;/li&gt;
&lt;li&gt;第k个worker把其第k份数据发送给第k+1个worker&lt;/li&gt;
&lt;li&gt;第k个worker把其第k-1份数据和第k-1个worker发送的数据整合，再发给下一个worker&lt;/li&gt;
&lt;li&gt;循环N次之后，每个worker包含最终整合结果的1份&lt;/li&gt;
&lt;li&gt;每个worker把自己的数据发送给下一个worker，收到数据后，每个worker的数据都是最终整合结果&lt;br&gt;这个结构的AllReduce的优势在于发送的数据量是固定的，和worker数量无关，避免了网络拥塞。&lt;a href=&#34;https://zhuanlan.zhihu.com/p/100012827&#34;&gt;参考内容&lt;/a&gt;&lt;h1 id=&#34;实践内容&#34;&gt;&lt;a href=&#34;#实践内容&#34; class=&#34;headerlink&#34; title=&#34;实践内容&#34;&gt;&lt;/a&gt;实践内容&lt;/h1&gt;&lt;h2 id=&#34;lenet5&#34;&gt;&lt;a href=&#34;#lenet5&#34; class=&#34;headerlink&#34; title=&#34;lenet5&#34;&gt;&lt;/a&gt;lenet5&lt;/h2&gt;lenet5是进行手写数字识别的CNN，它的结构如下：&lt;br&gt;输入层-&amp;gt;卷积层-&amp;gt;池化层-&amp;gt;卷积层-&amp;gt;池化层-&amp;gt;全连接层-&amp;gt;全连接层-&amp;gt;输出层（高斯连接）&lt;br&gt;与CNN不同的地方在于，LeNet使用sigmoid函数而非reLU函数。&lt;br&gt;lenet5网络的实现代码如下：&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;LeNet&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(LeNet, self).__init__()&lt;br&gt;        self.conv = nn.Sequential(&lt;br&gt;            nn.Conv2d(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;), &lt;span class=&#34;hljs-comment&#34;&gt;# in_channels, out_channels, kernel_size&lt;/span&gt;&lt;br&gt;            nn.Sigmoid(),&lt;br&gt;            nn.MaxPool2d(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;), &lt;span class=&#34;hljs-comment&#34;&gt;# kernel_size, stride&lt;/span&gt;&lt;br&gt;            nn.Conv2d(&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;),&lt;br&gt;            nn.Sigmoid(),&lt;br&gt;            nn.MaxPool2d(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        )&lt;br&gt;        self.fc = nn.Sequential(&lt;br&gt;            nn.Linear(&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;*&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;*&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;120&lt;/span&gt;),&lt;br&gt;            nn.Sigmoid(),&lt;br&gt;            nn.Linear(&lt;span class=&#34;hljs-number&#34;&gt;120&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;84&lt;/span&gt;),&lt;br&gt;            nn.Sigmoid(),&lt;br&gt;            nn.Linear(&lt;span class=&#34;hljs-number&#34;&gt;84&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;)&lt;br&gt;        )&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, img&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        feature = self.conv(img)&lt;br&gt;        output = self.fc(feature.view(img.shape[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;], -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;))&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; output&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
这个网络定义了两个部分，一个是卷积层，一个是全连接层。卷积层的输入是一个1通道的图像，输出是一个6通道的图像，卷积核的大小为5*5。全连接层的输入是16*4*4的数据，输出是10个类别的概率。&lt;h2 id=&#34;resnet&#34;&gt;&lt;a href=&#34;#resnet&#34; class=&#34;headerlink&#34; title=&#34;resnet&#34;&gt;&lt;/a&gt;resnet&lt;/h2&gt;ResNet主要用于解决深度神经网络无法找到更好的解的问题。在深层网络中，梯度消失或爆炸的问题会导致网络无法训练。ResNet通过引入残差块（residual block）来解决这个问题。ResNet将堆叠的几个隐含层作为一个残差块，用残差块拟合的函数从原本的f(x)变为f(x)+x。&lt;br&gt;[4]	&lt;a href=&#34;https://arxiv.org/abs/1512.03385&#34;&gt;HE K, ZHANG X, REN S, et al. Deep residual learning for image recognition[C]. Proceedings of the IEEE conference on computer vision and pattern recognition, 2016:770-778.&lt;/a&gt;&lt;br&gt;通过每个block中残差路径和shortcut路径的设计，可以实现不同的ResNet网络。事实证明，不断增加ResNet的深度，也没有发生解的退化，反而可以提高网络的性能。因此ResNet可以实现如下的网络结构：&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lianga1/picGo_test/main/3u8Wwj.png&#34; alt=&#34;resnet&#34;&gt;&lt;h3 id=&#34;实际部署&#34;&gt;&lt;a href=&#34;#实际部署&#34; class=&#34;headerlink&#34; title=&#34;实际部署&#34;&gt;&lt;/a&gt;实际部署&lt;/h3&gt;残差块类定义如下：&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Bottleneck&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;# 残差块定义&lt;/span&gt;&lt;br&gt;    extention = &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, inplanes, planes, stride, downsample=&lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(Bottleneck, self).__init__()&lt;br&gt;        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, stride=stride, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.bn1 = nn.BatchNorm2d(planes)&lt;br&gt;&lt;br&gt;        self.conv2 = nn.Conv2d(planes, planes, kernel_size=&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, stride=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, padding=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.bn2 = nn.BatchNorm2d(planes)&lt;br&gt;&lt;br&gt;        self.conv3 = nn.Conv2d(planes, planes * self.extention, kernel_size=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, stride=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.bn3 = nn.BatchNorm2d(planes * self.extention)&lt;br&gt;&lt;br&gt;        self.relu = nn.ReLU(inplace=&lt;span class=&#34;hljs-literal&#34;&gt;True&lt;/span&gt;)&lt;br&gt;&lt;br&gt;        self.downsample = downsample&lt;br&gt;        self.stride = stride&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
ResNet网络定义如下：&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ResNet50&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, block, layers, num_class&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        self.inplane = &lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(ResNet50, self).__init__()&lt;br&gt;&lt;br&gt;        self.block = block&lt;br&gt;        self.layers = layers&lt;br&gt;&lt;br&gt;        self.conv1 = nn.Conv2d(&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, self.inplane, kernel_size=&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;, stride=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, padding=&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.bn1 = nn.BatchNorm2d(self.inplane)&lt;br&gt;        self.relu = nn.ReLU()&lt;br&gt;        self.maxpool = nn.MaxPool2d(kernel_size=&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, stride=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, padding=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;&lt;br&gt;        self.stage1 = self.make_layer(self.block, &lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;, layers[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;], stride=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;        self.stage2 = self.make_layer(self.block, &lt;span class=&#34;hljs-number&#34;&gt;128&lt;/span&gt;, layers[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;], stride=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        self.stage3 = self.make_layer(self.block, &lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;, layers[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;], stride=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        self.stage4 = self.make_layer(self.block, &lt;span class=&#34;hljs-number&#34;&gt;512&lt;/span&gt;, layers[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;], stride=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;&lt;br&gt;        self.avgpool = nn.AvgPool2d(&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;)&lt;br&gt;        self.fc = nn.Linear(&lt;span class=&#34;hljs-number&#34;&gt;512&lt;/span&gt; * block.extention, num_class)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
在30Epoch后，在测试集的准确度达到了75%。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;BERT&#34;&gt;&lt;a href=&#34;#BERT&#34; class=&#34;headerlink&#34; title=&#34;BERT&#34;&gt;&lt;/a&gt;BERT&lt;/h2&gt;&lt;p&gt;BERT是基于Transformer的预训练模型，主要用于自然语言处理，它能够预测句子中缺失的词语。以及判断两个句子是不是上下句。&lt;br&gt;整个框架由多层transformer的encoder堆叠而成。encoder由注意力层和feed-forward层组成。&lt;br&gt;BERT中，输入由三种不同embedding组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;wordpiece embedding：由但词向量组成将单词划分成一组有限公共子词单元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;position embedaang：将单词的位置信息编码成特征向量。Transformer通过制定规则来构建一个position embedding&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;segment embedding：用于区分两个句子的向量表示。用于区别问答等非对称子句。&lt;/p&gt;
&lt;h3 id=&#34;网络结构&#34;&gt;&lt;a href=&#34;#网络结构&#34; class=&#34;headerlink&#34; title=&#34;网络结构&#34;&gt;&lt;/a&gt;网络结构&lt;/h3&gt;&lt;p&gt;BERT的主要结构是Transformer，Transformer结构如下图所示：&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lianga1/picGo_test/main/20200814234510853.jpg&#34; alt=&#34;transformer&#34;&gt;&lt;br&gt;其中左侧部分即为encoder部分。&lt;br&gt;encoder单元由一个multi-head-Attention + Layer Normalization + feedforword + Layer Normalization 叠加产生。&lt;br&gt;在比较大的BERT模型中，有24层encoder，每层有16个Attention，词向量维度1024。在较小情况下，有12层encoder，每层12个Attention，词向量维度768。&lt;br&gt;任何时候feed-forward大小都是词向量维度的4倍。&lt;/p&gt;
&lt;h4 id=&#34;Attention-Layer&#34;&gt;&lt;a href=&#34;#Attention-Layer&#34; class=&#34;headerlink&#34; title=&#34;Attention Layer&#34;&gt;&lt;/a&gt;Attention Layer&lt;/h4&gt;&lt;p&gt;这一层的输入是由X &amp;#x3D; (batch_size,max_len_embedding)构成的。&lt;br&gt;单个self-attention 计算过程是输入X分别和三个矩阵Wq,Wk,Wv相乘，得到Q,K,V。然后计算Q和K的点积，再除以$\sqrt{d_k}$，再经过softmax函数，得到attention矩阵。最后将attention矩阵和V相乘即加权求和，得到输出。&lt;br&gt;multi-head-Attention将多个不同的self-attention输出进行拼接，然后再乘以一个矩阵W0，得到最终的输出output_sum &amp;#x3D; (batch_size,max_len,n*w_length)这个结果再经过一个全连接层就是整个multi-head-Attention的输出。&lt;/p&gt;
&lt;h4 id=&#34;Layer-Normalization&#34;&gt;&lt;a href=&#34;#Layer-Normalization&#34; class=&#34;headerlink&#34; title=&#34;Layer Normalization&#34;&gt;&lt;/a&gt;Layer Normalization&lt;/h4&gt;&lt;p&gt;这个层相当于对每句话的embedding做归一化，所以用LN而非Batch Normalization&lt;/p&gt;
&lt;h4 id=&#34;BERT每一层的学习&#34;&gt;&lt;a href=&#34;#BERT每一层的学习&#34; class=&#34;headerlink&#34; title=&#34;BERT每一层的学习&#34;&gt;&lt;/a&gt;BERT每一层的学习&lt;/h4&gt;&lt;p&gt;从浅层到深层分别可以学习到surface，短语，语法和语义的信息。&lt;/p&gt;
&lt;h3 id=&#34;BERT的训练&#34;&gt;&lt;a href=&#34;#BERT的训练&#34; class=&#34;headerlink&#34; title=&#34;BERT的训练&#34;&gt;&lt;/a&gt;BERT的训练&lt;/h3&gt;&lt;p&gt;定义几个层的类如下：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Embedding：输入的embedding层，包括wordpiece embedding，position embedding，segment embedding&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Embeddings&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(Embeddings, self).__init__()&lt;br&gt;        self.seg_emb = nn.Embedding(n_segs, d_model)&lt;br&gt;        self.word_emb = nn.Embedding(max_vocab, d_model)&lt;br&gt;        self.pos_emb = nn.Embedding(max_len, d_model)&lt;br&gt;        self.norm = nn.LayerNorm(d_model)&lt;br&gt;        self.dropout = nn.Dropout(p_dropout)&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, x, seg&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        x: [batch, seq_len]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;        word_enc = self.word_emb(x)&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# positional embedding&lt;/span&gt;&lt;br&gt;        pos = torch.arange(x.shape[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;], dtype=torch.long, device=device)&lt;br&gt;        pos = pos.unsqueeze(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;).expand_as(x)&lt;br&gt;        pos_enc = self.pos_emb(pos)&lt;br&gt;&lt;br&gt;        seg_enc = self.seg_emb(seg)&lt;br&gt;        x = self.norm(word_enc + pos_enc + seg_enc)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; self.dropout(x)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# return: [batch, seq_len, d_model]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Multi-Head-Attention层&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ScaledDotProductAttention&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(ScaledDotProductAttention, self).__init__()&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, Q, K, V, attn_mask&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        scores = torch.matmul(Q, K.transpose(-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) / msqrt(d_k))&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# scores: [batch, n_heads, seq_len, seq_len]&lt;/span&gt;&lt;br&gt;        scores.masked_fill_(attn_mask, -&lt;span class=&#34;hljs-number&#34;&gt;1e9&lt;/span&gt;)&lt;br&gt;        attn = nn.Softmax(dim=-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)(scores)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# context: [batch, n_heads, seq_len, d_v]&lt;/span&gt;&lt;br&gt;        context = torch.matmul(attn, V)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; context&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MultiHeadAttention&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(MultiHeadAttention, self).__init__()&lt;br&gt;        self.W_Q = nn.Linear(d_model, d_k * n_heads, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.W_K = nn.Linear(d_model, d_k * n_heads, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.W_V = nn.Linear(d_model, d_v * n_heads, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.fc = nn.Linear(n_heads * d_v, d_model, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, Q, K, V, attn_mask&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        Q, K, V: [batch, seq_len, d_model]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        attn_mask: [batch, seq_len, seq_len]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;        batch = Q.size(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        split Q, K, V to per head formula: [batch, seq_len, n_heads, d_k]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        Convenient for matrix multiply opearation later&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        q, k, v: [batch, n_heads, seq_len, d_k / d_v]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;        per_Q = self.W_Q(Q).view(batch, -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, n_heads, d_k).transpose(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        per_K = self.W_K(K).view(batch, -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, n_heads, d_k).transpose(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        per_V = self.W_V(V).view(batch, -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, n_heads, d_v).transpose(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;&lt;br&gt;        attn_mask = attn_mask.unsqueeze(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;).repeat(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, n_heads, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# context: [batch, n_heads, seq_len, d_v]&lt;/span&gt;&lt;br&gt;        context = ScaledDotProductAttention()(per_Q, per_K, per_V, attn_mask)&lt;br&gt;        context = context.transpose(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;).contiguous().view(&lt;br&gt;            batch, -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, n_heads * d_v)&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# output: [batch, seq_len, d_model]&lt;/span&gt;&lt;br&gt;        output = self.fc(context)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; output&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其余层，包括FeedForword层和池化层&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;FeedForwardNetwork&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(FeedForwardNetwork, self).__init__()&lt;br&gt;        self.fc1 = nn.Linear(d_model, d_ff)&lt;br&gt;        self.fc2 = nn.Linear(d_ff, d_model)&lt;br&gt;        self.dropout = nn.Dropout(p_dropout)&lt;br&gt;        self.gelu = gelu&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, x&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        x = self.fc1(x)&lt;br&gt;        x = self.dropout(x)&lt;br&gt;        x = self.gelu(x)&lt;br&gt;        x = self.fc2(x)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; x&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Pooler&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(Pooler, self).__init__()&lt;br&gt;        self.fc = nn.Linear(d_model, d_model)&lt;br&gt;        self.tanh = nn.Tanh()&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, x&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        x: [batch, d_model] (first place output)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;        x = self.fc(x)&lt;br&gt;        x = self.tanh(x)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; x&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Encoder层和组合而成的BERT网络&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;EncoderLayer&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(EncoderLayer, self).__init__()&lt;br&gt;        self.norm1 = nn.LayerNorm(d_model)&lt;br&gt;        self.norm2 = nn.LayerNorm(d_model)&lt;br&gt;&lt;br&gt;        self.enc_attn = MultiHeadAttention()&lt;br&gt;        self.ffn = FeedForwardNetwork()&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, x, pad_mask&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        pre-norm&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        see more detail in https://openreview.net/pdf?id=B1x8anVFPr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        x: [batch, seq_len, d_model]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;        residual = x&lt;br&gt;        x = self.norm1(x)&lt;br&gt;        x = self.enc_attn(x, x, x, pad_mask) + residual&lt;br&gt;        residual = x&lt;br&gt;        x = self.norm2(x)&lt;br&gt;        x = self.ffn(x)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; x + residual&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;BERT&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, n_layers&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(BERT, self).__init__()&lt;br&gt;        self.embedding = Embeddings()&lt;br&gt;        self.encoders = nn.ModuleList([&lt;br&gt;            EncoderLayer() &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; _ &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;range&lt;/span&gt;(n_layers)&lt;br&gt;        ])&lt;br&gt;&lt;br&gt;        self.pooler = Pooler()&lt;br&gt;&lt;br&gt;        self.next_cls = nn.Linear(d_model, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        self.gelu = gelu&lt;br&gt;&lt;br&gt;        shared_weight = self.pooler.fc.weight&lt;br&gt;        self.fc = nn.Linear(d_model, d_model)&lt;br&gt;        self.fc.weight = shared_weight&lt;br&gt;&lt;br&gt;        shared_weight = self.embedding.word_emb.weight&lt;br&gt;        self.word_classifier = nn.Linear(d_model, max_vocab, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.word_classifier.weight = shared_weight&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, tokens, segments, masked_pos&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        output = self.embedding(tokens, segments)&lt;br&gt;        enc_self_pad_mask = get_pad_mask(tokens)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; layer &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; self.encoders:&lt;br&gt;            output = layer(output, enc_self_pad_mask)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# output: [batch, max_len, d_model]&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# NSP Task&lt;/span&gt;&lt;br&gt;        hidden_pool = self.pooler(output[:, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;])&lt;br&gt;        logits_cls = self.next_cls(hidden_pool)&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# Masked Language Model Task&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# masked_pos: [batch, max_pred] -&amp;gt; [batch, max_pred, d_model]&lt;/span&gt;&lt;br&gt;        masked_pos = masked_pos.unsqueeze(-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;).expand(-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, d_model)&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# h_masked: [batch, max_pred, d_model]&lt;/span&gt;&lt;br&gt;        h_masked = torch.gather(output, dim=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, index=masked_pos)&lt;br&gt;        h_masked = self.gelu(self.fc(h_masked))&lt;br&gt;        logits_lm = self.word_classifier(h_masked)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# logits_lm: [batch, max_pred, max_vocab]&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# logits_cls: [batch, 2]&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; logits_cls, logits_lm&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;batch-size设为6&lt;br&gt;训练300个Epoch&lt;br&gt;训练结果进行预测例句&lt;br&gt;结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight routeros&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs routeros&#34;&gt;========================================================&lt;br&gt;Masked data:&lt;br&gt;[&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[CLS]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[MASK]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[MASK]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;too&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;how&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;are&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;today&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;great&amp;#x27;&lt;/span&gt;,&lt;br&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;my&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;baseball&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;team&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;won&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;the&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;competition&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;]&lt;br&gt;BERT reconstructed:&lt;br&gt;[&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[CLS]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;nice&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;meet&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;too&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;how&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;are&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;today&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;great&amp;#x27;&lt;/span&gt;,&lt;br&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;my&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;baseball&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;team&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;won&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;the&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;competition&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;]&lt;br&gt;Original sentence:&lt;br&gt;[&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[CLS]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;nice&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;meet&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;too&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;how&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;are&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;today&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;great&amp;#x27;&lt;/span&gt;,&lt;br&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;my&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;baseball&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;team&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;won&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;the&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;competition&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;]&lt;br&gt;===============Next Sentence &lt;span class=&#34;hljs-attribute&#34;&gt;Prediction&lt;/span&gt;===============&lt;br&gt;Two sentences are continuous? &lt;span class=&#34;hljs-literal&#34;&gt;True&lt;/span&gt;&lt;br&gt;BERT predict: &lt;span class=&#34;hljs-literal&#34;&gt;True&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="技术" />
        <category term="周报" />
        <category term="课题组" />
        <category term="神经网络" />
        <category term="pytorch" />
        <updated>2023-09-30T11:51:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/09/24/%E5%85%B3%E4%BA%8Eselenium%E5%8C%85%E5%AE%89%E8%A3%85%E8%BF%90%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E9%99%A4/</id>
        <title>关于selenium包安装运行的问题排除</title>
        <link rel="alternate" href="http://example.com/2023/09/24/%E5%85%B3%E4%BA%8Eselenium%E5%8C%85%E5%AE%89%E8%A3%85%E8%BF%90%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E9%99%A4/"/>
        <content type="html">&lt;h1 id=&#34;selenium-包安装&#34;&gt;&lt;a href=&#34;#selenium-包安装&#34; class=&#34;headerlink&#34; title=&#34;selenium 包安装&#34;&gt;&lt;/a&gt;selenium 包安装&lt;/h1&gt;&lt;p&gt;首先是想要在base环境下安装的，但是因为base环境的内容太多，solve解决依赖问题耗时过长，所以考虑新建环境。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;conda create -n webdriver python=3.7&lt;br&gt;conda activate webdriver&lt;br&gt;conda install selenium&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;出现问题&#34;&gt;&lt;a href=&#34;#出现问题&#34; class=&#34;headerlink&#34; title=&#34;出现问题&#34;&gt;&lt;/a&gt;出现问题&lt;/h1&gt;&lt;p&gt;在按照例程运行代码时，出现了以下问题：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; selenium &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; webdriver&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; pd&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; platform&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; plt&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; os&lt;br&gt;chromedriver = os.path.abspath(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;C:\\Users\\18381\\anaconda3\\Scripts\\chromedriver.exe&amp;#x27;&lt;/span&gt;)&lt;br&gt;os.environ[&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;webdriver.chrome.driver&amp;quot;&lt;/span&gt;] = chromedriver&lt;br&gt;driver = webdriver.Chrome()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;出现了以下错误：&lt;br&gt;Unable to obtain driver using Selenium Manager: C:\Users\18381\anaconda3\envs\webdriver\lib\site-packages\selenium\webdriver\common\windows\selenium-manager.exe is missing.&lt;/p&gt;
&lt;p&gt;因此，查阅github上有关issue，发现是conda打包问题，没有打包这个可执行文件。因此，需要手动下载这个文件，放到对应的目录下。&lt;br&gt;&lt;a href=&#34;https://github.com/SeleniumHQ/selenium/tree/trunk/common/manager&#34;&gt;下载文件&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;其他需要注意的地方&#34;&gt;&lt;a href=&#34;#其他需要注意的地方&#34; class=&#34;headerlink&#34; title=&#34;其他需要注意的地方&#34;&gt;&lt;/a&gt;其他需要注意的地方&lt;/h1&gt;&lt;p&gt;比如求解器，可以使用新的求解器例如&lt;a href=&#34;https://www.anaconda.com/blog/a-faster-conda-for-a-growing-community&#34;&gt;libmamba&lt;/a&gt;&lt;br&gt;虽然我还没完全搞懂这个东西如何使用&lt;/p&gt;
&lt;p&gt;需要先安装chrome和对应的chromedriver&lt;br&gt;&lt;a href=&#34;https://chromedriver.chromium.org/downloads&#34;&gt;chromedriver&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="python" />
        <updated>2023-09-24T09:03:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/08/20/%E4%B8%96%E7%95%8C%E8%A7%82%E5%85%B6%E4%B8%80/</id>
        <title>世界观其一</title>
        <link rel="alternate" href="http://example.com/2023/08/20/%E4%B8%96%E7%95%8C%E8%A7%82%E5%85%B6%E4%B8%80/"/>
        <content type="html">&lt;h1 id=&#34;写在最前面&#34;&gt;&lt;a href=&#34;#写在最前面&#34; class=&#34;headerlink&#34; title=&#34;写在最前面&#34;&gt;&lt;/a&gt;写在最前面&lt;/h1&gt;&lt;p&gt;这篇文章主要是在闲极无聊学sql时，看到不同版本sql语法不兼容时感到的一种割裂感，进而想到用ai创作一幅表达我心态的画。从这里又跳跃到，如果在未来，ai创作一幅画仅需要一念，那么对生活又是一种什么样颠覆的改变呢。于是乎，在这种想法的引导下决定试着写一写自己心目中近未来世界的一些简单的世界观。&lt;/p&gt;
&lt;h1 id=&#34;居家生活&#34;&gt;&lt;a href=&#34;#居家生活&#34; class=&#34;headerlink&#34; title=&#34;居家生活&#34;&gt;&lt;/a&gt;居家生活&lt;/h1&gt;&lt;h2 id=&#34;房间的装潢&#34;&gt;&lt;a href=&#34;#房间的装潢&#34; class=&#34;headerlink&#34; title=&#34;房间的装潢&#34;&gt;&lt;/a&gt;房间的装潢&lt;/h2&gt;&lt;p&gt;对于一个生活在不远的未来的人来说，由于世界范围内开源运动与算力共享运动的蓬勃发展，开源软件的交互界面在人工智能辅助设计（AAD）的加持下变得更加易于操作。在房间装潢方面，具有初步功能的脑机接口，可以检测大脑的情绪反应，搭配心理判断系统的语言+画面交互，可以实现对使用者思维中对房间装潢需要的画面进行复现与自动优化，并搭配墙纸（以柔性半主动发光材料制成）进行显示，从而完成房间装潢的快速个性化配置。&lt;/p&gt;
</content>
        <category term="写作" />
        <category term="科幻" />
        <category term="世界观" />
        <updated>2023-08-20T13:15:50.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/07/27/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-27/</id>
        <title>电赛培训-23-07-27</title>
        <link rel="alternate" href="http://example.com/2023/07/27/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-27/"/>
        <content type="html">&lt;h2 id=&#34;赛程&#34;&gt;&lt;a href=&#34;#赛程&#34; class=&#34;headerlink&#34; title=&#34;赛程&#34;&gt;&lt;/a&gt;赛程&lt;/h2&gt;&lt;p&gt;9-11号作品测评&lt;br&gt;2号早晨7点半到413，放题&lt;/p&gt;
</content>
        <updated>2023-07-27T02:04:23.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/07/19/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-19/</id>
        <title>电赛培训-23-07-19</title>
        <link rel="alternate" href="http://example.com/2023/07/19/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-19/"/>
        <content type="html">&lt;h1 id=&#34;pid控制系统&#34;&gt;&lt;a href=&#34;#pid控制系统&#34; class=&#34;headerlink&#34; title=&#34;pid控制系统&#34;&gt;&lt;/a&gt;pid控制系统&lt;/h1&gt;&lt;h2 id=&#34;公式&#34;&gt;&lt;a href=&#34;#公式&#34; class=&#34;headerlink&#34; title=&#34;公式&#34;&gt;&lt;/a&gt;公式&lt;/h2&gt;&lt;p&gt;$$ u(t)&amp;#x3D;K_p e(t)+K_i \int_0^t e(\tau) d\tau + K_d \frac{de(t)}{dt} $$&lt;/p&gt;
&lt;h2 id=&#34;作用&#34;&gt;&lt;a href=&#34;#作用&#34; class=&#34;headerlink&#34; title=&#34;作用&#34;&gt;&lt;/a&gt;作用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;比例项：减小误差&lt;/li&gt;
&lt;li&gt;积分项：消除稳态误差&lt;/li&gt;
&lt;li&gt;微分项：减小超调量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;超调量&#34;&gt;&lt;a href=&#34;#超调量&#34; class=&#34;headerlink&#34; title=&#34;超调量&#34;&gt;&lt;/a&gt;超调量&lt;/h3&gt;&lt;p&gt;$$ \xi &amp;#x3D; \frac{e^{-\frac{\pi \zeta}{\sqrt{1-\zeta^2}}}}{\sqrt{1-\zeta^2}} $$&lt;br&gt;超调量的意义在于：在没有积分项的情况下，超调量越大，系统的响应越快，但是超调量越大，系统的稳定性越差&lt;br&gt;其中 $\zeta$ 是阻尼系数，$\zeta$ 越大，超调量越小，系统越稳定&lt;/p&gt;
&lt;h2 id=&#34;误差&#34;&gt;&lt;a href=&#34;#误差&#34; class=&#34;headerlink&#34; title=&#34;误差&#34;&gt;&lt;/a&gt;误差&lt;/h2&gt;&lt;p&gt;低频抖动：积分项过大&lt;br&gt;高频抖动：微分项过大&lt;/p&gt;
&lt;h2 id=&#34;例子&#34;&gt;&lt;a href=&#34;#例子&#34; class=&#34;headerlink&#34; title=&#34;例子&#34;&gt;&lt;/a&gt;例子&lt;/h2&gt;&lt;p&gt;状态量：超声波，速度，MPU6050姿态，&lt;/p&gt;
&lt;h1 id=&#34;卡尔曼滤波&#34;&gt;&lt;a href=&#34;#卡尔曼滤波&#34; class=&#34;headerlink&#34; title=&#34;卡尔曼滤波&#34;&gt;&lt;/a&gt;卡尔曼滤波&lt;/h1&gt;&lt;h2 id=&#34;作用-1&#34;&gt;&lt;a href=&#34;#作用-1&#34; class=&#34;headerlink&#34; title=&#34;作用&#34;&gt;&lt;/a&gt;作用&lt;/h2&gt;&lt;p&gt;利用间接测量值，计算最优估算，组合各种可能受到噪音影响的数据源。&lt;/p&gt;
&lt;h2 id=&#34;原理&#34;&gt;&lt;a href=&#34;#原理&#34; class=&#34;headerlink&#34; title=&#34;原理&#34;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;h3 id=&#34;状态观察&#34;&gt;&lt;a href=&#34;#状态观察&#34; class=&#34;headerlink&#34; title=&#34;状态观察&#34;&gt;&lt;/a&gt;状态观察&lt;/h3&gt;&lt;p&gt;状态观察是指，通过测量值，计算出状态量的过程，&lt;br&gt;状态观测器得到的估计状态表示为$ \hat{x}  $&lt;/p&gt;
&lt;h3 id=&#34;状态预测&#34;&gt;&lt;a href=&#34;#状态预测&#34; class=&#34;headerlink&#34; title=&#34;状态预测&#34;&gt;&lt;/a&gt;状态预测&lt;/h3&gt;&lt;p&gt;根据数学模型，从已有的状态量，通过计算得到了一个估计量$ \hat{x} $&lt;br&gt;然而，数学模型的预测有其局限性，初值条件不同所以不能得到相同的结果。&lt;br&gt;所以需要状态估算器&lt;/p&gt;
&lt;h3 id=&#34;状态估算&#34;&gt;&lt;a href=&#34;#状态估算&#34; class=&#34;headerlink&#34; title=&#34;状态估算&#34;&gt;&lt;/a&gt;状态估算&lt;/h3&gt;&lt;p&gt;需要估算值收敛到实际值，所以需要反馈，反馈误差为e&lt;br&gt;$$ e &amp;#x3D; x - \hat{x} $$假设一个微分方程：&lt;br&gt;$$ \dot{x} &amp;#x3D; Ax + Bu $$$$ y &amp;#x3D; Cx $$以上是一个真实系统&lt;br&gt;$$ \dot{\hat{x}} &amp;#x3D; A\hat{x} + Bu + Ke$$$$ \hat{y} &amp;#x3D; C\hat{x} $$这是系统估算模型&lt;/p&gt;
&lt;p&gt;两方程分别相减得到：&lt;br&gt;$$ \dot{e} &amp;#x3D;(A- KC)·e$$$$ y-\hat{y} &amp;#x3D; C·e$$&lt;br&gt;解得:&lt;br&gt;$$e(t) &amp;#x3D; e^{A-KC} ·e(0)$$&lt;br&gt;若A-KC的值小于0，那么e(t)会收敛到0，即估算值收敛到实际值，实际上，k可以加速收敛过程。&lt;/p&gt;
&lt;h3 id=&#34;例子-1&#34;&gt;&lt;a href=&#34;#例子-1&#34; class=&#34;headerlink&#34; title=&#34;例子&#34;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;p&gt;$$ \dot{x} &amp;#x3D; Ax + Bu + w$$$$ y &amp;#x3D; Cx + v$$&lt;br&gt;w是过程噪声，v是测量噪声，他们都服从高斯分布，且互相独立。&lt;br&gt;在初始条件下，状态估算器估计了$\hat{x}$，真实值在这个中心的正态分布周围&lt;br&gt;在多轮预测后，估计值的分布会比初始条件下的估计分布更大，同时，还有一个测量方程得到的均值与方差都不同的分布，这两个分布的相乘就得到优化估计。&lt;br&gt;事实上，卡尔曼滤波器方程是一个随机系统的状态观测器&lt;br&gt;公式如下：&lt;br&gt;$$ \hat{x}&lt;em&gt;k&amp;#x3D;A·\hat{x}&lt;/em&gt;{k-1} +B·u_k +K_k(y_k - C(A·\hat{x}+B·u_k)) $$&lt;br&gt;其中$\hat{x_k^-}$是前项估测，代表前两项的和，所以公式写为：&lt;br&gt;$$ \hat{x}_k^ &amp;#x3D; A·\hat{x_k^-} ++K_k(y_k - C\hat{x_k^-}) $$&lt;/p&gt;
&lt;p&gt;所以结果成为后验估值。&lt;/p&gt;
&lt;p&gt;误差协方差矩阵P&lt;br&gt;$$ P_k^- &amp;#x3D; AP_{k-1}A^T +Q$$&lt;br&gt;这个就是对矩阵P的估值&lt;/p&gt;
&lt;p&gt;第二步，更新状态&lt;br&gt;$$ K_k &amp;#x3D; \frac{P_k^-C^T}{(CP_k^-C^T+R)} $$&lt;br&gt;这个是卡尔曼增益，使得更新K后误差协方差最小&lt;br&gt;$$ P_k &amp;#x3D; (I-K_kC)P_k^- $$&lt;/p&gt;
</content>
        <updated>2023-07-19T02:19:52.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/07/18/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-18/</id>
        <title>电赛培训-23-07-18</title>
        <link rel="alternate" href="http://example.com/2023/07/18/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-18/"/>
        <content type="html">&lt;h1 id=&#34;arduino小车测速&#34;&gt;&lt;a href=&#34;#arduino小车测速&#34; class=&#34;headerlink&#34; title=&#34;arduino小车测速&#34;&gt;&lt;/a&gt;arduino小车测速&lt;/h1&gt;&lt;h2 id=&#34;霍尔编码器&#34;&gt;&lt;a href=&#34;#霍尔编码器&#34; class=&#34;headerlink&#34; title=&#34;霍尔编码器&#34;&gt;&lt;/a&gt;霍尔编码器&lt;/h2&gt;&lt;h2 id=&#34;外部中断&#34;&gt;&lt;a href=&#34;#外部中断&#34; class=&#34;headerlink&#34; title=&#34;外部中断&#34;&gt;&lt;/a&gt;外部中断&lt;/h2&gt;&lt;p&gt;一个霍尔编码器如果有两个传感器传出两路信号，就能根据相位差同时测量速度和方向&lt;br&gt;但是arduino只有两个硬件中断管脚，同时还要使能计时器中断，所以需要一个外部中断库&lt;br&gt;PinChangeInterrupt库&lt;/p&gt;
&lt;h2 id=&#34;定时中断&#34;&gt;&lt;a href=&#34;#定时中断&#34; class=&#34;headerlink&#34; title=&#34;定时中断&#34;&gt;&lt;/a&gt;定时中断&lt;/h2&gt;&lt;p&gt;atmel内部有三个定时器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Timer0是delay用的&lt;/li&gt;
&lt;li&gt;Timer1是pwm用的&lt;/li&gt;
&lt;li&gt;只有Timer2可以使用来进行定时中断&lt;br&gt;因此，需要使用MsTimer2库来实现定时中断&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2023-07-18T02:44:15.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/07/14/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-14/</id>
        <title>电赛培训-23-07-14</title>
        <link rel="alternate" href="http://example.com/2023/07/14/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-14/"/>
        <content type="html">&lt;h1 id=&#34;PWM&#34;&gt;&lt;a href=&#34;#PWM&#34; class=&#34;headerlink&#34; title=&#34;PWM&#34;&gt;&lt;/a&gt;PWM&lt;/h1&gt;&lt;h2 id=&#34;通用定时器&#34;&gt;&lt;a href=&#34;#通用定时器&#34; class=&#34;headerlink&#34; title=&#34;通用定时器&#34;&gt;&lt;/a&gt;通用定时器&lt;/h2&gt;&lt;h3 id=&#34;预分频&#34;&gt;&lt;a href=&#34;#预分频&#34; class=&#34;headerlink&#34; title=&#34;预分频&#34;&gt;&lt;/a&gt;预分频&lt;/h3&gt;&lt;p&gt;通过对时钟频率进行分频，实现了让计数器可以计数更长的时间。&lt;/p&gt;
&lt;h2 id=&#34;占空比&#34;&gt;&lt;a href=&#34;#占空比&#34; class=&#34;headerlink&#34; title=&#34;占空比&#34;&gt;&lt;/a&gt;占空比&lt;/h2&gt;&lt;p&gt;占空比的实现是通过调节计数器到达翻转电平的值的大小来实现的。&lt;br&gt;利用的是计数器的比较功能&lt;br&gt;通过调节一个计数器不同的值，可以同时实现多个pwm的多个占空比的调节。但是他们的频率是相同的，若想要不同频率需要使用不同的计时器。&lt;br&gt;TIM3&amp;#x2F;4通道数较多&lt;/p&gt;
&lt;h2 id=&#34;捕获模式&#34;&gt;&lt;a href=&#34;#捕获模式&#34; class=&#34;headerlink&#34; title=&#34;捕获模式&#34;&gt;&lt;/a&gt;捕获模式&lt;/h2&gt;&lt;p&gt;捕获模式可以用来测量信号的频率，占空比等。&lt;/p&gt;
&lt;h2 id=&#34;设置&#34;&gt;&lt;a href=&#34;#设置&#34; class=&#34;headerlink&#34; title=&#34;设置&#34;&gt;&lt;/a&gt;设置&lt;/h2&gt;&lt;p&gt;打开对应channel的pwm生成，设定预分频和counter值（推荐一个方便运算占空比的值）&lt;/p&gt;
&lt;h2 id=&#34;作业&#34;&gt;&lt;a href=&#34;#作业&#34; class=&#34;headerlink&#34; title=&#34;作业&#34;&gt;&lt;/a&gt;作业&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;需要实现通过按键增加占空比&lt;/li&gt;
&lt;li&gt;用捕获模式测量发生的PWM波频率和占空比&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2023-07-14T01:30:14.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/07/13/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-13/</id>
        <title>电赛培训-23-07-13</title>
        <link rel="alternate" href="http://example.com/2023/07/13/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-13/"/>
        <content type="html">&lt;h1 id=&#34;stm32串口通信&#34;&gt;&lt;a href=&#34;#stm32串口通信&#34; class=&#34;headerlink&#34; title=&#34;stm32串口通信&#34;&gt;&lt;/a&gt;stm32串口通信&lt;/h1&gt;&lt;h1 id=&#34;定时器&#34;&gt;&lt;a href=&#34;#定时器&#34; class=&#34;headerlink&#34; title=&#34;定时器&#34;&gt;&lt;/a&gt;定时器&lt;/h1&gt;&lt;h2 id=&#34;通用定时器&#34;&gt;&lt;a href=&#34;#通用定时器&#34; class=&#34;headerlink&#34; title=&#34;通用定时器&#34;&gt;&lt;/a&gt;通用定时器&lt;/h2&gt;&lt;p&gt;采用apb1&amp;#x2F;apb2总线&lt;/p&gt;
&lt;h3 id=&#34;预分频&#34;&gt;&lt;a href=&#34;#预分频&#34; class=&#34;headerlink&#34; title=&#34;预分频&#34;&gt;&lt;/a&gt;预分频&lt;/h3&gt;&lt;p&gt;计时时长&amp;#x3D; (预分频+1) * (计数器值+1) &amp;#x2F; 时钟频率&lt;/p&gt;
&lt;h3 id=&#34;中断回调&#34;&gt;&lt;a href=&#34;#中断回调&#34; class=&#34;headerlink&#34; title=&#34;中断回调&#34;&gt;&lt;/a&gt;中断回调&lt;/h3&gt;&lt;p&gt;HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)&lt;br&gt;这个函数可以复制到it文件中，定义这个函数即可在中断中调用这个函数。&lt;/p&gt;
</content>
        <updated>2023-07-13T01:57:16.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/07/12/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-12/</id>
        <title>电赛培训-23-07-12</title>
        <link rel="alternate" href="http://example.com/2023/07/12/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-12/"/>
        <content type="html">&lt;h1 id=&#34;stm32定时器&#34;&gt;&lt;a href=&#34;#stm32定时器&#34; class=&#34;headerlink&#34; title=&#34;stm32定时器&#34;&gt;&lt;/a&gt;stm32定时器&lt;/h1&gt;&lt;p&gt;SysTick控制寄存器：&lt;br&gt;在SysTick_Config函数中，需要传进一个参数，代表着多少个tick触发一次中断。这个参数是一个32位的寄存器，但是只有24位有效，因此最大值是2^24-1，也就是16777215，也就是16Mhz的时钟下，最大延时是1s。如果需要更长的延时，需要自己写一个计数器，然后在中断中进行判断。&lt;br&gt;有一个变量是SystemCoreClock，代表当前时钟速度。把这个变量除以多少，就是把一秒分成多少份来计时。&lt;br&gt;在SysTick_Handler这个函数中，每次计时器触发中断都会调用这个函数，可以设置一个静态变量来进行计数，例如每1ms触发中断，就让这个函数每500次进入中断才执行某个行为，就能实现每500ms执行一次某个行为。&lt;/p&gt;
&lt;h1 id=&#34;按键中断&#34;&gt;&lt;a href=&#34;#按键中断&#34; class=&#34;headerlink&#34; title=&#34;按键中断&#34;&gt;&lt;/a&gt;按键中断&lt;/h1&gt;</content>
        <updated>2023-07-12T01:51:29.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/07/11/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-11/</id>
        <title>电赛培训-23-07-11</title>
        <link rel="alternate" href="http://example.com/2023/07/11/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-11/"/>
        <content type="html">&lt;h1 id=&#34;stm32-开发&#34;&gt;&lt;a href=&#34;#stm32-开发&#34; class=&#34;headerlink&#34; title=&#34;stm32 开发&#34;&gt;&lt;/a&gt;stm32 开发&lt;/h1&gt;&lt;h2 id=&#34;配置内容&#34;&gt;&lt;a href=&#34;#配置内容&#34; class=&#34;headerlink&#34; title=&#34;配置内容&#34;&gt;&lt;/a&gt;配置内容&lt;/h2&gt;&lt;p&gt;main.c中的user code 注释中间是不会被cube重新生成的&lt;/p&gt;
&lt;h2 id=&#34;时钟树&#34;&gt;&lt;a href=&#34;#时钟树&#34; class=&#34;headerlink&#34; title=&#34;时钟树&#34;&gt;&lt;/a&gt;时钟树&lt;/h2&gt;&lt;h2 id=&#34;第一个hal函数&#34;&gt;&lt;a href=&#34;#第一个hal函数&#34; class=&#34;headerlink&#34; title=&#34;第一个hal函数&#34;&gt;&lt;/a&gt;第一个hal函数&lt;/h2&gt;&lt;p&gt;HAL_GPIO_WritePin(GPIOF,LED0_PIN|LED1_PIN, GPIO_PIN_SET);&lt;br&gt;HAL_Delay(ms);&lt;/p&gt;
&lt;h2 id=&#34;板载按钮&#34;&gt;&lt;a href=&#34;#板载按钮&#34; class=&#34;headerlink&#34; title=&#34;板载按钮&#34;&gt;&lt;/a&gt;板载按钮&lt;/h2&gt;&lt;p&gt;PE4作为ButtonPin，使能需要一个上拉电阻&lt;/p&gt;
&lt;h2 id=&#34;中断&#34;&gt;&lt;a href=&#34;#中断&#34; class=&#34;headerlink&#34; title=&#34;中断&#34;&gt;&lt;/a&gt;中断&lt;/h2&gt;&lt;p&gt;可以在cube中更改引脚为外部中断，可以调节中断触发模式&lt;/p&gt;
&lt;h1 id=&#34;stm32用于clion的诸多问题&#34;&gt;&lt;a href=&#34;#stm32用于clion的诸多问题&#34; class=&#34;headerlink&#34; title=&#34;stm32用于clion的诸多问题&#34;&gt;&lt;/a&gt;stm32用于clion的诸多问题&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Error: libusb_open() failed with LIBUSB_ERROR_NOT_SUPPORTED&lt;br&gt;初步估计是usb驱动问题，因此计划使用zadig重装驱动，libusb&lt;/li&gt;
&lt;li&gt;Error:Error: timed out while waiting for target halted&lt;br&gt;似乎是在等待重启的过程中超时，难道是没有设置重启？&lt;br&gt;&lt;strong&gt;解决了，忘了换配置文件了，老配置文件没问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;问题又来了，Initfailed，连接不到target，先用的玄学方法：按住rst按键，再烧录，就用这种笨方法至少可以烧录了&lt;br&gt;作为重置方法，接下来有一个比较好的解决方案，就是再cubemx中，pinout设置栏，再systemcore的sys部分里，有一个debug模式选择，之前一直是disable，所以拒绝再外部烧写，现在改成serial wire，就可以了。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2023-07-11T01:49:47.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/07/10/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-10/</id>
        <title>电赛培训-23-07-10</title>
        <link rel="alternate" href="http://example.com/2023/07/10/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-10/"/>
        <content type="html">&lt;h1 id=&#34;spi与i2c&#34;&gt;&lt;a href=&#34;#spi与i2c&#34; class=&#34;headerlink&#34; title=&#34;spi与i2c&#34;&gt;&lt;/a&gt;spi与i2c&lt;/h1&gt;&lt;h2 id=&#34;iic通信&#34;&gt;&lt;a href=&#34;#iic通信&#34; class=&#34;headerlink&#34; title=&#34;iic通信&#34;&gt;&lt;/a&gt;iic通信&lt;/h2&gt;&lt;p&gt;i2c是一种用于设备间通讯的两线协议&lt;br&gt;硬件和软件实现都通过machine.I2C和machine.SoftI2C来实现。&lt;br&gt;硬件I2c优势在于速度快，但是对使用的引脚有限制。&lt;br&gt;软件I2C优势在于兼容性强，但是速度慢&lt;br&gt;函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件I2C：使用以下参数来构造I2C对象&lt;ul&gt;
&lt;li&gt;id表示特定的外设，取决于特定板子&lt;/li&gt;
&lt;li&gt;scl：时钟线引脚，Pin&lt;/li&gt;
&lt;li&gt;sda：数据线引脚，Pin&lt;/li&gt;
&lt;li&gt;freq：时钟频率，整数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意接线先关注缺少的端口例如I2C或uart，之后再关注gpio&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件I2C：使用以下参数来构造I2C对象&lt;ul&gt;
&lt;li&gt;scl：时钟线引脚，Pin&lt;/li&gt;
&lt;li&gt;sda：数据线引脚，Pin&lt;/li&gt;
&lt;li&gt;freq：时钟频率，整数&lt;/li&gt;
&lt;li&gt;timeout：超时时间，整数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;init函数可以重新定义&lt;/li&gt;
&lt;li&gt;I2C.start()：开始通信&lt;/li&gt;
&lt;li&gt;I2C.stop()：结束通信&lt;/li&gt;
&lt;li&gt;I2C.readint(buf,nack&amp;#x3D;True):读取字节存储到buf中，字节长度是buf长度，收到出最后一个字节以外所有子接后，将发送ack，如果设置nack则发送nack，ack代表着以后还会传输，nack代表着这是最后一个字节&lt;/li&gt;
&lt;li&gt;I2C.write(buf)：将buf中的字节写入到总线上，检查每个字节是否收到ack&lt;/li&gt;
&lt;li&gt;I2C.readfrom(addr,nbytes,stop&amp;#x3D;True):从addr地址读取nbytes个字节，如果stop为True则在输入结束时发送stop信号。&lt;/li&gt;
&lt;li&gt;I2c.readfrom_into(adr,)&lt;/li&gt;
&lt;li&gt;I2c.writeto(addr,buf,stop&amp;#x3D;True)&lt;/li&gt;
&lt;li&gt;I2c.writevto(addr,vector,stop&amp;#x3D;True)将vector中包含的字节写入addr指定的从站，vector应该具有缓冲协议的元组或对象列表&lt;/li&gt;
&lt;li&gt;I2c.readfrom_mem(addr,memaddr,nbytes,addrsize&amp;#x3D;8)从memaddr指定的内存地址开始，从addr指定的从站读出nbytes。参数addrsize以位为单位指定地址大小，返回读取数据bytes对象。&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;硬件I3c外设&#34;&gt;&lt;a href=&#34;#硬件I3c外设&#34; class=&#34;headerlink&#34; title=&#34;硬件I3c外设&#34;&gt;&lt;/a&gt;硬件I3c外设&lt;/h3&gt;任何可用的输出引脚都可以用于scl和sda，默认情况下，I2C对象使用id 0，scl引脚为22，sda引脚为21，时钟频率为400kHz。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spi通信&#34;&gt;&lt;a href=&#34;#spi通信&#34; class=&#34;headerlink&#34; title=&#34;spi通信&#34;&gt;&lt;/a&gt;spi通信&lt;/h2&gt;&lt;p&gt;spi是一种由主机驱动的同步串行协议。在物理层概念，一条总线有三条线路组成：SCK，MOSI、MISO，多个设备可以共享一条总线。每个设备有一个单独的第四个信号SS（从设备选择），来选择总线上的特定设备并与之通信。&lt;/p&gt;
&lt;figure class=&#34;highlight gml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs gml&#34;&gt;machine.SPI(&lt;span class=&#34;hljs-symbol&#34;&gt;id&lt;/span&gt;)# 在给定的总线&lt;span class=&#34;hljs-symbol&#34;&gt;id&lt;/span&gt;上构造一个SPI对象。&lt;span class=&#34;hljs-symbol&#34;&gt;id&lt;/span&gt;的值取决于特定端口以及硬件&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;stm32&#34;&gt;&lt;a href=&#34;#stm32&#34; class=&#34;headerlink&#34; title=&#34;stm32&#34;&gt;&lt;/a&gt;stm32&lt;/h1&gt;&lt;h2 id=&#34;引脚&#34;&gt;&lt;a href=&#34;#引脚&#34; class=&#34;headerlink&#34; title=&#34;引脚&#34;&gt;&lt;/a&gt;引脚&lt;/h2&gt;&lt;p&gt;在cubemx中，浅黄色是不能修改定义的，深黄色也是默认的。&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;&lt;a href=&#34;#配置&#34; class=&#34;headerlink&#34; title=&#34;配置&#34;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;p&gt;引脚配置，在pinout_configuration中，如下图所示：&lt;br&gt;&lt;img src=&#34;/2023/07/10/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-10/GPIO_conf.png&#34; alt=&#34;引脚配置&#34;&gt;&lt;br&gt;可以配置其中每个引脚的功能，例如GPIO、SPI、I2C等等。&lt;/p&gt;
</content>
        <updated>2023-07-10T01:40:59.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/07/07/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-07/</id>
        <title>电赛培训-23-07-07</title>
        <link rel="alternate" href="http://example.com/2023/07/07/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-07/"/>
        <content type="html">&lt;h1 id=&#34;串口通信&#34;&gt;&lt;a href=&#34;#串口通信&#34; class=&#34;headerlink&#34; title=&#34;串口通信&#34;&gt;&lt;/a&gt;串口通信&lt;/h1&gt;&lt;h2 id=&#34;串行vs并行&#34;&gt;&lt;a href=&#34;#串行vs并行&#34; class=&#34;headerlink&#34; title=&#34;串行vs并行&#34;&gt;&lt;/a&gt;串行vs并行&lt;/h2&gt;&lt;p&gt;并行优点：快，效率高&lt;br&gt;缺点：需要端口多&lt;br&gt;串行优点：只需要一个端口&lt;br&gt;缺点：慢，效率低，且需要明确数据拍成一串的规则&lt;br&gt;（大端法vs小端法）&lt;/p&gt;
&lt;h2 id=&#34;通信&#34;&gt;&lt;a href=&#34;#通信&#34; class=&#34;headerlink&#34; title=&#34;通信&#34;&gt;&lt;/a&gt;通信&lt;/h2&gt;&lt;p&gt;串行通信每次只发送一个字节，对于字节内部发送bit的顺序，每个通讯协议都是相同的，但是字节的顺序却不一定相同，这就是大端法和小端法的区别。&lt;/p&gt;
&lt;h3 id=&#34;I2C通信&#34;&gt;&lt;a href=&#34;#I2C通信&#34; class=&#34;headerlink&#34; title=&#34;I2C通信&#34;&gt;&lt;/a&gt;I2C通信&lt;/h3&gt;&lt;p&gt;一个通信口可以和多个设备进行传输，只需要SDA和SCL两个数据线即可，SDA为数据线，SCL为时钟线，时钟线由主设备控制，主设备为发送方，从设备为接收方，从设备的地址由主设备指定，主设备发送数据时，从设备会返回一个ACK信号，表示接收成功，如果没有返回ACK信号，主设备会认为发送失败，重新发送。&lt;br&gt;但是，I2C驱动能力较弱，需要在数据线加上拉电阻，且所有设备必须有不同地址。&lt;/p&gt;
&lt;h3 id=&#34;SPI通信&#34;&gt;&lt;a href=&#34;#SPI通信&#34; class=&#34;headerlink&#34; title=&#34;SPI通信&#34;&gt;&lt;/a&gt;SPI通信&lt;/h3&gt;&lt;p&gt;不需要考虑地址为问题，可以一个Master带多个slave。&lt;br&gt;缺点：每多一个从机，就需要有一个IO口作为片选信号，且需要一个时钟信号，所以需要的IO口较多。&lt;/p&gt;
&lt;h3 id=&#34;UART通信&#34;&gt;&lt;a href=&#34;#UART通信&#34; class=&#34;headerlink&#34; title=&#34;UART通信&#34;&gt;&lt;/a&gt;UART通信&lt;/h3&gt;&lt;p&gt;接线非常简单，且双方对等，谁都可以随时发送信息。&lt;br&gt;缺点：容易接错，且难实现多个设备同时通信。而且功耗较大，所以很多传感器上不配备。&lt;br&gt;波特率：每个位对应时间长度的倒数&lt;br&gt;uart通信有起始位，数据位，校验位，停止位，所以每个字节需要10个bit，所以波特率为115200时，每秒可以传输11520个字节。&lt;/p&gt;
&lt;h4 id=&#34;电平标准&#34;&gt;&lt;a href=&#34;#电平标准&#34; class=&#34;headerlink&#34; title=&#34;电平标准&#34;&gt;&lt;/a&gt;电平标准&lt;/h4&gt;&lt;p&gt;usb标准：看D+和D-的电平差，差大是1，小是0&lt;br&gt;TTL电平：0v是低电平，5&amp;#x2F;3.3v是高电平&lt;br&gt;RS232电平：-3v&lt;del&gt;-15v是低电平，3v&lt;/del&gt;15v是高电平&lt;/p&gt;
&lt;h4 id=&#34;Arduino的uart&#34;&gt;&lt;a href=&#34;#Arduino的uart&#34; class=&#34;headerlink&#34; title=&#34;Arduino的uart&#34;&gt;&lt;/a&gt;Arduino的uart&lt;/h4&gt;&lt;p&gt;ttl电平5v&lt;br&gt;1为tx&lt;br&gt;0为rx&lt;br&gt;内部已通过ch340g串口转usb，与usb相连，arduino用uart串口发送信息时，会通过ch340g转换为usb信号，所以可以通过usb接收信息。&lt;br&gt;函数：&lt;/p&gt;
&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs reasonml&#34;&gt;&lt;span class=&#34;hljs-module-access&#34;&gt;&lt;span class=&#34;hljs-module&#34;&gt;&lt;span class=&#34;hljs-identifier&#34;&gt;Serial&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;begin&lt;/span&gt;(baudrate)：设置波特率&lt;br&gt;&lt;span class=&#34;hljs-module-access&#34;&gt;&lt;span class=&#34;hljs-module&#34;&gt;&lt;span class=&#34;hljs-identifier&#34;&gt;Serianl&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;print(content,选项)：发送信息,可以是数字，字符串，数组，对象，选项可以是DEC，BIN，OCT，HEX，BYTE，WORD，FLOAT，STRING，可以指定发送的进制，或者发送字符串。&lt;br&gt;&lt;span class=&#34;hljs-module-access&#34;&gt;&lt;span class=&#34;hljs-module&#34;&gt;&lt;span class=&#34;hljs-identifier&#34;&gt;Serial&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;println(content,选项)：发送信息，与print不同的是，会在最后加上换行符。&lt;br&gt;&lt;span class=&#34;hljs-module-access&#34;&gt;&lt;span class=&#34;hljs-module&#34;&gt;&lt;span class=&#34;hljs-identifier&#34;&gt;Serial&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;available&lt;span class=&#34;hljs-literal&#34;&gt;()&lt;/span&gt;：返回接收缓冲区中的字节数&lt;br&gt;&lt;span class=&#34;hljs-module-access&#34;&gt;&lt;span class=&#34;hljs-module&#34;&gt;&lt;span class=&#34;hljs-identifier&#34;&gt;Serial&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;read&lt;span class=&#34;hljs-constructor&#34;&gt;Bytes(&lt;span class=&#34;hljs-params&#34;&gt;char&lt;/span&gt;类型数组名，最大读取长度)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-module-access&#34;&gt;&lt;span class=&#34;hljs-module&#34;&gt;&lt;span class=&#34;hljs-identifier&#34;&gt;Serial&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;write(&lt;span class=&#34;hljs-built_in&#34;&gt;char&lt;/span&gt;类型数组名，写入长度)：总共能发送数据长度个字节。按照数组中每个原始值诸葛发送，可以借助这个功能，对&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt;结构体中相关数据作为一个整体，将结构体指针强制转型为byte*类型，后面数据长度用sizeof(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt;),这样就可以将结构体作为一个整体发送。&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;Arduino的uart工具&#34;&gt;&lt;a href=&#34;#Arduino的uart工具&#34; class=&#34;headerlink&#34; title=&#34;Arduino的uart工具&#34;&gt;&lt;/a&gt;Arduino的uart工具&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;串口绘图仪：可以发送数据时利用数据名：数据的格式，将以时间为横轴，数值为纵轴，根据格式中构成的变量数量，以不同颜色的线段，随时间变化的情况进行绘图。&lt;/li&gt;
&lt;li&gt;BYSerial&lt;br&gt;串口不能同时被多个程序打开。&lt;h2 id=&#34;网络&#34;&gt;&lt;a href=&#34;#网络&#34; class=&#34;headerlink&#34; title=&#34;网络&#34;&gt;&lt;/a&gt;网络&lt;/h2&gt;基本概念：&lt;/li&gt;
&lt;li&gt;TCP&amp;#x2F;IP协议：定义了设备如何连接如互联网&lt;/li&gt;
&lt;li&gt;TCP：信息必须齐全的网络通信的基础&lt;/li&gt;
&lt;li&gt;UDP：信息可以缺少或者需要广播的网络通信的基础&lt;/li&gt;
&lt;li&gt;IP：计算机之间用于识别身份的临时位置编号&lt;/li&gt;
&lt;li&gt;ICMP：网络控制信号协议&lt;/li&gt;
&lt;li&gt;DHCP：动态分配ip地址协议&lt;/li&gt;
&lt;li&gt;一个能连接互联网的网课出厂自带的编号。&lt;h3 id=&#34;ipv4&#34;&gt;&lt;a href=&#34;#ipv4&#34; class=&#34;headerlink&#34; title=&#34;ipv4&#34;&gt;&lt;/a&gt;ipv4&lt;/h3&gt;ipv4定义了32位二进制地址&lt;br&gt;同时，ipv4定义了一些只会用于内部网络的地址编号，称为私网ip段，剩下的都是用于全球公网ip。&lt;br&gt;例如&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10.0.0.0-10.255.255.255&lt;br&gt;172.16.0.0-172.31.255.255&lt;br&gt;192.168.0.0-192.168.255.255&lt;/p&gt;
&lt;h3 id=&#34;ipv6&#34;&gt;&lt;a href=&#34;#ipv6&#34; class=&#34;headerlink&#34; title=&#34;ipv6&#34;&gt;&lt;/a&gt;ipv6&lt;/h3&gt;&lt;p&gt;ipv6定义了128位二进制地址&lt;/p&gt;
&lt;h3 id=&#34;子网掩码&#34;&gt;&lt;a href=&#34;#子网掩码&#34; class=&#34;headerlink&#34; title=&#34;子网掩码&#34;&gt;&lt;/a&gt;子网掩码&lt;/h3&gt;&lt;p&gt;子网掩码用于判断ip地址的前几位是网络号，后几位是主机号。&lt;br&gt;32个二进制位表示ip地址截止到哪里，只要相同就认为在同一个子网内，可以直接通信无需交给网关做转发。要求必须1卡头，连续多个1，剩下的是0。255.255.255.0对于这个设备，前面三个点分十进制数相同，那就认为是在同一个网络下，因此会直接连接而不会寻求网关。&lt;/p&gt;
&lt;h3 id=&#34;tcp协议&#34;&gt;&lt;a href=&#34;#tcp协议&#34; class=&#34;headerlink&#34; title=&#34;tcp协议&#34;&gt;&lt;/a&gt;tcp协议&lt;/h3&gt;&lt;p&gt;传输控制协议，是面向连接的，可靠的，基于字节流的传输层通信协议，一个tcp连接需要有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在一个网络色悲伤，特定的网络端口如8080（最好大于1023）上开创一个tcp server，这个过程叫做绑定端口，并开始监听端口。&lt;/li&gt;
&lt;li&gt;得到该网络设备的ip地址，因此需要体现获得server的ipv4地址，以及开启tcp监听端口。&lt;h3 id=&#34;udp协议&#34;&gt;&lt;a href=&#34;#udp协议&#34; class=&#34;headerlink&#34; title=&#34;udp协议&#34;&gt;&lt;/a&gt;udp协议&lt;/h3&gt;无连接的传输协议，成为用户数据报协议&lt;br&gt;udp提供了一个无需链接就能发送封装的ip数据包的方法，建立一套tcp连接需要有：&lt;/li&gt;
&lt;li&gt;在一个网络设备上，特定的网络端口如8080（最好大于1023）上开创一个udp socket&lt;/li&gt;
&lt;li&gt;设定好目的地IP地址和端口便可以随心所欲发送数据&lt;/li&gt;
&lt;li&gt;目的地ip地址对应网络设备B，如果尝试在自己9090端口上开创一个udp socket，且A正好在发送信息，那么此时就能受到A发送的信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;wifi连接&#34;&gt;&lt;a href=&#34;#wifi连接&#34; class=&#34;headerlink&#34; title=&#34;wifi连接&#34;&gt;&lt;/a&gt;wifi连接&lt;/h2&gt;&lt;h3 id=&#34;station终端&#34;&gt;&lt;a href=&#34;#station终端&#34; class=&#34;headerlink&#34; title=&#34;station终端&#34;&gt;&lt;/a&gt;station终端&lt;/h3&gt;&lt;p&gt;新建station&lt;/p&gt;
&lt;figure class=&#34;highlight pgsql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs pgsql&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; network&lt;br&gt;wlan - network.WLAN(network.STA.&lt;span class=&#34;hljs-keyword&#34;&gt;IF&lt;/span&gt;)# &lt;span class=&#34;hljs-keyword&#34;&gt;create&lt;/span&gt; station&lt;br&gt;wlan.active(&lt;span class=&#34;hljs-keyword&#34;&gt;True&lt;/span&gt;)&lt;br&gt;wlan.scan() #scan &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; acess points(AP)&lt;br&gt;wlan.isconnected() #&lt;span class=&#34;hljs-keyword&#34;&gt;check&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; the station &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; connected &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; an AP&lt;br&gt;&lt;br&gt;wlan.&lt;span class=&#34;hljs-keyword&#34;&gt;connect&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;ssid&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;key&amp;#x27;&lt;/span&gt;) #&lt;span class=&#34;hljs-keyword&#34;&gt;connect&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; an AP&lt;br&gt;wlan.config(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;mac&amp;#x27;&lt;/span&gt;) #&lt;span class=&#34;hljs-keyword&#34;&gt;get&lt;/span&gt; the interfac&lt;span class=&#34;hljs-string&#34;&gt;e&amp;#x27;s MAC address&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;wlan.ifconfig() #get the interface&amp;#x27;&lt;/span&gt;s IP/netmask/gw/DNS addresses&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;新建AP&lt;/p&gt;
&lt;figure class=&#34;highlight pgsql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs pgsql&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; network&lt;br&gt;ap = network.WLAN(network.AP_IF) # &lt;span class=&#34;hljs-keyword&#34;&gt;create&lt;/span&gt; acess &lt;span class=&#34;hljs-type&#34;&gt;point&lt;/span&gt; interface&lt;br&gt;ap.config(ssid=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;ESP-AP&amp;#x27;&lt;/span&gt;) #&lt;span class=&#34;hljs-keyword&#34;&gt;set&lt;/span&gt; the SSID &lt;span class=&#34;hljs-keyword&#34;&gt;of&lt;/span&gt; the &lt;span class=&#34;hljs-keyword&#34;&gt;access&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;point&lt;/span&gt;&lt;br&gt;ap.config(max_clients=&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;) #&lt;span class=&#34;hljs-keyword&#34;&gt;set&lt;/span&gt; how many clients can &lt;span class=&#34;hljs-keyword&#34;&gt;connect&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; the &lt;span class=&#34;hljs-keyword&#34;&gt;access&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;point&lt;/span&gt;&lt;br&gt;ap.active(&lt;span class=&#34;hljs-keyword&#34;&gt;True&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;tcp通讯：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;连接wifi&lt;/li&gt;
&lt;li&gt;获取本地ip&lt;/li&gt;
&lt;li&gt;创建tcp&lt;/li&gt;
&lt;li&gt;绑定本地ip和端口&lt;/li&gt;
&lt;li&gt;设定最大连接数&lt;/li&gt;
&lt;li&gt;配置tcp选项&lt;/li&gt;
&lt;li&gt;用户进入获取用户组&lt;/li&gt;
&lt;li&gt;读取用户信息，&lt;/li&gt;
&lt;li&gt;发送接收到的数据给发送者&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;udp通讯：server&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建socket对象要设置udp模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;udp通信：client&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;判断wifi连接&lt;/li&gt;
&lt;li&gt;发送使用sendto函数&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2023-07-07T01:34:49.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/07/06/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-06/</id>
        <title>电赛培训-23-07-06</title>
        <link rel="alternate" href="http://example.com/2023/07/06/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-06/"/>
        <content type="html">&lt;h1 id=&#34;ESP32&#34;&gt;&lt;a href=&#34;#ESP32&#34; class=&#34;headerlink&#34; title=&#34;ESP32&#34;&gt;&lt;/a&gt;ESP32&lt;/h1&gt;&lt;h2 id=&#34;中断&#34;&gt;&lt;a href=&#34;#中断&#34; class=&#34;headerlink&#34; title=&#34;中断&#34;&gt;&lt;/a&gt;中断&lt;/h2&gt;&lt;p&gt;中断处理程序不要运行时间过长，不要分配内存&lt;/p&gt;
&lt;h3 id=&#34;紧急异常缓冲区&#34;&gt;&lt;a href=&#34;#紧急异常缓冲区&#34; class=&#34;headerlink&#34; title=&#34;紧急异常缓冲区&#34;&gt;&lt;/a&gt;紧急异常缓冲区&lt;/h3&gt;&lt;p&gt;如果ISR中发生错误，MicroPython无法生成错误报告&lt;br&gt;除非创建特殊缓冲区&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs elm&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; micropython&lt;br&gt;&lt;span class=&#34;hljs-title&#34;&gt;micropython&lt;/span&gt;.alloc_emergency_exception_buf(&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;UART&#34;&gt;&lt;a href=&#34;#UART&#34; class=&#34;headerlink&#34; title=&#34;UART&#34;&gt;&lt;/a&gt;UART&lt;/h2&gt;&lt;p&gt;esp32有三个硬件UART，分别是UART0，UART1，UART2&lt;br&gt;各自分配了默认GPIO&lt;br&gt;TX：当前设备的发送&lt;br&gt;RX：当前设备的接收&lt;br&gt;串口中不分主从&lt;/p&gt;
&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs apache&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;from&lt;/span&gt; machine import UART&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;uart1&lt;/span&gt; = (&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,baudrate=&lt;span class=&#34;hljs-number&#34;&gt;9600&lt;/span&gt;,tx=&lt;span class=&#34;hljs-number&#34;&gt;33&lt;/span&gt;,rx=&lt;span class=&#34;hljs-number&#34;&gt;32&lt;/span&gt;)#指定了id&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;任何GPIO都可以用于使用GPIO矩阵的硬件UART，除了可以用作rx的仅输入引脚34-39&lt;br&gt;发送与接受的波特率一样&lt;/p&gt;
&lt;p&gt;一种调试方法：不能使用调试器时，可以利用串口输出进行调试。&lt;/p&gt;
&lt;h2 id=&#34;ADC&#34;&gt;&lt;a href=&#34;#ADC&#34; class=&#34;headerlink&#34; title=&#34;ADC&#34;&gt;&lt;/a&gt;ADC&lt;/h2&gt;&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs reasonml&#34;&gt;from machine import ADC&lt;br&gt;adc = &lt;span class=&#34;hljs-constructor&#34;&gt;ADC(&lt;span class=&#34;hljs-params&#34;&gt;pin&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;val&lt;/span&gt; = adc.read&lt;span class=&#34;hljs-constructor&#34;&gt;_u16()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;val&lt;/span&gt; = adc.read&lt;span class=&#34;hljs-constructor&#34;&gt;_uv()&lt;/span&gt;# &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; microvolts&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;ADC2也被wifi使用，所以开启wifi时会发生adc2异常&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;定时器&#34;&gt;&lt;a href=&#34;#定时器&#34; class=&#34;headerlink&#34; title=&#34;定时器&#34;&gt;&lt;/a&gt;定时器&lt;/h2&gt;&lt;p&gt;Timer.init(*,mode&amp;#x3D;Timer.PERIODIC,period&amp;#x3D;-1,callback&amp;#x3D;None)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mode 可以是ONE_SHOT或PERIODIC（单次或周期计时）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;PWM&#34;&gt;&lt;a href=&#34;#PWM&#34; class=&#34;headerlink&#34; title=&#34;PWM&#34;&gt;&lt;/a&gt;PWM&lt;/h2&gt;</content>
        <updated>2023-07-06T01:48:40.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/07/05/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-05/</id>
        <title>电赛培训-23-07-05</title>
        <link rel="alternate" href="http://example.com/2023/07/05/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-05/"/>
        <content type="html">&lt;h1 id=&#34;Arduino&#34;&gt;&lt;a href=&#34;#Arduino&#34; class=&#34;headerlink&#34; title=&#34;Arduino&#34;&gt;&lt;/a&gt;Arduino&lt;/h1&gt;&lt;p&gt;软件：使用Arduino IDE，以C++风格语言编写相关库。&lt;br&gt;利用IDE编译固件下载到Arduino的前提条件是有bootloader程序。&lt;br&gt;所以从程序到固件的关键在于bootloader，其他单片机也可以装载bootloader固件，然后使用arduino库。&lt;/p&gt;
&lt;h2 id=&#34;硬件-uno板&#34;&gt;&lt;a href=&#34;#硬件-uno板&#34; class=&#34;headerlink&#34; title=&#34;硬件 uno板&#34;&gt;&lt;/a&gt;硬件 uno板&lt;/h2&gt;&lt;p&gt;工作电压5v,可以typeB，DC5.5，或者跳线接入&lt;br&gt;共有14个数字输入输出（6个PWM口），6个模拟输入输出&lt;/p&gt;
&lt;h2 id=&#34;系统指示灯&#34;&gt;&lt;a href=&#34;#系统指示灯&#34; class=&#34;headerlink&#34; title=&#34;系统指示灯&#34;&gt;&lt;/a&gt;系统指示灯&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ON：系统指示灯&lt;/li&gt;
&lt;li&gt;RX：接收指示灯&lt;/li&gt;
&lt;li&gt;TX：发送指示灯&lt;/li&gt;
&lt;li&gt;L：内置LED，对应13号数字口&lt;h2 id=&#34;开始编写代码&#34;&gt;&lt;a href=&#34;#开始编写代码&#34; class=&#34;headerlink&#34; title=&#34;开始编写代码&#34;&gt;&lt;/a&gt;开始编写代码&lt;/h2&gt;有两个一定会有的函数，void setup()和void loop()，分别是初始化和循环函数。&lt;br&gt;setup会执行一次，loop在setup后会自动循环&lt;h3 id=&#34;setup函数&#34;&gt;&lt;a href=&#34;#setup函数&#34; class=&#34;headerlink&#34; title=&#34;setup函数&#34;&gt;&lt;/a&gt;setup函数&lt;/h3&gt;setup中用pinMode配置管脚模式为输出&lt;br&gt;pinMode(pin编号，INPUT)：高阻态，可认为是100m欧姆，电平不定。&lt;br&gt;pinMode(pinnum,INPUT_PULLUP):内置上拉输入，无外部信号默认高电平。&lt;br&gt;pinMode(pinnum,OUTPUT):输出模式，uno上高电平5v，电流&amp;lt;40mA&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;loop函数&#34;&gt;&lt;a href=&#34;#loop函数&#34; class=&#34;headerlink&#34; title=&#34;loop函数&#34;&gt;&lt;/a&gt;loop函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;digitalWrite(pinnum,HIGH&amp;#x2F;LOW):输出高低电平，只对output模式有效&lt;/li&gt;
&lt;li&gt;digitalRead(pinnum):读取高低电平,返回HIGH&amp;#x2F;LOW两种电平&lt;/li&gt;
&lt;li&gt;analogRead(anaPinNum)：读取模拟输入电平，返回0-1023的数字，对应0-5v的电压&lt;/li&gt;
&lt;li&gt;analogWrite(pwmPinNum,0-255)：输出PWM波，对应0-5v的电压，频率为490Hz(3,9,10,11pin),或980Hz(5,6pin)&lt;/li&gt;
&lt;li&gt;analogReference(AD参考电压输入来源)：切换AD参考电压输入来源，有默认值，一般不用，可以让输出更加精细。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;中断和轮询&#34;&gt;&lt;a href=&#34;#中断和轮询&#34; class=&#34;headerlink&#34; title=&#34;中断和轮询&#34;&gt;&lt;/a&gt;中断和轮询&lt;/h3&gt;&lt;p&gt;轮询：不断重复读取某个状态值，缺点是占用资源&lt;br&gt;中断：可以通过某个状态改变来发送信号，然后发送信号后可以执行其他操作，之后再恢复到发送信号之前的状态。&lt;br&gt;管脚中断：attachInterrupt(digitalPinToInterrupt(pinnum),ISR,mode),第一个参数是中断管脚号（uno为2，3），第二个参数是中断服务函数（可以自定义），第三个参数是中断模式，有LOW，RISING，FALLING，CHANGE四种模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LOW：低电平触发&lt;/li&gt;
&lt;li&gt;RISING：上升沿触发&lt;/li&gt;
&lt;li&gt;FALLING：下降沿触发&lt;/li&gt;
&lt;li&gt;CHANGE：任意电平变化触发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意，终端服务函数应当很短，而且不能使用其他中断实现的函数，延时需要delayMicroseconds(us)&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;修改全局变量应当用volatile修饰，防止编译器优化&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;ESP32&#34;&gt;&lt;a href=&#34;#ESP32&#34; class=&#34;headerlink&#34; title=&#34;ESP32&#34;&gt;&lt;/a&gt;ESP32&lt;/h1&gt;&lt;h2 id=&#34;硬件&#34;&gt;&lt;a href=&#34;#硬件&#34; class=&#34;headerlink&#34; title=&#34;硬件&#34;&gt;&lt;/a&gt;硬件&lt;/h2&gt;&lt;p&gt;esp32-WROOM-32&lt;br&gt;串口芯片：CP2102&lt;br&gt;核心频率240mHz&lt;br&gt;WiFi IEEE 802.11 b&amp;#x2F;g&amp;#x2F;n 2.4GHz&lt;br&gt;BLuetooth 4.2 BR&amp;#x2F;EDR and BLE&lt;br&gt;520k SRAM 448kB ROM&lt;br&gt;2个I2S，RMT远程控制，LED PWM，1个host SD&amp;#x2F;eMMC&amp;#x2F;SDIO，一个slave SDIO&amp;#x2F;SPI. TWAI(CAN),12bitADC,Ethernet&lt;/p&gt;
&lt;h2 id=&#34;开发环境&#34;&gt;&lt;a href=&#34;#开发环境&#34; class=&#34;headerlink&#34; title=&#34;开发环境&#34;&gt;&lt;/a&gt;开发环境&lt;/h2&gt;&lt;p&gt;MicroPython+Thonny&lt;/p&gt;
&lt;h3 id=&#34;常用库&#34;&gt;&lt;a href=&#34;#常用库&#34; class=&#34;headerlink&#34; title=&#34;常用库&#34;&gt;&lt;/a&gt;常用库&lt;/h3&gt;&lt;h3 id=&#34;GPIO&#34;&gt;&lt;a href=&#34;#GPIO&#34; class=&#34;headerlink&#34; title=&#34;GPIO&#34;&gt;&lt;/a&gt;GPIO&lt;/h3&gt;&lt;figure class=&#34;highlight pgsql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs pgsql&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; machine &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; Pin&lt;br&gt;&lt;br&gt;p0 = Pin(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,Pin.&lt;span class=&#34;hljs-keyword&#34;&gt;OUT&lt;/span&gt;) # &lt;span class=&#34;hljs-keyword&#34;&gt;create&lt;/span&gt; output pin &lt;span class=&#34;hljs-keyword&#34;&gt;on&lt;/span&gt; GPIO0&lt;br&gt;p0.&lt;span class=&#34;hljs-keyword&#34;&gt;on&lt;/span&gt;() # &lt;span class=&#34;hljs-keyword&#34;&gt;set&lt;/span&gt; pin &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; &amp;quot;on&amp;quot; (high) &lt;span class=&#34;hljs-keyword&#34;&gt;level&lt;/span&gt;&lt;br&gt;p0.&lt;span class=&#34;hljs-keyword&#34;&gt;off&lt;/span&gt;() # &lt;span class=&#34;hljs-keyword&#34;&gt;set&lt;/span&gt; pin &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; &amp;quot;off&amp;quot; (low) &lt;span class=&#34;hljs-keyword&#34;&gt;level&lt;/span&gt;&lt;br&gt;p0.&lt;span class=&#34;hljs-keyword&#34;&gt;value&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) # &lt;span class=&#34;hljs-keyword&#34;&gt;set&lt;/span&gt; pin &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;on&lt;/span&gt;/high&lt;br&gt;p0.init(p0.&lt;span class=&#34;hljs-keyword&#34;&gt;IN&lt;/span&gt;,p0.PULL_DOWN) # &lt;span class=&#34;hljs-keyword&#34;&gt;set&lt;/span&gt; pin &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;with&lt;/span&gt; a pull-down resistor&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;init函数中，id是强制的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mode指定引脚模式，有IN，OUT，OPEN_DRAIN，AF_OPEN_DRAIN四种模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pull指定引脚是否连接弱上拉电阻，有None，PULL_UP，PULL_DOWN三种模式&lt;br&gt;弱上拉指上拉电阻阻值较大，高电平很容易因为外部电流驱动而拉低。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;drive具有不同的最大安全电流的限制，有DRIVE_0-3四种选择&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;alt为引脚的备用功能，仅对alt和alt_open_drain两种模式有效，有0-7八种选择&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;value函数中，如果不带参数，就是得到当前状态，如果在输出模式，需要带参数，变为设置电平&lt;/p&gt;
&lt;p&gt;配置在引脚的触发源处于活动状态时要调用中断处理程序，如果引脚模式为Pin.IN，可以使用irq函数，如果引脚模式为Pin.IN，可以使用Pin.IRQ_RISING，Pin.IRQ_FALLING，Pin.IRQ_ANY三种模式，分别对应上升沿，下降沿，任意电平变化触发中断。&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="电赛" />
        <updated>2023-07-05T01:46:48.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/05/29/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3WSL-Ubuntu%E6%89%BE%E4%B8%8D%E5%88%B0sys-time-h%E7%9A%84%E9%97%AE%E9%A2%98/</id>
        <title>关于解决WSL_Ubuntu找不到sys/time.h的问题</title>
        <link rel="alternate" href="http://example.com/2023/05/29/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3WSL-Ubuntu%E6%89%BE%E4%B8%8D%E5%88%B0sys-time-h%E7%9A%84%E9%97%AE%E9%A2%98/"/>
        <content type="html">&lt;h1 id=&#34;问题描述&#34;&gt;&lt;a href=&#34;#问题描述&#34; class=&#34;headerlink&#34; title=&#34;问题描述&#34;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;在使用WSL_Ubuntu的时候，编译C代码时，出现了找不到sys&amp;#x2F;time.h的问题&lt;/p&gt;
&lt;h1 id=&#34;解决方法&#34;&gt;&lt;a href=&#34;#解决方法&#34; class=&#34;headerlink&#34; title=&#34;解决方法&#34;&gt;&lt;/a&gt;解决方法&lt;/h1&gt;&lt;h2 id=&#34;第一次失败&#34;&gt;&lt;a href=&#34;#第一次失败&#34; class=&#34;headerlink&#34; title=&#34;第一次失败&#34;&gt;&lt;/a&gt;第一次失败&lt;/h2&gt;&lt;p&gt;网上的一个直接解决方案是安装libc6-dev-amd64&lt;br&gt;但是问题又一次出现，当输入指令&lt;br&gt;&lt;code&gt;sudo apt-get install libc6-dev-amd64&lt;/code&gt;&lt;br&gt;发生报错 unable to locate package&lt;/p&gt;
&lt;h2 id=&#34;第二次失败&#34;&gt;&lt;a href=&#34;#第二次失败&#34; class=&#34;headerlink&#34; title=&#34;第二次失败&#34;&gt;&lt;/a&gt;第二次失败&lt;/h2&gt;&lt;p&gt;于是转而解决无法定位包的问题，根据查找发现需要在&amp;#x2F;etc&amp;#x2F;apt&amp;#x2F;sources.list中添加源,添加了清华源、阿里源后输入&lt;br&gt;&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;br&gt;更新完成后再次尝试安装libc6-dev-amd64，但是问题依旧存在&lt;/p&gt;
&lt;h2 id=&#34;第三次解决&#34;&gt;&lt;a href=&#34;#第三次解决&#34; class=&#34;headerlink&#34; title=&#34;第三次解决&#34;&gt;&lt;/a&gt;第三次解决&lt;/h2&gt;&lt;p&gt;这次发现libc6-dev-amd64是一个需要在i386架构下安装的包，于是尝试添加i386架构，运行指令&lt;br&gt;&lt;code&gt;dpkg --add-architecture i386&lt;/code&gt;&lt;br&gt;添加成功后再次输入&lt;br&gt;&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;br&gt;更新完成后再次尝试安装libc6-dev-amd64，问题解决&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="WSL" />
        <category term="Linux" />
        <category term="编译" />
        <updated>2023-05-29T07:24:24.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/05/14/%E7%94%B5%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/</id>
        <title>电赛学习笔记-机器视觉</title>
        <link rel="alternate" href="http://example.com/2023/05/14/%E7%94%B5%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
        <content type="html">&lt;h1 id=&#34;开发环境&#34;&gt;&lt;a href=&#34;#开发环境&#34; class=&#34;headerlink&#34; title=&#34;开发环境&#34;&gt;&lt;/a&gt;开发环境&lt;/h1&gt;&lt;h2 id=&#34;安装opencv&#34;&gt;&lt;a href=&#34;#安装opencv&#34; class=&#34;headerlink&#34; title=&#34;安装opencv&#34;&gt;&lt;/a&gt;安装opencv&lt;/h2&gt;&lt;h2 id=&#34;开发板：STM32F407&#34;&gt;&lt;a href=&#34;#开发板：STM32F407&#34; class=&#34;headerlink&#34; title=&#34;开发板：STM32F407&#34;&gt;&lt;/a&gt;开发板：STM32F407&lt;/h2&gt;&lt;h2 id=&#34;IDE：STM32CubeIDE&#34;&gt;&lt;a href=&#34;#IDE：STM32CubeIDE&#34; class=&#34;headerlink&#34; title=&#34;IDE：STM32CubeIDE&#34;&gt;&lt;/a&gt;IDE：STM32CubeIDE&lt;/h2&gt;&lt;h2 id=&#34;配置过程&#34;&gt;&lt;a href=&#34;#配置过程&#34; class=&#34;headerlink&#34; title=&#34;配置过程&#34;&gt;&lt;/a&gt;配置过程&lt;/h2&gt;&lt;p&gt;配置工程ioc文件，配置好基础外设后，再packs中安装X-CUBE-AI组件包，在软件包外设中添加模型文件，设置压缩倍数，导入测试集验证准确率&lt;/p&gt;
&lt;h2 id=&#34;模型&#34;&gt;&lt;a href=&#34;#模型&#34; class=&#34;headerlink&#34; title=&#34;模型&#34;&gt;&lt;/a&gt;模型&lt;/h2&gt;&lt;h3 id=&#34;yolo&#34;&gt;&lt;a href=&#34;#yolo&#34; class=&#34;headerlink&#34; title=&#34;yolo&#34;&gt;&lt;/a&gt;yolo&lt;/h3&gt;&lt;p&gt;利用mobilenet yolo50k模型可以导入到单片机中，只需要较少内存即可实现实时运行，实现人脸识别的功能&lt;/p&gt;
&lt;h3 id=&#34;openmv&#34;&gt;&lt;a href=&#34;#openmv&#34; class=&#34;headerlink&#34; title=&#34;openmv&#34;&gt;&lt;/a&gt;openmv&lt;/h3&gt;&lt;h2 id=&#34;硬件&#34;&gt;&lt;a href=&#34;#硬件&#34; class=&#34;headerlink&#34; title=&#34;硬件&#34;&gt;&lt;/a&gt;硬件&lt;/h2&gt;&lt;p&gt;正点原子ov7725摄像头&lt;br&gt;yolo50k&lt;/p&gt;
&lt;h1 id=&#34;相关资料&#34;&gt;&lt;a href=&#34;#相关资料&#34; class=&#34;headerlink&#34; title=&#34;相关资料&#34;&gt;&lt;/a&gt;相关资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Bt411w77m/?share_source=copy_web&amp;vd_source=4ed5c2c0429d7681216f506ac1e74065&#34;&gt;稚晖君&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/dog-qiuqiu/MobileNet-Yolo&#34;&gt;yolo50k仓库&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1FL411u72p/?share_source=copy_web&amp;vd_source=4ed5c2c0429d7681216f506ac1e74065&#34;&gt;实时运行案例&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="电赛" />
        <updated>2023-05-14T09:04:31.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/05/14/%E7%94%B5%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-micropython/</id>
        <title>电赛学习笔记-micropython</title>
        <link rel="alternate" href="http://example.com/2023/05/14/%E7%94%B5%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-micropython/"/>
        <content type="html">&lt;h1 id=&#34;micropython简介&#34;&gt;&lt;a href=&#34;#micropython简介&#34; class=&#34;headerlink&#34; title=&#34;micropython简介&#34;&gt;&lt;/a&gt;micropython简介&lt;/h1&gt;&lt;p&gt;micropython是一个能够利用python进行单片机开发的固件，目前主要是在esp32平台上进行的开发&lt;/p&gt;
&lt;h1 id=&#34;micropython安装&#34;&gt;&lt;a href=&#34;#micropython安装&#34; class=&#34;headerlink&#34; title=&#34;micropython安装&#34;&gt;&lt;/a&gt;micropython安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在micropython官网找到对应的单片机的型号的固件文件（.bin），下载到对应位置&lt;/li&gt;
&lt;li&gt;pip install esptool&lt;/li&gt;
&lt;li&gt;连接esp32单片机，查看端口号&lt;/li&gt;
&lt;li&gt;根据micropython官网的指示，利用esptool.py文件，清除单片机flash，再部署固件到单片机。&lt;/li&gt;
&lt;li&gt;安装uPyCraft IDE，选择好开发板类型和端口号后，&lt;h1 id=&#34;micropython使用&#34;&gt;&lt;a href=&#34;#micropython使用&#34; class=&#34;headerlink&#34; title=&#34;micropython使用&#34;&gt;&lt;/a&gt;micropython使用&lt;/h1&gt;需要根据单片机自带的库函数，进行python文档的开发&lt;h1 id=&#34;micropython的优点&#34;&gt;&lt;a href=&#34;#micropython的优点&#34; class=&#34;headerlink&#34; title=&#34;micropython的优点&#34;&gt;&lt;/a&gt;micropython的优点&lt;/h1&gt;代码量少，配置简单&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="电赛" />
        <updated>2023-05-14T08:47:54.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/05/11/%E7%94%B5%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</id>
        <title>电赛学习笔记（1）——stm32学习笔记</title>
        <link rel="alternate" href="http://example.com/2023/05/11/%E7%94%B5%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
        <content type="html">&lt;h1 id=&#34;stm32基础&#34;&gt;&lt;a href=&#34;#stm32基础&#34; class=&#34;headerlink&#34; title=&#34;stm32基础&#34;&gt;&lt;/a&gt;stm32基础&lt;/h1&gt;&lt;h2 id=&#34;关于stm32产品线&#34;&gt;&lt;a href=&#34;#关于stm32产品线&#34; class=&#34;headerlink&#34; title=&#34;关于stm32产品线&#34;&gt;&lt;/a&gt;关于stm32产品线&lt;/h2&gt;&lt;h3 id=&#34;stm32f1系列-cortex-m3&#34;&gt;&lt;a href=&#34;#stm32f1系列-cortex-m3&#34; class=&#34;headerlink&#34; title=&#34;stm32f1系列 cortex-m3&#34;&gt;&lt;/a&gt;stm32f1系列 cortex-m3&lt;/h3&gt;&lt;h3 id=&#34;stm32f4系列-cortex-m4&#34;&gt;&lt;a href=&#34;#stm32f4系列-cortex-m4&#34; class=&#34;headerlink&#34; title=&#34;stm32f4系列 cortex-m4&#34;&gt;&lt;/a&gt;stm32f4系列 cortex-m4&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;内置了rgb lcd驱动&lt;/li&gt;
&lt;li&gt;加入了DSP与FPU模块&lt;h3 id=&#34;stm32f7系列-cortex-m7&#34;&gt;&lt;a href=&#34;#stm32f7系列-cortex-m7&#34; class=&#34;headerlink&#34; title=&#34;stm32f7系列 cortex-m7&#34;&gt;&lt;/a&gt;stm32f7系列 cortex-m7&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;高速内存得到应用 &lt;h2 id=&#34;寄存器编程&#34;&gt;&lt;a href=&#34;#寄存器编程&#34; class=&#34;headerlink&#34; title=&#34;寄存器编程&#34;&gt;&lt;/a&gt;寄存器编程&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;关键字volatile&lt;/strong&gt;需要在声明寄存器变量的时候添加，因为要防止编译器自行优化。&lt;/p&gt;
&lt;h2 id=&#34;HAL库&#34;&gt;&lt;a href=&#34;#HAL库&#34; class=&#34;headerlink&#34; title=&#34;HAL库&#34;&gt;&lt;/a&gt;HAL库&lt;/h2&gt;&lt;p&gt;硬件抽象层，可以将不同产品线的芯片的寄存器操作抽象为函数，方便移植&lt;br&gt;&lt;strong&gt;&lt;font color=&#34;red&#34;&gt;本笔记使用HAL库进行编程&lt;/font&gt;&lt;/strong&gt;&lt;br&gt;相对的，HAL库会产生大量的判断来降低代码运行效率&lt;br&gt;但是，还有另一个Low Layer库（LL），这个库可以提高效率&lt;/p&gt;
&lt;h2 id=&#34;stm32cubeMX配置&#34;&gt;&lt;a href=&#34;#stm32cubeMX配置&#34; class=&#34;headerlink&#34; title=&#34;stm32cubeMX配置&#34;&gt;&lt;/a&gt;stm32cubeMX配置&lt;/h2&gt;&lt;h2 id=&#34;stm32计时器&#34;&gt;&lt;a href=&#34;#stm32计时器&#34; class=&#34;headerlink&#34; title=&#34;stm32计时器&#34;&gt;&lt;/a&gt;stm32计时器&lt;/h2&gt;&lt;h3 id=&#34;PWM调制输出&#34;&gt;&lt;a href=&#34;#PWM调制输出&#34; class=&#34;headerlink&#34; title=&#34;PWM调制输出&#34;&gt;&lt;/a&gt;PWM调制输出&lt;/h3&gt;&lt;h4 id=&#34;几个重要参数&#34;&gt;&lt;a href=&#34;#几个重要参数&#34; class=&#34;headerlink&#34; title=&#34;几个重要参数&#34;&gt;&lt;/a&gt;几个重要参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;占空比：高电平占整个周期的比例&lt;/li&gt;
&lt;li&gt;频率：整个PWM周期的倒数&lt;/li&gt;
&lt;li&gt;分辨率：占空比变化步长 &lt;h4 id=&#34;PWM实现方法&#34;&gt;&lt;a href=&#34;#PWM实现方法&#34; class=&#34;headerlink&#34; title=&#34;PWM实现方法&#34;&gt;&lt;/a&gt;PWM实现方法&lt;/h4&gt;输出比较模式，依靠内部计数器cnt和ccr设置的数值的比较来进行输出电平的控制，常用的有匹配时电平翻转和PWM模式&lt;br&gt;PWM占空比：$$DutyCycle&amp;#x3D;\frac{CCR}{ARR}$$&lt;br&gt;PWM频率：$$Freq&amp;#x3D;\frac{F_{clk}}{ARR}$$&lt;br&gt;PWM分辨率：$$Resolution&amp;#x3D;\frac{ARR}{2^{n}}$$&lt;h4 id=&#34;高级定时器&#34;&gt;&lt;a href=&#34;#高级定时器&#34; class=&#34;headerlink&#34; title=&#34;高级定时器&#34;&gt;&lt;/a&gt;高级定时器&lt;/h4&gt;死区生成：可以避免推挽电路上下管同时打开导致短路&lt;h3 id=&#34;PWM控制电机&#34;&gt;&lt;a href=&#34;#PWM控制电机&#34; class=&#34;headerlink&#34; title=&#34;PWM控制电机&#34;&gt;&lt;/a&gt;PWM控制电机&lt;/h3&gt;舵机是根据pwm信号控制舵机转动角度的，内部有直流电机&lt;h4 id=&#34;电机驱动芯片&#34;&gt;&lt;a href=&#34;#电机驱动芯片&#34; class=&#34;headerlink&#34; title=&#34;电机驱动芯片&#34;&gt;&lt;/a&gt;电机驱动芯片&lt;/h4&gt;利用H桥，可以控制电机转动方向。四个开关管可以构成两个推挽电路，使得电机可以获得两个方向的电流。&lt;br&gt;电机需要的电源一般是大功率的，不能直接通过gpio驱动，因此可以通过让stlink的5v口接入电机驱动芯片来获得电源。但是注意，pwm信号的地应当和电机电源的地相连，否则会出现电平不稳定的情况。&lt;h3 id=&#34;PWM代码&#34;&gt;&lt;a href=&#34;#PWM代码&#34; class=&#34;headerlink&#34; title=&#34;PWM代码&#34;&gt;&lt;/a&gt;PWM代码&lt;/h3&gt;pwm的激活结构如下：&lt;br&gt;&lt;img src=&#34;/2023/05/11/%E7%94%B5%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/PWM_Structure.jpg&#34; alt=&#34;PWM_Structure&#34;&gt;&lt;/li&gt;
&lt;li&gt;RCC开启时钟&lt;/li&gt;
&lt;li&gt;配置时基单元&lt;/li&gt;
&lt;li&gt;配置输出比较单元&lt;/li&gt;
&lt;li&gt;配置GPIO，设置为复用推挽输出&lt;/li&gt;
&lt;li&gt;运行控制，启动计数器&lt;h4 id=&#34;TIM库函数&#34;&gt;&lt;a href=&#34;#TIM库函数&#34; class=&#34;headerlink&#34; title=&#34;TIM库函数&#34;&gt;&lt;/a&gt;TIM库函数&lt;/h4&gt;在hal库中，tim相关库函数在stm32f1xx_hal_tim.h文件中&lt;br&gt;其中有关输出比较的内容有：&lt;/li&gt;
&lt;li&gt;TIM_OC_InitTypeDef: 输出比较初始化结构体&lt;/li&gt;
&lt;li&gt;HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)：输出比较初始化函数&lt;/li&gt;
&lt;li&gt;HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef *sConfig, uint32_t Channel)：配置输出通道函数&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="电赛" />
        <updated>2023-05-11T08:19:20.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/02/11/%E5%85%B3%E4%BA%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%89%80%E4%BB%A3%E8%A1%A8%E7%9A%84%E7%90%86%E6%80%A7%E4%B8%96%E7%95%8C%E7%9A%84%E7%9C%9F%E5%AE%9E%E6%80%A7%E8%AE%A8%E8%AE%BA/</id>
        <title>关于计算机所代表的理性世界的真实性讨论</title>
        <link rel="alternate" href="http://example.com/2023/02/11/%E5%85%B3%E4%BA%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%89%80%E4%BB%A3%E8%A1%A8%E7%9A%84%E7%90%86%E6%80%A7%E4%B8%96%E7%95%8C%E7%9A%84%E7%9C%9F%E5%AE%9E%E6%80%A7%E8%AE%A8%E8%AE%BA/"/>
        <content type="html">&lt;h1 id=&#34;写在这里的原因&#34;&gt;&lt;a href=&#34;#写在这里的原因&#34; class=&#34;headerlink&#34; title=&#34;写在这里的原因&#34;&gt;&lt;/a&gt;写在这里的原因&lt;/h1&gt;&lt;p&gt;我刚刚在看关于量子计算机的推送时。因为那个推送里说到，数字计算机需要大量参数参与运算的一个漫长的过程，能够被一个模拟计算机（甚至例如两球相撞）在一瞬间解决出来，并且能够以高得多的精度呈现。因此不考虑量子计算的真实内容（是根据量子定律的量子比特和量子纠缠进行计算，而不是依靠量子的物理性质进行模拟过程），我在想的是，我最近如此沉迷于计算机的世界，这个虚拟的世界真的能给我提供等同于现实生活的精神支持吗？&lt;/p&gt;
&lt;p&gt;这个问题并不适合在日记中讨论，因此我写在这里。&lt;/p&gt;
&lt;h1 id=&#34;关于这个问题&#34;&gt;&lt;a href=&#34;#关于这个问题&#34; class=&#34;headerlink&#34; title=&#34;关于这个问题&#34;&gt;&lt;/a&gt;关于这个问题&lt;/h1&gt;&lt;h2 id=&#34;我的第一个念头&#34;&gt;&lt;a href=&#34;#我的第一个念头&#34; class=&#34;headerlink&#34; title=&#34;我的第一个念头&#34;&gt;&lt;/a&gt;我的第一个念头&lt;/h2&gt;&lt;p&gt;我想到的是，真实世界的一举一动，一个石头落地，一些劳动的技巧，是计算机不能以相同的效率模拟出来的，所以真实世界的物质是无可替代的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在这里引出另一个想法，那就是，计算机世界，是完全数字化的，那么是否可以在某种程度上，认为这是一个纯粹理性的世界。关于这个想法在后面应该怎么用，我还会加以叙述的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后我想到的就是，虚拟的世界，是只能让我们玩我们已经有的知识的，给予不了我们完全新的知识&lt;br&gt;但是这个叙述不正确，因为我又想到了纯粹理性的问题，那么就是说，我们可以创造新的东西，只不过我们不能像在真实世界一样发现东西罢了。&lt;br&gt;那么，在计算机这个纯粹理性的世界中，如果有一个人，从生下来就只能坐在电脑前玩电脑，他所创造的东西，假设他具有纯粹理性，那么，他就是能在此基础之上创造诸如线性时间选择算法，矩阵运算，语义网络等等的计算机内容，他创造的整个世界，其实是能够完备的。&lt;/p&gt;
&lt;p&gt;而且，发现东西，只不过是经验主义的产物而已，纯粹理性建构的世界会是更好的&lt;/p&gt;
&lt;p&gt;&lt;font size=&#34;6&#34; color=&#34;Red&#34;&gt; &lt;strong&gt;但是，不存在更好的世界!&lt;/strong&gt; &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;如果说计算机是一个世界的话，那么这个虚拟的纯粹理性世界，本身就是物质构成的，这种模拟到数字的转化，本身就是一个物质性的过程。&lt;br&gt;如果不考虑外部的物质性，那么计算机本身能否创造计算机本身呢？也就是说他能不能具有完备性呢？&lt;br&gt;我有一个观点就是，作为本源的代码，是不可能再逆向出来实现代码的硬件逻辑的。无论如何，他所构建的世界，是基于现象（在计算机的虚拟世界里就是代码）创造的，人在现实世界中，创造的一个虚拟世界（计算机），也是基于他在现实世界中探索所得的。所以我们可以说，物质世界本身才是纯粹理性诞生的地方。纯粹理性的应用只不过是试图将其从原本的物质世界剥离出来，从而进行更深一步的抽象的一个产物。&lt;/p&gt;
&lt;p&gt;所以，物质世界，我们所呼吸的这个物质世界，他的奥秘的发掘，是一个非常有意义的工作。世界的物质性，和纯粹理性的（被）延拓性。二者是递归并存的。&lt;/p&gt;
</content>
        <category term="随笔" />
        <updated>2023-02-11T14:30:26.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/02/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
        <title>正则表达式</title>
        <link rel="alternate" href="http://example.com/2023/02/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
        <content type="html">&lt;h1 id=&#34;ABOUT-REGEX&#34;&gt;&lt;a href=&#34;#ABOUT-REGEX&#34; class=&#34;headerlink&#34; title=&#34;ABOUT REGEX&#34;&gt;&lt;/a&gt;ABOUT REGEX&lt;/h1&gt;&lt;h2 id=&#34;BASIC-GRAMMAR&#34;&gt;&lt;a href=&#34;#BASIC-GRAMMAR&#34; class=&#34;headerlink&#34; title=&#34;BASIC GRAMMAR&#34;&gt;&lt;/a&gt;BASIC GRAMMAR&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;A simple example&lt;blockquote&gt;
&lt;p&gt;^[0-9]+abc$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个是如下意义：&lt;br&gt;(1) ^is the start of the original string.&lt;br&gt;(2) [0-9]+ can match multiple numbers, if without +, it will match only ONE number&lt;br&gt;(3) abc$ match the number ‘abc’ and end with it, $ means the end of the match string&lt;/p&gt;
&lt;p&gt;So the ^ and $ char refers to the range of regex .&lt;br&gt;And the [] can contain the things we need to match. Such as the a-z 0-9 _ - and so on.&lt;br&gt;But elements without [] refers to the strict match of the string.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;The next step&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;char + : For example, there is a Zion+b , it means that there is a Zion and some other chars and finally a ‘b’.&lt;/li&gt;
&lt;li&gt;char * : It is similar to * but the char in front of the * can appear any times.&lt;/li&gt;
&lt;li&gt;char ? : It means the char in front of the ‘?’ can exist at most 1 time&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;The normal characters&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;range in the []:&lt;ul&gt;
&lt;li&gt;[ABC]: match the characters in it, dont need to be successive&lt;/li&gt;
&lt;li&gt;[^ABC]: match the characters not in it.&lt;/li&gt;
&lt;li&gt;[A-Z]: match the characters in the range of it&lt;/li&gt;
&lt;li&gt;. : match any character which is not the blank character.&lt;/li&gt;
&lt;li&gt;[\s\S]: match anything, \s means blank char, \S means not-blank char.&lt;/li&gt;
&lt;li&gt;\w : equals to [A-Za-z0-9_]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;The transform characters&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;unprinted characters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\cx: match the control chars pointed by x. For example, \cM matchs a Control-M or a return, x should be in range of A-Za-z&lt;/li&gt;
&lt;li&gt;\f :match a turn-page char. equals to \x0c and \cL&lt;/li&gt;
&lt;li&gt;\n :matches a next-line char&lt;/li&gt;
&lt;li&gt;\r :matches a return char&lt;/li&gt;
&lt;li&gt;\t :a table char&lt;/li&gt;
&lt;li&gt;\v :a virtical table char, the same as \x0b and \cK&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;particular characters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$: match the end of the original string.&lt;/li&gt;
&lt;li&gt;(): mark the range of a sub-expression.&lt;/li&gt;
&lt;li&gt;+: match the expression before more than 1 time.&lt;/li&gt;
&lt;li&gt;{: mark the range of the restricted-char expression&lt;/li&gt;
&lt;li&gt;|: point out the choice between two options&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;restricted-char:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;{n}: n means match the char n times, o{n} means match ‘o’ n times&lt;/li&gt;
&lt;li&gt;{n,}: means match at least n times&lt;/li&gt;
&lt;li&gt;{n,m}: means match not less than n and not more than m times;&lt;/li&gt;
&lt;li&gt;?: it will match the char 1 time and restrict the * and + to not greedy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;locational char:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;^: match the beginning of the original word&lt;/li&gt;
&lt;li&gt;$: match the ending of the original string. If the mutiline is true, $ will match the chars in front of the \n chars&lt;/li&gt;
&lt;li&gt;\b: match a edge of a word &lt;/li&gt;
&lt;li&gt;\B: doesn’t match the edge of the word&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;p&gt;choose&lt;br&gt;use () to contain all options, divide the adjacent options by |&lt;br&gt;For example, a regex like “&amp;#x2F;([1-9])([a-z]+)&amp;#x2F;g” can match the string correspond with two requirements above.&lt;br&gt;however, the matched strings will be stored in buffer.&lt;br&gt;One solution is to use the ?: char in front of the first () .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;presearch character&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;?&amp;#x3D; means find the matched string in front of the marked string. exp1(?&amp;#x3D;exp2) means find the exp1 which is in front of the exp2&lt;/li&gt;
&lt;li&gt;?&amp;lt;&amp;#x3D; means find the matched string behind the marked string. (?&amp;lt;&amp;#x3D;exp2)exp1 means find the exp1 which is behind the exp2&lt;/li&gt;
&lt;li&gt;?! means find the matched string which doesn’t have the marked string on the back. exp1(?!exp2) means find the exp1 which is not followed by the exp2&lt;/li&gt;
&lt;li&gt;?&amp;lt; ! means find the matched string without the marked string in the head. (?&amp;lt; !exp2)exp1&lt;br&gt;means find the exp1 without a previous exp2 next to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;ornamental characters&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;i:means ignore the capitalization of the expression&lt;/li&gt;
&lt;li&gt;g: find all the matched string&lt;/li&gt;
&lt;li&gt;m: match the exps with ^$ in multiple lines&lt;/li&gt;
&lt;li&gt;s: make the . char can match \n character\&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2023-02-04T16:02:49.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/27/2022-10-27%E9%9A%8F%E7%AC%94/</id>
        <title>2022.10.27随笔</title>
        <link rel="alternate" href="http://example.com/2022/10/27/2022-10-27%E9%9A%8F%E7%AC%94/"/>
        <content type="html">&lt;p&gt;如今我踽踽独行，但我并不担忧，倘若我能留下一丝痕迹，我便永远不会孤独&lt;br&gt;希望你我可以一同在林中漫步&lt;/p&gt;
&lt;h1 id=&#34;好久不见&#34;&gt;&lt;a href=&#34;#好久不见&#34; class=&#34;headerlink&#34; title=&#34;好久不见&#34;&gt;&lt;/a&gt;好久不见&lt;/h1&gt;&lt;p&gt;我回来了，但是我又怎能说我离开了呢。&lt;br&gt;五个月，是2022被荒废的证据呢，还是让我飞翔的证据呢&lt;br&gt;无论如何，我热爱劳动了&lt;/p&gt;
</content>
        <category term="随笔" />
        <updated>2022-10-26T17:27:59.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/05/03/2022-5-2%E9%9A%8F%E7%AC%94/</id>
        <title>2022.5.2随笔</title>
        <link rel="alternate" href="http://example.com/2022/05/03/2022-5-2%E9%9A%8F%E7%AC%94/"/>
        <content type="html">&lt;p&gt;今天要用速度写作的方式&lt;/p&gt;
&lt;p&gt;我在想什么？我在想善行与恶行。&lt;/p&gt;
&lt;h1 id=&#34;每日一句&#34;&gt;&lt;a href=&#34;#每日一句&#34; class=&#34;headerlink&#34; title=&#34;每日一句&#34;&gt;&lt;/a&gt;每日一句&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;善行总是比恶行走得远&lt;br&gt;  出处我忘了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;乱想time&#34;&gt;&lt;a href=&#34;#乱想time&#34; class=&#34;headerlink&#34; title=&#34;乱想time&#34;&gt;&lt;/a&gt;乱想time&lt;/h1&gt;&lt;p&gt;爱也好，正义也好，或是人世间的美好品质，都应该是基于一个什么样的目标呢？&lt;br&gt;或者说是基于什么样的品质呢？&lt;/p&gt;
&lt;p&gt;我希望是进步。&lt;br&gt;Enterprise 进取&lt;/p&gt;
&lt;p&gt;如果没有进取，一切都将死亡。死亡将会是最安宁最寂寞最稳定的。&lt;br&gt;没有获得也没有失去。&lt;/p&gt;
&lt;p&gt;即便进取意味着牺牲。为了爱的牺牲&lt;br&gt;与死亡&lt;br&gt;差别在哪里？&lt;/p&gt;
&lt;p&gt;差别在进取。&lt;br&gt;我不是在急躁。&lt;br&gt;我是在跑步，我奔跑在田野。&lt;/p&gt;
&lt;p&gt;我不害怕失去这一切，但是我也不会轻易放弃&lt;br&gt;如果为了更进一步的话。&lt;br&gt;我认为牺牲了几乎一切，并不是赌博&lt;br&gt;而是一种必然的选择。&lt;/p&gt;
&lt;p&gt;康德说你有自由&lt;/p&gt;
&lt;p&gt;我用这个自由来束缚自己&lt;br&gt;把自己绑在前进的激流中！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2022/05/03/2022-5-2%E9%9A%8F%E7%AC%94/foust.png&#34; alt=&#34;只要努力，难免犯错误&#34;&gt;&lt;/p&gt;
</content>
        <category term="随笔" />
        <updated>2022-05-02T16:18:49.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/05/01/%E4%BD%A0%E5%A5%BD5%E6%9C%88/</id>
        <title>你好5月</title>
        <link rel="alternate" href="http://example.com/2022/05/01/%E4%BD%A0%E5%A5%BD5%E6%9C%88/"/>
        <content type="html">&lt;p&gt;早上好！以防我见不到你们，下午好，晚上好以及晚安！&lt;/p&gt;
&lt;p&gt;我猜我大概就是想要这样的心态吧。虽然如此，但是我依旧不认为我能够开心地度过最近的日子&lt;/p&gt;
&lt;h2 id=&#34;与其说是开心，不如说是能不能熬过&#34;&gt;&lt;a href=&#34;#与其说是开心，不如说是能不能熬过&#34; class=&#34;headerlink&#34; title=&#34;与其说是开心，不如说是能不能熬过&#34;&gt;&lt;/a&gt;与其说是开心，不如说是能不能熬过&lt;/h2&gt;&lt;p&gt;抱歉，在五月的一开始就这么垂头丧气，但是对于我来说，今天并不是五月的第一天，也不是4月的最后一天，不是任何一个特殊的日子，只是我呆在封闭的校园封闭的楼中的一天。&lt;/p&gt;
&lt;p&gt;谢谢关心，但是连疲惫都没有实感的人，怎么会有因为得到了关心而感到的快乐呢？&lt;/p&gt;
&lt;p&gt;在水群时，很快乐吧&lt;br&gt;但是然后呢？&lt;br&gt;睡不着觉的还是我&lt;br&gt;不想起床的还是我&lt;/p&gt;
&lt;p&gt;是的，我大概是已经抗拒起床了&lt;/p&gt;
&lt;p&gt;人间四月芳菲尽&lt;br&gt;我想，四月份对谁来说都是难过的吧&lt;/p&gt;
&lt;p&gt;这是一种隐藏在深厚的云层以外的忧愁&lt;br&gt;晴天时它隐藏在无尽的深邃中&lt;br&gt;夜晚使它弥漫在窗外&lt;/p&gt;
&lt;p&gt;但无论如何，那种腐败的味道无时无刻不提醒着我们它的存在。&lt;/p&gt;
&lt;p&gt;每个人都应当有一种特殊的能力&lt;br&gt;那就是看到平时看不到的东西的能力&lt;br&gt;我看到了什么？&lt;br&gt;满地的樱花，在腐朽的香气中，提醒了我&lt;br&gt;“自由不是理所应当，自由不是触手可及”&lt;/p&gt;
&lt;p&gt;但是，自由是什么&lt;br&gt;关于这个问题，却是离自由越远，越看得清楚&lt;br&gt;离自由越远，就离真相越近，就离对现实的解构越近。&lt;br&gt;当我们解构了现实时，就能看到远远超出了目光所能及的范围的那些事物。&lt;/p&gt;
&lt;p&gt;你好吗？五月&lt;br&gt;如果你好，我希望你不好&lt;br&gt;如果你不好，我希望你能过得至少快乐一点。&lt;/p&gt;
</content>
        <category term="月历" />
        <updated>2022-04-30T16:23:42.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/04/30/2022-4-29%E9%9A%8F%E7%AC%94/</id>
        <title>2022.4.29随笔</title>
        <link rel="alternate" href="http://example.com/2022/04/30/2022-4-29%E9%9A%8F%E7%AC%94/"/>
        <content type="html">&lt;h1 id=&#34;每日一句&#34;&gt;&lt;a href=&#34;#每日一句&#34; class=&#34;headerlink&#34; title=&#34;每日一句&#34;&gt;&lt;/a&gt;每日一句&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;“我爱你，就像我爱我们为之奋斗的一切。我爱你，就像我爱自由、尊严和所有的人都有工作而不致挨饿的权利。我爱你，就像我爱所有那些已牺牲的同志。”&lt;br&gt;  ——《丧钟为谁而鸣》三十一章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嗯，说实话，我认为这种表白是虚伪的。&lt;br&gt;是太过理想化，是一种不愿意多思考的表白。&lt;br&gt;你不是在为了你的爱人而奋斗。你所奋斗的是你和爱人所共同拥有的未来。&lt;br&gt;在爱情中，牺牲永远是不理智的。&lt;br&gt;但是为了你的崇高事业，牺牲却是经常难以避免的。&lt;/p&gt;
&lt;h1 id=&#34;乱想time&#34;&gt;&lt;a href=&#34;#乱想time&#34; class=&#34;headerlink&#34; title=&#34;乱想time&#34;&gt;&lt;/a&gt;乱想time&lt;/h1&gt;&lt;p&gt;围棋是个游戏，没错，而且很有意思。&lt;br&gt;它最需要的是什么呢？&lt;br&gt;首先，肯定不是阿尔法狗。&lt;br&gt;因为这个游戏是服务人类的，它的诞生本身就不是为了挑战机器而存在。&lt;/p&gt;
&lt;p&gt;那么，对于人类而言，挑战这个游戏，最需要什么呢？&lt;/p&gt;
&lt;p&gt;柯洁之所以是柯洁，应该是因为他确实是天才。&lt;/p&gt;
&lt;p&gt;然后呢？&lt;/p&gt;
&lt;p&gt;柯洁之所以是柯洁，还有一个原因&lt;br&gt;是围棋就是围棋。&lt;/p&gt;
&lt;p&gt;围棋为什么是围棋呢？&lt;br&gt;是因为除了一个柯洁，还有无数个九段，八段&lt;br&gt;还有无数个路边的人，还有无数个看棋谱下棋的人。&lt;/p&gt;
&lt;p&gt;这又是怎么回事呢？&lt;br&gt;是专注。&lt;br&gt;从一而终的专注成就了这个游戏注定被无数人追捧。&lt;/p&gt;
&lt;p&gt;正是由于无数人的追捧，才有了这个游戏永久以来的进步，&lt;br&gt;打法推陈出新，天才一浪接一浪&lt;/p&gt;
&lt;p&gt;所以说，天才战胜了对手&lt;br&gt;但是，庸才战胜了游戏。&lt;/p&gt;
&lt;p&gt;我不妨把话说的再明白点。&lt;br&gt;小时候，我们可能只有一个游戏可以玩。&lt;br&gt;可能是一副象棋&lt;br&gt;可能是一个psp上的游戏&lt;br&gt;也有可能是一本书&lt;/p&gt;
&lt;p&gt;那个是我们终生的巅峰&lt;br&gt;再也不会有一个游戏&lt;br&gt;我们会玩得更好了&lt;br&gt;也再也不会有一个游戏&lt;br&gt;我们能从中获得这么多的快乐了&lt;/p&gt;
&lt;p&gt;所以说，童子功&lt;br&gt;就是因为一个孩子认识的有限的世界中&lt;br&gt;这是他唯一的天地。&lt;/p&gt;
&lt;p&gt;长大之后，我们可以玩更多的游戏了，但是我们永远不会再找到那种乐趣的万分之一。&lt;/p&gt;
&lt;p&gt;这两件事有什么关系吗？&lt;/p&gt;
&lt;p&gt;嗯&lt;/p&gt;
&lt;p&gt;有时候，我们想要战胜什么，就必须把它当成唯一的东西&lt;br&gt;这点，只有庸才能做到了。&lt;br&gt;幼稚，是一种不平凡的平庸。&lt;br&gt;&lt;img src=&#34;/2022/04/30/2022-4-29%E9%9A%8F%E7%AC%94/eve.png&#34; alt=&#34;浴火银河2，诞生了我心中永远的太空题材&#34;&gt;&lt;/p&gt;
</content>
        <category term="随笔" />
        <updated>2022-04-29T16:36:19.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/04/29/2022-4-28%E9%9A%8F%E7%AC%94/</id>
        <title>2022.4.28随笔：小智慧与大聪明</title>
        <link rel="alternate" href="http://example.com/2022/04/29/2022-4-28%E9%9A%8F%E7%AC%94/"/>
        <content type="html">&lt;h1 id=&#34;每日一句&#34;&gt;&lt;a href=&#34;#每日一句&#34; class=&#34;headerlink&#34; title=&#34;每日一句&#34;&gt;&lt;/a&gt;每日一句&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;没有付出劳动的一天，就是在吞噬之前某一天的成果&lt;br&gt;  ——我说的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你猜我为啥今天没有引用别人的句子&lt;/p&gt;
&lt;h1 id=&#34;乱想time&#34;&gt;&lt;a href=&#34;#乱想time&#34; class=&#34;headerlink&#34; title=&#34;乱想time&#34;&gt;&lt;/a&gt;乱想time&lt;/h1&gt;&lt;p&gt;如题，小智慧与大聪明&lt;br&gt;我们总能看见小聪明和大智慧&lt;br&gt;其实本来也是这样的&lt;br&gt;但是聪明的人是不是也能有着很深刻的思维以及很广阔的视野呢？&lt;br&gt;而那些明哲之人，是否仅仅关注于保身这样的事物？&lt;/p&gt;
&lt;p&gt;我相信，耳聪目明，自从亘古以来&lt;br&gt;绝对是一个褒义词。&lt;br&gt;是月满则亏，水满则溢这个“歪曲的真理”&lt;br&gt;让聪明必然带上一些贬低的意味。&lt;/p&gt;
&lt;p&gt;有时候，大聪明是很难做到的。&lt;br&gt;就好像挖掘机提取细胞核一样&lt;br&gt;让人觉得：这小子是个聪明人啊，别说，我还有点嫉妒了。&lt;/p&gt;
&lt;p&gt;但是呢，却让人在磨合中不讨厌这个人。甚至喜欢这种人了&lt;/p&gt;
&lt;p&gt;原因在于：长久的思考，清晰的逻辑，热心的学习&lt;/p&gt;
&lt;p&gt;&lt;font size=&#34;6&#34; color=&#34;Red&#34;&gt; &lt;strong&gt;即是，博学而笃志，切问而近思&lt;/strong&gt; &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2022/04/29/2022-4-28%E9%9A%8F%E7%AC%94/athens.jpg&#34; alt=&#34;我真切的祝愿我的学校，复旦大学，可以成为培育真正的人类群星的地方&#34;&gt;&lt;/p&gt;
</content>
        <category term="随笔" />
        <updated>2022-04-28T17:28:29.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/04/27/2022-4-27%E9%9A%8F%E7%AC%94/</id>
        <title>2022.4.27随笔</title>
        <link rel="alternate" href="http://example.com/2022/04/27/2022-4-27%E9%9A%8F%E7%AC%94/"/>
        <content type="html">&lt;p&gt;昨日断更一天，本来是想要调整作息早睡觉的，结果还是躺床上失眠到两点半，笑死&lt;/p&gt;
&lt;h1 id=&#34;每日一句&#34;&gt;&lt;a href=&#34;#每日一句&#34; class=&#34;headerlink&#34; title=&#34;每日一句&#34;&gt;&lt;/a&gt;每日一句&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;除了思想，什么是“我”呢？&lt;br&gt;  ——胡适&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;面对威权，我们可以不屈。&lt;br&gt;我们可以慷慨赴死。&lt;br&gt;我们可以沉默一生。&lt;br&gt;我们也可以屈服，趋炎附势。&lt;br&gt;可是，总有人是和我们做出不同的选择的，&lt;br&gt;威权不会死亡。愤怒般的正义也不会。&lt;br&gt;正如完全的正义从未活过一样。&lt;/p&gt;
&lt;h1 id=&#34;乱想time&#34;&gt;&lt;a href=&#34;#乱想time&#34; class=&#34;headerlink&#34; title=&#34;乱想time&#34;&gt;&lt;/a&gt;乱想time&lt;/h1&gt;&lt;p&gt;如何专注的思考呢？&lt;br&gt;首先要明确要思考的问题&lt;br&gt;在客观上排除干扰思考的因素&lt;br&gt;主观上摒弃思绪中跑偏的部分&lt;/p&gt;
&lt;p&gt;保持身心健康&lt;br&gt;忍耐除了问题本身以外的一切&lt;/p&gt;
&lt;p&gt;在平时要积累知识，&lt;br&gt;在思考时要尽力使用知识&lt;/p&gt;
&lt;p&gt;善于将问题分解而非延申&lt;br&gt;记录子问题&lt;br&gt;再逐一回答。&lt;/p&gt;
&lt;p&gt;坚持一次思考完成&lt;br&gt;不要思考一半就结束。&lt;/p&gt;
&lt;p&gt;即时整理成文字归档。&lt;br&gt;过一阵再去阅读一遍。&lt;br&gt;将其形成一个新的问题&lt;/p&gt;
&lt;p&gt;所以这就是为什么深夜不适合写作&lt;br&gt;深夜会让人思绪不平静&lt;br&gt;因此难以想出真正“哲学”的想法&lt;/p&gt;
&lt;p&gt;东方有哲学吗？我不好说，胡适也不好说&lt;/p&gt;
&lt;p&gt;但是哲学的思考，我更喜欢逻辑性很强的哲学。&lt;/p&gt;
&lt;p&gt;因为这是唯一一种，和知识的本质接轨的东西&lt;br&gt;那就是打破垄断与威权。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2022/04/27/2022-4-27%E9%9A%8F%E7%AC%94/hushi.jpg&#34; alt=&#34;向未来的自由致敬，向开创未来的人致敬&#34;&gt;&lt;/p&gt;
</content>
        <category term="随笔" />
        <updated>2022-04-27T15:05:51.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/04/25/2022-4-25%E9%9A%8F%E7%AC%94/</id>
        <title>2022.4.25随笔</title>
        <link rel="alternate" href="http://example.com/2022/04/25/2022-4-25%E9%9A%8F%E7%AC%94/"/>
        <content type="html">&lt;h1 id=&#34;每日一句&#34;&gt;&lt;a href=&#34;#每日一句&#34; class=&#34;headerlink&#34; title=&#34;每日一句&#34;&gt;&lt;/a&gt;每日一句&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Resisitry fortificar es vencer&lt;br&gt;继续抵抗，加强防御，就是胜利&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;死没什么了不起，他心中没有死的图景，也没有对死的惧怕。但是活在世上，就像山坡上一片麦浪在风中荡漾。活在世上，就像一只苍鹰在天空中飞翔。活在世上，就像打麦时麦粒和秣屑飞扬中喝一陶罐水。活在世上，就像两腿夹着一匹马儿，一条腿下夹着一支卡宾枪，经过一个山冈，一个河谷，一条两岸长着树木的小溪，奔向河谷另一头以及远方的山冈。&lt;/p&gt;
&lt;h1 id=&#34;乱想time&#34;&gt;&lt;a href=&#34;#乱想time&#34; class=&#34;headerlink&#34; title=&#34;乱想time&#34;&gt;&lt;/a&gt;乱想time&lt;/h1&gt;&lt;p&gt;人经常是害怕改变的，主要是害怕改变后将要面对的，未知的事物。&lt;br&gt;但是，懦弱的温床正是勇气的绝壁。&lt;br&gt;面临失败时，会让人感到烦躁，这种烦躁将会变成愤怒。&lt;br&gt;这是一种常情。&lt;br&gt;人是厌恶愤怒的，厌恶到想要想尽一切办法远离他&lt;br&gt;但是对愤怒的逃离，就会产生懦弱。&lt;/p&gt;
&lt;p&gt;谁能接受失败？&lt;/p&gt;
&lt;p&gt;无所谓者？还是真正的勇者？&lt;/p&gt;
&lt;p&gt;人生本来就不是理所应当的。成功也好，失败也好。&lt;br&gt;遇上了的，并非必然。&lt;/p&gt;
&lt;p&gt;有时候，宿命会让我们犹豫&lt;br&gt;人生到底是不是一个循环呢？&lt;br&gt;我们不挣扎，结局不过是灭亡&lt;br&gt;挣扎了，又要挣扎到什么时候呢？&lt;/p&gt;
&lt;p&gt;未来是不可知的，有时却是可知的。&lt;/p&gt;
&lt;p&gt;我们在面对未知的勇气和面对已知的退缩间徘徊。&lt;br&gt;只不过是无知和假装的有知罢了。&lt;/p&gt;
&lt;p&gt;我现在，只有现在了。&lt;br&gt;只有现在能让我知道我在做什么，而且能让我行动。&lt;/p&gt;
&lt;p&gt;除此之外，都不应该是生，而应该是死的范畴。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2022/04/25/2022-4-25%E9%9A%8F%E7%AC%94/Hemingway.jpg&#34; alt=&#34;一个人可以被毁灭，但不会被打败&#34;&gt;&lt;/p&gt;
</content>
        <category term="随笔" />
        <updated>2022-04-25T15:35:30.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/04/24/2022-4-24%E9%9A%8F%E7%AC%94/</id>
        <title>2022.4.24随笔</title>
        <link rel="alternate" href="http://example.com/2022/04/24/2022-4-24%E9%9A%8F%E7%AC%94/"/>
        <content type="html">&lt;p&gt;夏天要到了吧……&lt;/p&gt;
&lt;h1 id=&#34;每日一句&#34;&gt;&lt;a href=&#34;#每日一句&#34; class=&#34;headerlink&#34; title=&#34;每日一句&#34;&gt;&lt;/a&gt;每日一句&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;“我必须是你的头脑保持清醒，因为，如果你的头脑不是绝对清醒，你就没权做你在做的事，因为这一切都是犯罪。”&lt;br&gt;“谁也没权夺别人的生命，除非为了防止其他人遭到更大的不幸。所以头脑要清醒，别骗你自己啦。”&lt;br&gt;《丧钟为谁而鸣》第二十六章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;清醒，才有实存&lt;br&gt;倘若幻想中能生发平时见不到的风景。&lt;br&gt;那么，我会欣赏，记下来。&lt;br&gt;然后在清醒时将其实现。&lt;br&gt;&lt;img src=&#34;/2022/04/24/2022-4-24%E9%9A%8F%E7%AC%94/van.jpg&#34; alt=&#34;谁敢在不清醒的时候，留下传世之物？&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;乱想time&#34;&gt;&lt;a href=&#34;#乱想time&#34; class=&#34;headerlink&#34; title=&#34;乱想time&#34;&gt;&lt;/a&gt;乱想time&lt;/h1&gt;&lt;p&gt;逐渐的，我开始变得不畏惧了&lt;br&gt;但是，冒进会不会是一个问题呢？&lt;br&gt;我现在无法做出回答。&lt;/p&gt;
&lt;p&gt;我能想到的仅仅是，在一支舞中&lt;/p&gt;
&lt;p&gt;节奏与配合，很重要&lt;br&gt;毕竟你没法和一只公牛跳舞&lt;/p&gt;
&lt;p&gt;但是，只有公牛一样的人，才能起身前往舞池。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2022/04/24/2022-4-24%E9%9A%8F%E7%AC%94/dance.jpg&#34; alt=&#34;节奏，把握住这个节奏！&#34;&gt;&lt;/p&gt;
&lt;p&gt;我决定不再深夜写博客了，对身体不好，也容易让思想跑偏&lt;/p&gt;
&lt;p&gt;倘若，我没能让自己成功地把握住节奏，那么，失败是必不可少的。&lt;br&gt;但是，碰壁不是为了圆滑，而是为了塑造&lt;br&gt;你究竟是什么样子的呢？取决于刻刀&lt;br&gt;但是，从璞开始，每刻一刀，就会少点东西，具体是什么形态，最终的成品&lt;br&gt;需要一定的规划，也需要一定的机遇&lt;br&gt;本色是一个基础吧，还是得看雕刻的&lt;br&gt;尽本色，是说让刻刀顺着形态走&lt;/p&gt;
&lt;p&gt;嗯，说了不少废话，但是也懂了不少&lt;/p&gt;
&lt;p&gt;再说一句吧，失去是人生的主旋律&lt;br&gt;没有失去的人生，就是没有雕刻的人生&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2022/04/24/2022-4-24%E9%9A%8F%E7%AC%94/jade.jpg&#34; alt=&#34;封校前在上博看到的，雕刻真的是巧夺天工&#34;&gt;&lt;/p&gt;
</content>
        <category term="随笔" />
        <updated>2022-04-24T14:19:25.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/04/23/2022-4-23%E9%9A%8F%E7%AC%94/</id>
        <title>2022.4.23随笔</title>
        <link rel="alternate" href="http://example.com/2022/04/23/2022-4-23%E9%9A%8F%E7%AC%94/"/>
        <content type="html">&lt;p&gt;抱歉，断更了一天，没什么好解释的&lt;/p&gt;
&lt;h1 id=&#34;每日一句&#34;&gt;&lt;a href=&#34;#每日一句&#34; class=&#34;headerlink&#34; title=&#34;每日一句&#34;&gt;&lt;/a&gt;每日一句&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;“怎么不？他要不十分能干，昨天晚上就送命了。依我看，你不懂政治，英国人，也不懂游击战。”&lt;br&gt;“在政治和游击战中，首要问题是能继续活下去。瞧他昨晚就这样继续活下来了。我和你讲了这么多难听的话，他始终忍气吞声。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;天才可以死的光彩，蠢人才能活得长。&lt;br&gt;你若是一颗流星，是否愿意在坠落后依旧存在？&lt;br&gt;还是说，你想在天空燃尽自己？&lt;/p&gt;
&lt;h1 id=&#34;乱想time&#34;&gt;&lt;a href=&#34;#乱想time&#34; class=&#34;headerlink&#34; title=&#34;乱想time&#34;&gt;&lt;/a&gt;乱想time&lt;/h1&gt;&lt;p&gt;如果我说，我的梦想仅仅是平凡的过一辈子，未免落入俗套&lt;br&gt;并不是最浅薄的落俗，而是，众多怀抱希望之人，终究会认为平凡的生活是一件美妙之事&lt;/p&gt;
&lt;p&gt;说实话，这样的梦想，是一种毁灭性的辜负。&lt;/p&gt;
&lt;p&gt;如果我怀抱梦想，免不了被质疑&lt;br&gt;如果我放弃梦想，免不了为自己呵斥&lt;/p&gt;
&lt;p&gt;痛苦的两面萦绕着我，我想，我是否，应当，找出第三条路？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2022/04/23/2022-4-23%E9%9A%8F%E7%AC%94/suncity1.jpg&#34; alt=&#34;劳动，而非安逸的劳动&#34;&gt;&lt;/p&gt;
&lt;p&gt;那么，我想，第三条路便是，真正的去实现自己的梦想，不去怀抱它&lt;br&gt;而是摔打它，珠玉会殒碎，金石会长存&lt;br&gt;摔打我的梦想吧，和它一起在泥土中匍匐。&lt;br&gt;我不讨厌金玉，但是我无法接受将怀抱中的金玉视作唯一&lt;br&gt;&lt;img src=&#34;/2022/04/23/2022-4-23%E9%9A%8F%E7%AC%94/eva.jpg&#34; alt=&#34;题外话，米山舞老师太潮了&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外说一下，暴力，是最丑恶，最脆弱，最无可辨驳地应当抛弃之物。&lt;br&gt;倘若梦想要依靠暴力实现，那么就是应当反省梦想的实存性的时刻了&lt;/p&gt;
&lt;p&gt;如果梦想不是金玉，那么金玉又该如何实现呢？&lt;br&gt;金玉应该是其外&lt;br&gt;其中不是败絮&lt;br&gt;而是铁石&lt;br&gt;从无名中来，到无声之海。&lt;/p&gt;
&lt;p&gt;浪潮即来。&lt;br&gt;&lt;img src=&#34;/2022/04/23/2022-4-23%E9%9A%8F%E7%AC%94/vladmir.jpg&#34; alt=&#34;向泥土中的理想者致敬&#34;&gt;&lt;/p&gt;
</content>
        <category term="随笔" />
        <updated>2022-04-23T15:13:23.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/04/21/2022-4-21%E9%9A%8F%E7%AC%94%E4%B9%8B%E4%BA%8C/</id>
        <title>2022.4.21随笔之二</title>
        <link rel="alternate" href="http://example.com/2022/04/21/2022-4-21%E9%9A%8F%E7%AC%94%E4%B9%8B%E4%BA%8C/"/>
        <content type="html">&lt;hr&gt;
&lt;h1 id=&#34;每日一句&#34;&gt;&lt;a href=&#34;#每日一句&#34; class=&#34;headerlink&#34; title=&#34;每日一句&#34;&gt;&lt;/a&gt;每日一句&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;良辰美景，春暖秋凉。负杖蹑履，逍遥自乐。临池观鱼，披林听鸟；酌酒一杯，弹琴一曲；求数刻之乐，庶几居常以待终。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;春天，2022的春天，大概是就这么过去了，想去看的江南烟雨，似乎要散去了&lt;br&gt;这尚且不可怕&lt;br&gt;真正可怕的，大抵是想去江南的心，也被磨平了&lt;/p&gt;
&lt;h1 id=&#34;乱想time&#34;&gt;&lt;a href=&#34;#乱想time&#34; class=&#34;headerlink&#34; title=&#34;乱想time&#34;&gt;&lt;/a&gt;乱想time&lt;/h1&gt;&lt;p&gt;如果每天都这样乱想一阵，恐怕是有所裨益的，权当是日记，却又和日记有所不同，毕竟生活的一些私事，放在这里，也不太好，一是给大家徒增烦恼，二是可能一些抱怨被看到后，未免让人觉得，我这人应该是个满腹苦水的人，造成了不好的印象。&lt;/p&gt;
&lt;p&gt;所以，我权且以希声言事，以真声言情好了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2022/04/21/2022-4-21%E9%9A%8F%E7%AC%94%E4%B9%8B%E4%BA%8C/luna.jpg&#34; alt=&#34;露娜，她真的，我哭死&#34;&gt;&lt;/p&gt;
&lt;p&gt;今天浅谈一下我对近月的回忆吧，按照村上春树&lt;del&gt;（还是三岛，我忘了）&lt;/del&gt;的一些概念，回忆最深刻的片段是一些无关紧要，但是就是很深刻的片段。&lt;br&gt;总之，完全不能起到评判近月的作用，只是我单纯的一些回忆&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;那么，大藏游星的喜剧，就此开场&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是啊，一场不折不扣的，&lt;strong&gt;喜剧&lt;/strong&gt;，就此开场&lt;/p&gt;
&lt;p&gt;对我来说，回忆最深刻的，是那个夏天，那个疫情之后的夏天&lt;br&gt;住在东丽，一个人住一间房子里，独居的生活，让我的作息极度紊乱&lt;br&gt;但是，我却邂逅了侘傺&lt;br&gt;&lt;img src=&#34;/2022/04/21/2022-4-21%E9%9A%8F%E7%AC%94%E4%B9%8B%E4%BA%8C/jinge.jpg&#34; alt=&#34;有意思的是，我读到金阁寺，这个侘傺的顶峰后，却想要离开这种感觉了&#34;&gt;&lt;/p&gt;
&lt;p&gt;夏天的空调，对应了樱公馆的惬意，深夜的寂静无人以及一种作祟的恐惧感，恰好又和近月中那种仿佛在走钢丝的感觉相合&lt;br&gt;我已经不记得台词了，但是我记得，我爱上露娜，绝不是因为哪几个举动使我爱上她，而是她的气质，让我从初见，到正式遇见，到相处，到爱&lt;/p&gt;
&lt;p&gt;她富有着一切美好的品质，坚韧，优雅，自由，纯真，温暖&lt;br&gt;她的名字是月，却让人想到了冬日房间中的暖阳&lt;br&gt;到了故事后期的那种恋爱的桥段，从来不让人觉得腻，而是一种，沁人而润无声的甘甜。&lt;br&gt;很少有作品能把恋爱的感觉塑造的如此让人，既能共情，却不需要很强的共情能力。&lt;br&gt;是的，其他作品，只要认真体悟，确实是可以感受到作者的心思的&lt;br&gt;近月却不需要，因此很适合来入门&lt;/p&gt;
&lt;p&gt;生逢阳光灿烂，应该是最高的喜剧&lt;br&gt;而跨越困难，则是这喜剧的主演&lt;br&gt;没有搏击困难的人生，就是地窖中的，细若游星之光。&lt;br&gt;勇敢的，笑出来，面对自己的所想，不惜一切&lt;br&gt;终会成为朝阳灿烂万丈&lt;br&gt;&lt;img src=&#34;/2022/04/21/2022-4-21%E9%9A%8F%E7%AC%94%E4%B9%8B%E4%BA%8C/yousei.jpg&#34; alt=&#34;愿你永远“真的很快乐啊！”&#34;&gt;&lt;/p&gt;
</content>
        <category term="随笔" />
        <updated>2022-04-21T13:57:22.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/</id>
        <title>记录：装修博客</title>
        <link rel="alternate" href="http://example.com/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/"/>
        <content type="html">&lt;p&gt;&lt;font color=&#34;Red&#34; size=&#34;6&#34;&gt;&lt;strong&gt;本文长期更新，后面更新的部分也会插在不同部分&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&#34;目录&#34;&gt;&lt;a href=&#34;#目录&#34; class=&#34;headerlink&#34; title=&#34;目录&#34;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;.#%E5%8A%9F%E8%83%BD%E8%AE%BE%E7%BD%AE&#34;&gt;功能设置&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;.#%E4%B8%BB%E9%A2%98%E9%80%89%E5%8F%96&#34;&gt;主题选取&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;.#%E5%BD%92%E6%A1%A3%E4%B8%8E%E6%A0%87%E7%AD%BE&#34;&gt;归档与标签&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;.#%E4%B8%8B%E4%B8%80%E6%AD%A5%EF%BC%8C%E5%8F%8B%E9%93%BE%E4%B8%8E%E4%BD%9C%E8%80%85%E9%93%BE%E6%8E%A5&#34;&gt;友链与作者链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;.#%E4%B8%80%E4%BA%9B%E5%85%B6%E4%BB%96%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C&#34;&gt;一些其他的骚操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;.#%E6%87%92%E5%8A%A0%E8%BD%BD&#34;&gt;懒加载&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;.#%E7%BE%8E%E8%A7%82%E8%AE%BE%E7%BD%AE&#34;&gt;美观设置&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;.#%E8%83%8C%E6%99%AF%E5%9B%BE&#34;&gt;背景图&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;.#%E4%B8%BB%E9%A1%B5%E8%83%8C%E6%99%AF%E5%9B%BE&#34;&gt;主页背景图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;.#%E6%96%87%E7%AB%A0%E8%83%8C%E6%99%AF%E5%9B%BE&#34;&gt;文章背景图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;.#%E6%96%87%E7%AB%A0%E5%B0%81%E9%9D%A2%E5%9B%BE&#34;&gt;文章封面图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;.#%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB&#34;&gt;图片加载动画&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;.#%E6%89%A9%E5%B1%95%E8%AE%BE%E7%BD%AE&#34;&gt;扩展设置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;功能设置&#34;&gt;&lt;a href=&#34;#功能设置&#34; class=&#34;headerlink&#34; title=&#34;功能设置&#34;&gt;&lt;/a&gt;功能设置&lt;/h1&gt;&lt;h2 id=&#34;主题选取&#34;&gt;&lt;a href=&#34;#主题选取&#34; class=&#34;headerlink&#34; title=&#34;主题选取&#34;&gt;&lt;/a&gt;主题选取&lt;/h2&gt;&lt;p&gt;一个博客的功能上限，很大程度上是取决于这个主题给你提供的功能，因此一个好的主题很重要&lt;br&gt;主题的选取，可以看我的另一篇文章&lt;a href=&#34;https://lianga1.github.io/2022/04/18/Hexo%E4%B8%BB%E9%A2%98%E6%A8%A1%E6%9D%BF%E5%88%87%E6%8D%A2/&#34;&gt;Hexo主题模板切换&lt;/a&gt;&lt;br&gt;但是大部分时候我们用的功能不会很多，而基础的功能，例如归档，友链，个人介绍等功能，绝大部分的主题都具备。所以仅需要挑选好看的主题即可，关于主题的美观问题，我们放在&lt;a href=&#34;.#%E7%BE%8E%E8%A7%82%E8%AE%BE%E7%BD%AE&#34;&gt;美观设置&lt;/a&gt;模块说。&lt;br&gt;&lt;img src=&#34;/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/theme1.jpg&#34; alt=&#34;theme&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;导航栏&#34;&gt;&lt;a href=&#34;#导航栏&#34; class=&#34;headerlink&#34; title=&#34;导航栏&#34;&gt;&lt;/a&gt;导航栏&lt;/h2&gt;&lt;p&gt;导航栏是一个博客的门面。设置好导航栏，你的博客会非常的有条理。&lt;/p&gt;
&lt;h3 id=&#34;归档与标签&#34;&gt;&lt;a href=&#34;#归档与标签&#34; class=&#34;headerlink&#34; title=&#34;归档与标签&#34;&gt;&lt;/a&gt;归档与标签&lt;/h3&gt;&lt;p&gt;如果读者想找一篇文章,总不能让读者去挨篇文章翻吧，所以，在写文章的时候，做好标签设置和归档工作，是写一篇文章的必要工作。那么，如何归档呢？&lt;br&gt;&lt;img src=&#34;/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/categories.jpg&#34; alt=&#34;categories&#34;&gt;&lt;br&gt;在md语法中，我们可以在文章顶部的标签部分，加入如下几行&lt;/p&gt;
&lt;figure class=&#34;highlight subunit&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs subunit&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;tags:&lt;/span&gt;&lt;br&gt;- 标签1&lt;br&gt;- 标签2&lt;br&gt;……&lt;br&gt;- 标签n&lt;br&gt;categories: &lt;br&gt;- 一级目录&lt;br&gt;- 二级目录&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;font size=&#34;4&#34;&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/font&gt;：tags和categories必须无缩进，否则在生成html时会报错&lt;/p&gt;
&lt;p&gt;这样，你就拥有了一个可以从标签和分级目录中查询的文章了&lt;/p&gt;
&lt;h3 id=&#34;下一步，友链与作者链接&#34;&gt;&lt;a href=&#34;#下一步，友链与作者链接&#34; class=&#34;headerlink&#34; title=&#34;下一步，友链与作者链接&#34;&gt;&lt;/a&gt;下一步，友链与作者链接&lt;/h3&gt;&lt;p&gt;&lt;font color=&#34;Red&#34; size=&#34;6&#34;&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/font&gt;，本文之后的内容以Fluid主题为准，其他主题大同小异，具体操作可以参照主题的介绍文档。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;为什么把友链放到前面说呢，&lt;del&gt;当然是因为我最开始没管作者链接&lt;/del&gt;，是因为友链的设置更加简单&lt;br&gt;我们需要在主题的_config.yml中（以下如果没有特殊说明，都是themes下的配置文件），在navbar：menu里，加入links，如下&lt;br&gt;&lt;code&gt; - &amp;#123; key: &amp;quot;links&amp;quot;, link: &amp;quot;/links/&amp;quot;, icon: &amp;quot;iconfont icon-link-fill&amp;quot; &amp;#125;&lt;/code&gt;&lt;br&gt;这样就可以&lt;br&gt;然后找到links部分&lt;br&gt;&lt;img src=&#34;/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/links.jpg&#34; alt=&#34;links&#34;&gt;&lt;br&gt;将enable改为true即可，这样，我们的主页导航栏就会出现“友链”了。&lt;br&gt;&lt;img src=&#34;/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/links2.jpg&#34; alt=&#34;links2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size=&#34;4&#34;&gt;如何添加友链呢&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;只需要在config文件中的links模块下的item中，按照如下格式添加即可&lt;/p&gt;
&lt;figure class=&#34;highlight dts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs dts&#34;&gt;- &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;      title:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;rittmeister&amp;quot;&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;      intro:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;xxx的博客&amp;quot;&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;      link:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;https://lianga1.github.io/&amp;quot;&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;      avatar:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/img/avatar.png&amp;quot;&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中avatar是图标，存在主题文件夹下&amp;#x2F;source&amp;#x2F;img文件夹中，你可以根据喜好来更改&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;接下来是作者链接，作者链接略微复杂&lt;br&gt;首先，我们需要在config文件中，找到about：模块&lt;br&gt;&lt;img src=&#34;/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/about1.jpg&#34; alt=&#34;about&#34;&gt;&lt;br&gt;确认是enable状态&lt;br&gt;当然，我们现在博客中点击这个页面，会显示404&lt;br&gt;原因是我们需要创建一个专门的about页面，方法如下，cmd输入代码&lt;br&gt;&lt;code&gt;hexo new page about&lt;/code&gt;&lt;br&gt;即会在source文件夹创建一个about文件夹，里面有一个index.md文件，进入&lt;br&gt;在标签部分，添加&lt;br&gt;&lt;code&gt;layout: about&lt;/code&gt;&lt;br&gt;&lt;img src=&#34;/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/about2.jpg&#34; alt=&#34;about&#34;&gt;&lt;br&gt;这样，我们就会发现作者链接可以进入了。然后，我们可以在config-about模块，添加自己想要的功能。&lt;br&gt;例如我还添加了微信二维码&lt;br&gt;&lt;img src=&#34;/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/about3.jpg&#34; alt=&#34;about3&#34;&gt;&lt;br&gt;除此之外，fluid提供了丰富的图标库，可以在其doc中查询css的使用方法，这里不展开介绍了&lt;/p&gt;
&lt;h3 id=&#34;一些其他的骚操作&#34;&gt;&lt;a href=&#34;#一些其他的骚操作&#34; class=&#34;headerlink&#34; title=&#34;一些其他的骚操作&#34;&gt;&lt;/a&gt;一些其他的骚操作&lt;/h3&gt;&lt;p&gt;你还可以直接加一些新的链接，还是在navbar：menu部分里加，比如我就新加了一个tape提问箱，妈妈再也不用担心没人提问了&lt;br&gt;&lt;del&gt;笑死，自闭症患儿罢了，哪有人去你的博客提问啊&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;懒加载&#34;&gt;&lt;a href=&#34;#懒加载&#34; class=&#34;headerlink&#34; title=&#34;懒加载&#34;&gt;&lt;/a&gt;懒加载&lt;/h2&gt;&lt;p&gt;这个功能还是蛮有用的，单独开出来说一下&lt;br&gt;这个是可以让你的网页先加载，图片慢慢加载的功能，毕竟你的github服务器，如果等所有封面图都加载出来，黄花菜都凉了&lt;br&gt;实现方法：&lt;br&gt;config文件中lazyload：模块，enable设为true即可&lt;/p&gt;
&lt;h1 id=&#34;美观设置&#34;&gt;&lt;a href=&#34;#美观设置&#34; class=&#34;headerlink&#34; title=&#34;美观设置&#34;&gt;&lt;/a&gt;美观设置&lt;/h1&gt;&lt;p&gt;我个人很有自知之明，知道我的审美能力一般，这里仅提供一些方法上的指导&lt;/p&gt;
&lt;h2 id=&#34;背景图&#34;&gt;&lt;a href=&#34;#背景图&#34; class=&#34;headerlink&#34; title=&#34;背景图&#34;&gt;&lt;/a&gt;背景图&lt;/h2&gt;&lt;p&gt;（施工中——2022.4.22半夜一点半）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;（4.23更新）&lt;br&gt;背景图是博客的门面，选一张得体的背景图，可以极大的提高博客的氛围感，甚至可以增加阅读体验，以下介绍一下插入背景图的方法&lt;/p&gt;
&lt;h3 id=&#34;主页背景图&#34;&gt;&lt;a href=&#34;#主页背景图&#34; class=&#34;headerlink&#34; title=&#34;主页背景图&#34;&gt;&lt;/a&gt;主页背景图&lt;/h3&gt;&lt;p&gt;主页背景图，我推荐构图简单，色彩主调统一的图片，否则背景图上的字会显示不清。&lt;br&gt;修改背景图的方法很简单，在config文件中，搜索&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;banner_img&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个是所有背景图的关键词，因此你可以搜索到17个词&lt;br&gt;找到index模块下的banner_img&lt;br&gt;&lt;img src=&#34;/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/banner1.jpg&#34; alt=&#34;banner_img&#34;&gt;&lt;br&gt;其后面的目录是主题的source文件夹下的目录，只需要把你想要的图片放在这个目录下，并在config中替换即可&lt;/p&gt;
&lt;h3 id=&#34;其他背景图&#34;&gt;&lt;a href=&#34;#其他背景图&#34; class=&#34;headerlink&#34; title=&#34;其他背景图&#34;&gt;&lt;/a&gt;其他背景图&lt;/h3&gt;&lt;p&gt;emm，其他的背景图嘛，我希望你可以找到一套图，来和主页的背景映衬而且又各具特色，但是目前我还没有找到这种理想的图包。&lt;/p&gt;
&lt;h2 id=&#34;文章封面图&#34;&gt;&lt;a href=&#34;#文章封面图&#34; class=&#34;headerlink&#34; title=&#34;文章封面图&#34;&gt;&lt;/a&gt;文章封面图&lt;/h2&gt;&lt;p&gt;文章封面图的设置，是在文章的顶部内容栏中加入index_img: 一行&lt;br&gt;&lt;img src=&#34;/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/index_img1.jpg&#34; alt=&#34;index_img&#34;&gt;&lt;br&gt;然后，图片的位置是你的&lt;font color=&#34;Red&#34; size=&#34;6&#34;&gt;&lt;strong&gt;主题目录下&lt;/strong&gt;&lt;/font&gt;的source&amp;#x2F;img文件夹，这里我建议给你的每篇文章进行归档，方便整理。&lt;br&gt;这样，你的博客文章就有封面图了&lt;br&gt;&lt;img src=&#34;/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/index_img2.jpg&#34; alt=&#34;index_img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;图片加载动画&#34;&gt;&lt;a href=&#34;#图片加载动画&#34; class=&#34;headerlink&#34; title=&#34;图片加载动画&#34;&gt;&lt;/a&gt;图片加载动画&lt;/h2&gt;&lt;p&gt;如果我们打开了懒加载功能，那么我们就会看到图片加载时会有一个动画，这里的加载其实是一个gif，和图片一样，我们也是可以更换的，比如换成一个跑步的Mario&lt;br&gt;&lt;img src=&#34;/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/mario.gif&#34; alt=&#34;mario&#34;&gt;&lt;br&gt;下面介绍一下设置方法：&lt;br&gt;在config文件中找到lazyload模块，然后，找到loading_img&lt;br&gt;改为你在主题的source中的路径&lt;br&gt;&lt;img src=&#34;/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/loading.jpg&#34; alt=&#34;loading&#34;&gt;&lt;br&gt;以上，操作完成。&lt;/p&gt;
&lt;h2 id=&#34;关于导航栏的一些玩法&#34;&gt;&lt;a href=&#34;#关于导航栏的一些玩法&#34; class=&#34;headerlink&#34; title=&#34;关于导航栏的一些玩法&#34;&gt;&lt;/a&gt;关于导航栏的一些玩法&lt;/h2&gt;&lt;p&gt;导航栏，美化是一个可以深入折腾的天地，简单介绍几个玩法&lt;/p&gt;
&lt;h3 id=&#34;毛玻璃特效&#34;&gt;&lt;a href=&#34;#毛玻璃特效&#34; class=&#34;headerlink&#34; title=&#34;毛玻璃特效&#34;&gt;&lt;/a&gt;毛玻璃特效&lt;/h3&gt;&lt;p&gt;这个可以让你的导航栏显示成亚克力效果&lt;br&gt;只需要在config文件的navbar模块下，ground_glass设置为enable：true即可，下面还可以调节模糊的颜色，模糊程度等。&lt;br&gt;&lt;img src=&#34;/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/navbar1.jpg&#34; alt=&#34;ground_glass&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自己的名字&#34;&gt;&lt;a href=&#34;#自己的名字&#34; class=&#34;headerlink&#34; title=&#34;自己的名字&#34;&gt;&lt;/a&gt;自己的名字&lt;/h3&gt;&lt;p&gt;你可以在导航栏的左侧标注你的名字，具体操作类似上条：&lt;br&gt;&lt;code&gt;navbar--blog_title&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;菜单图标&#34;&gt;&lt;a href=&#34;#菜单图标&#34; class=&#34;headerlink&#34; title=&#34;菜单图标&#34;&gt;&lt;/a&gt;菜单图标&lt;/h3&gt;&lt;p&gt;菜单上的选项，你可以设置图标&lt;br&gt;方法如下：&lt;br&gt;在navbar–menu模块下，找到对应的菜单栏选项，在icon：位置，根据自己的需要，选择对应的css&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://hexo.fluid-dev.com/docs/icon/#%E5%86%85%E7%BD%AE%E7%A4%BE%E4%BA%A4%E5%9B%BE%E6%A0%87&#34;&gt;css库&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;关于标签栏的一些玩法&#34;&gt;&lt;a href=&#34;#关于标签栏的一些玩法&#34; class=&#34;headerlink&#34; title=&#34;关于标签栏的一些玩法&#34;&gt;&lt;/a&gt;关于标签栏的一些玩法&lt;/h2&gt;&lt;h3 id=&#34;标签栏中显示的图标&#34;&gt;&lt;a href=&#34;#标签栏中显示的图标&#34; class=&#34;headerlink&#34; title=&#34;标签栏中显示的图标&#34;&gt;&lt;/a&gt;标签栏中显示的图标&lt;/h3&gt;&lt;p&gt;我们当然想让自己的名字显示在浏览器标签栏上来代替那个&lt;del&gt;丑陋的&lt;/del&gt;Hexo标识，我们可以在config文件中的&lt;/p&gt;
&lt;figure class=&#34;highlight avrasm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs avrasm&#34;&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;favicon:&lt;/span&gt;&lt;br&gt;以及&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;apple_touch_icon:&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两项中，改变自己想要的图片，同样，图片的位置是&amp;#x2F;img&lt;br&gt;&lt;img src=&#34;/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/favicon.jpg&#34; alt=&#34;favicon&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;标签栏的名字&#34;&gt;&lt;a href=&#34;#标签栏的名字&#34; class=&#34;headerlink&#34; title=&#34;标签栏的名字&#34;&gt;&lt;/a&gt;标签栏的名字&lt;/h3&gt;&lt;p&gt;改了图标，我们当然想要把“Hexo”改变为自己想要的名字&lt;br&gt;&lt;font color=&#34;Red&#34; size=&#34;6&#34;&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/font&gt;，这个是要在blog目录下的config文件更改，不要在主题配置里找！&lt;br&gt;在config文件中，找到site模块&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/sitename.jpg&#34; alt=&#34;sitename&#34;&gt;&lt;br&gt;将其title设置为你想要的内容即可&lt;/p&gt;
&lt;h3 id=&#34;标签栏的连接符&#34;&gt;&lt;a href=&#34;#标签栏的连接符&#34; class=&#34;headerlink&#34; title=&#34;标签栏的连接符&#34;&gt;&lt;/a&gt;标签栏的连接符&lt;/h3&gt;&lt;p&gt;当你打开一个文章页面或其他页面时，你会发现：标签栏名称变为&lt;br&gt;&lt;code&gt;“页面名”-“站点名”&lt;/code&gt;&lt;br&gt;其实，中间的这个衔接符号，我们也是可以更改的，只需要在主题config文件中&lt;br&gt;找到“tab_title_separator:”模块&lt;br&gt;即可将其改为你想要的内容&lt;br&gt;&lt;img src=&#34;/2022/04/21/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%A3%85%E4%BF%AE%E5%8D%9A%E5%AE%A2/linker.jpg&#34; alt=&#34;linker&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;（4.24施工完毕，还有一些内容，回头再说了）&lt;/p&gt;
</content>
        <category term="博客" />
        <category term="记录" />
        <updated>2022-04-21T09:32:11.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/04/21/2022-4-21%E9%9A%8F%E7%AC%94/</id>
        <title>2022.4.21随笔</title>
        <link rel="alternate" href="http://example.com/2022/04/21/2022-4-21%E9%9A%8F%E7%AC%94/"/>
        <content type="html">&lt;h1 id=&#34;放在开头&#34;&gt;&lt;a href=&#34;#放在开头&#34; class=&#34;headerlink&#34; title=&#34;放在开头&#34;&gt;&lt;/a&gt;放在开头&lt;/h1&gt;&lt;p&gt;今天看了莫奈的画，画的是真好啊，这种感觉，是一种极度粗糙的精细，让人的感知和自然氤氲的美&lt;/p&gt;
&lt;h1 id=&#34;每日一句&#34;&gt;&lt;a href=&#34;#每日一句&#34; class=&#34;headerlink&#34; title=&#34;每日一句&#34;&gt;&lt;/a&gt;每日一句&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;洞外，夜色晴朗，天气寒冷，没在下雪，他透过树干之间望去，那里一片白茫茫，再抬眼从林间望去，只见这时天色明净，他呼吸时，空气进入肺部，寒冷彻骨。&lt;br&gt;  《丧钟为谁而鸣》第十九章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;丧钟为谁而鸣？丧钟就为你我而鸣。&lt;/p&gt;
&lt;h1 id=&#34;乱想time&#34;&gt;&lt;a href=&#34;#乱想time&#34; class=&#34;headerlink&#34; title=&#34;乱想time&#34;&gt;&lt;/a&gt;乱想time&lt;/h1&gt;&lt;p&gt;我想想吧，我也许真的需要好好歇会了，不是说烂着，而是让自己别想这么多了。大不了就是全部都重新开始&lt;br&gt;如果你现在就不敢重新开始，那你以后又怎么敢呢？&lt;br&gt;如果现在不敢做出自己想要做的改变，那你指望什么呢？卧龙凤雏之相帮，只有赤壁一战。&lt;br&gt;然而卧龙凤雏不世出，人生逆旅困境常在，怎能不靠自己？&lt;br&gt;谁未曾光荣负膺，谁又未曾垂垂老矣。&lt;br&gt;田野如今依旧在，而田野上方的青空，却永远沉埋在心里了。&lt;br&gt;&lt;img src=&#34;/2022/04/21/2022-4-21%E9%9A%8F%E7%AC%94/insert1.jpg&#34; alt=&#34;clear&#34;&gt;&lt;br&gt;&lt;font size=&#34;5&#34;&gt;&lt;strong&gt;最&lt;/strong&gt;&lt;/font&gt;富有的人，永远是有着，能把时间中的每一刻都化为永恒的“魔法”的人&lt;br&gt;就好像甘道夫&lt;br&gt;魔法总是每年一度的烟花，却是我们永远的记忆。&lt;br&gt;也许他也能征服恶龙，但是对我来说，和烟花没有区别。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你看懂了，那你就是没懂；如果你没懂，那你就是真没懂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哈哈，我也会说谜语了&lt;br&gt;晚安&lt;br&gt;&lt;img src=&#34;/2022/04/21/2022-4-21%E9%9A%8F%E7%AC%94/end.jpg&#34; alt=&#34;end&#34;&gt;&lt;/p&gt;
</content>
        <category term="随笔" />
        <updated>2022-04-20T16:01:19.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/04/20/2022-4-20%E9%9A%8F%E7%AC%94/</id>
        <title>2022.4.20随笔</title>
        <link rel="alternate" href="http://example.com/2022/04/20/2022-4-20%E9%9A%8F%E7%AC%94/"/>
        <content type="html">&lt;h1 id=&#34;我的第一篇胡思乱想&#34;&gt;&lt;a href=&#34;#我的第一篇胡思乱想&#34; class=&#34;headerlink&#34; title=&#34;我的第一篇胡思乱想&#34;&gt;&lt;/a&gt;我的第一篇胡思乱想&lt;/h1&gt;&lt;h2 id=&#34;每日一句&#34;&gt;&lt;a href=&#34;#每日一句&#34; class=&#34;headerlink&#34; title=&#34;每日一句&#34;&gt;&lt;/a&gt;每日一句&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我无法接受“如果知识代表危险，无知就是解决之道”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;胡思乱想&#34;&gt;&lt;a href=&#34;#胡思乱想&#34; class=&#34;headerlink&#34; title=&#34;胡思乱想&#34;&gt;&lt;/a&gt;胡思乱想&lt;/h2&gt;&lt;p&gt;嗯，是的，畏惧困难不是我的本色，舒适的生活，害怕这种生活的流逝，是一种正常的感情，却是不对的&lt;br&gt;如果死亡即将来临，那就放马过来吧&lt;br&gt;如果赌气能让我获得什么，那一定是多年后的追悔莫及。&lt;br&gt;然而，赌气何尝不是一种畏惧，畏惧行动的体现而已&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;实不相瞒，我的思绪到这里是枯竭的&lt;br&gt;我竭力想要说些什么，却不能将其明确的表达，这大概是博客和日记的区别&lt;br&gt;思绪断了，情绪却没有断开，我想，我是否需要重新找回年轻时的那个，敢于愤怒的人了呢&lt;br&gt;我想，亲情间时没有愤怒的，最恶劣的结果不过是驱逐&lt;br&gt;但是友谊，火一般的爱，点燃它们的，必然是那愤然的激情。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;愤怒是弱者的感情&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是啊，如果我们是孤立于世界的人，那我们必然不会去愤然&lt;br&gt;这是一种与我们无意义的情感&lt;br&gt;但是我们若是活在人间，就容不得那种傲然的存在了&lt;br&gt;一个人，对于人本身，他的理想的终点，是不是完美呢&lt;br&gt;我想这就是人文主义与理性主义的区别所在&lt;br&gt;以理性主义的角度思考人文主义的内涵，是一种奇妙但是容易跑偏的思路&lt;br&gt;反之，则是晦涩且难以认同的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;陷入了这种思考后，思路便生发了出来&lt;br&gt;如果说一个理性者，他的画作是超写实&lt;br&gt;那么人文关怀者，其作品必然是“不如”理性的&lt;br&gt;但是，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;真正的天才让人忘记才能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也许真正的人文主义，是无法被学习的&lt;br&gt;当一切人都毁灭时，人文主义将永远沉睡&lt;br&gt;理性主义将会活到下一次复苏&lt;br&gt;毕竟，理性主义的文艺，本身也不是为了“人”创作&lt;br&gt;是一种荷尔蒙的迸发，是一种活着的死亡&lt;br&gt;我不好支持或否定谁&lt;br&gt;我深深爱着二者&lt;br&gt;&lt;img src=&#34;/2022/04/20/2022-4-20%E9%9A%8F%E7%AC%94/img.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
</content>
        <category term="随笔" />
        <updated>2022-04-19T17:05:18.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/</id>
        <title>关于解决无法上传图片的问题</title>
        <link rel="alternate" href="http://example.com/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/"/>
        <content type="html">&lt;h1 id=&#34;问题&#34;&gt;&lt;a href=&#34;#问题&#34; class=&#34;headerlink&#34; title=&#34;问题&#34;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;事情是这样的，我在写博客的时候发现，我的图片即使以正确的格式引用，依旧会出现无法加载的问题&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/problem.jpg&#34; alt=&#34;问题如图&#34;&gt;&lt;/p&gt;
&lt;p&gt;众所周知，没有图片，你写个啥都没法直观地展示，就好像pre时用txt做演示，大家嘴上不说什么，心里肯定知道&lt;del&gt;你是忘了做ppt了&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;总之，根据我一晚上的研究成果，整理出来了几个解决图片无法显示的问题的方法供大家参考。&lt;/p&gt;
&lt;h1 id=&#34;解决方法&#34;&gt;&lt;a href=&#34;#解决方法&#34; class=&#34;headerlink&#34; title=&#34;解决方法&#34;&gt;&lt;/a&gt;解决方法&lt;/h1&gt;&lt;h2 id=&#34;目录&#34;&gt;&lt;a href=&#34;#目录&#34; class=&#34;headerlink&#34; title=&#34;目录&#34;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;p&gt;一共有这么几个方法，大家可以都试试，挑一个自己最喜欢的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;./#%E5%9B%BE%E5%BA%8A%E6%B3%95&#34;&gt;图床法&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github&amp;amp;gitee图床&lt;/li&gt;
&lt;li&gt;图床网站&lt;/li&gt;
&lt;li&gt;PicGo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;./#%E6%9C%AC%E5%9C%B0%E4%B8%8A%E4%BC%A0%E6%B3%95&#34;&gt;本地上传法&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;图床法&#34;&gt;&lt;a href=&#34;#图床法&#34; class=&#34;headerlink&#34; title=&#34;图床法&#34;&gt;&lt;/a&gt;图床法&lt;/h2&gt;&lt;p&gt;是这样的，一般来说，你的hexo博客在部署到服务器时，不会给你上传那些文章里链接的图片的，所以你的md文章里链接的图片一般情况下是无法上传的，自然就无法加载出来，但是你的图片如果是网络图片，直接链接网址，就可以通过联网加载的方式显示有如下几种方法&lt;/p&gt;
&lt;h3 id=&#34;Github-amp-Gitee仓库图床&#34;&gt;&lt;a href=&#34;#Github-amp-Gitee仓库图床&#34; class=&#34;headerlink&#34; title=&#34;Github&amp;amp;Gitee仓库图床&#34;&gt;&lt;/a&gt;Github&amp;amp;Gitee仓库图床&lt;/h3&gt;&lt;p&gt;这个的原理就是让你的公有仓库变成图床，白嫖存储空间&lt;/p&gt;
&lt;h4 id=&#34;操作流程&#34;&gt;&lt;a href=&#34;#操作流程&#34; class=&#34;headerlink&#34; title=&#34;操作流程&#34;&gt;&lt;/a&gt;操作流程&lt;/h4&gt;&lt;p&gt;具体来说，github和gitee方法相似，这里仅介绍github，gitee方法类似&lt;br&gt;gitee的访问速度会更快一点，github的容量没有限制，可以自己取舍&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注册一个github账户&lt;/li&gt;
&lt;li&gt;创建一个新的公有库，注意一定是&lt;strong&gt;公有&lt;/strong&gt;，否则外部无法访问&lt;/li&gt;
&lt;li&gt;在库存中创建一个文件夹&lt;br&gt; &lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/github.jpg&#34; alt=&#34;add_a_file&#34;&gt;&lt;/li&gt;
&lt;li&gt;把你的图片上传&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/upload.jpg&#34; alt=&#34;upload&#34;&gt;&lt;/li&gt;
&lt;li&gt;点击你的图片，复制地址框中的地址，注意要把bolb改为raw&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/raw.jpg&#34; alt=&#34;raw&#34;&gt;&lt;/li&gt;
&lt;li&gt;然后就可以在你的博客里引用这个地址了！&lt;blockquote&gt;
&lt;p&gt;你可以用cdn加速github，比如Jsdelivr，加速方法不在本文讨论范围&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;图床网站&#34;&gt;&lt;a href=&#34;#图床网站&#34; class=&#34;headerlink&#34; title=&#34;图床网站&#34;&gt;&lt;/a&gt;图床网站&lt;/h3&gt;&lt;p&gt;上面说的只是把github当作一个公开访问的图片网站，当然，市面上还有很多的专用图床网站，免费的付费的都有，这里介绍一个免费的网站&lt;a href=&#34;https://imgtu.com/&#34;&gt;imgtu.com&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开网站，上传图片&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/image.jpg&#34; alt=&#34;image&#34;&gt;&lt;blockquote&gt;
&lt;p&gt;注意不能挂梯子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;上传完成后，在底部链接栏，找到md链接，复制粘贴到你的文章插图位置就ok了&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/save_the_link.jpg&#34; alt=&#34;save_the_link&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个方法还是比较简单的,基本上有手就行，没手的话，&lt;del&gt;那你也别搞博客了&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&#34;PicGo&#34;&gt;&lt;a href=&#34;#PicGo&#34; class=&#34;headerlink&#34; title=&#34;PicGo&#34;&gt;&lt;/a&gt;PicGo&lt;/h3&gt;&lt;p&gt;除了以上介绍的两种方法，还有一个比较“软件化”的方案，就是&lt;a href=&#34;https://molunerfinn.com/PicGo/&#34;&gt;PicGo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PicGo是一个开源的软件，它的优点是方便快捷，不用登网站，操作比较easy，而且集成了很多平台。&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/PicGo.jpg&#34; alt=&#34;PicGo&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;操作方法&#34;&gt;&lt;a href=&#34;#操作方法&#34; class=&#34;headerlink&#34; title=&#34;操作方法&#34;&gt;&lt;/a&gt;操作方法&lt;/h4&gt;&lt;p&gt;还是以GitHub为例，首先我们进入&lt;strong&gt;图床设置&lt;/strong&gt;-&amp;gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/picgo_github.jpg&#34; alt=&#34;picgo_github&#34;&gt;&lt;br&gt;在对应的框里输入信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;存储路径是你的GitHub仓库里的路径，没有时会创建&lt;br&gt;自定义域名就是你可以用cdn加速访问图片，最后两级就是你的用户名和仓库名&lt;br&gt;下面介绍一下token的获取方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;获取Github-Token&#34;&gt;&lt;a href=&#34;#获取Github-Token&#34; class=&#34;headerlink&#34; title=&#34;获取Github Token&#34;&gt;&lt;/a&gt;获取Github Token&lt;/h5&gt;&lt;p&gt;首先从个人列表进入settings&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/token1.jpg&#34; alt=&#34;token1&#34;&gt;&lt;br&gt;然后进入最底部的developer settings&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/token2.jpg&#34; alt=&#34;token2&#34;&gt;&lt;br&gt;然后进入Personal access tokens，点generate new token&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/token3.jpg&#34; alt=&#34;token3&#34;&gt;&lt;br&gt;按照如下操作&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/token4.jpg&#34; alt=&#34;token4&#34;&gt;&lt;br&gt;生成后记得复制，这个token&lt;font color=&#34;Red&#34; size=&#34;6&#34;&gt;&lt;strong&gt;只会出现一次&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;至此，PicGo的使用介绍就完成了&lt;/p&gt;
&lt;h2 id=&#34;本地上传法&#34;&gt;&lt;a href=&#34;#本地上传法&#34; class=&#34;headerlink&#34; title=&#34;本地上传法&#34;&gt;&lt;/a&gt;本地上传法&lt;/h2&gt;&lt;h2 id=&#34;（施工中，累了，明天再说）&#34;&gt;&lt;a href=&#34;#（施工中，累了，明天再说）&#34; class=&#34;headerlink&#34; title=&#34;（施工中，累了，明天再说）&#34;&gt;&lt;/a&gt;（施工中，累了，明天再说）&lt;/h2&gt;&lt;p&gt;2022.4.20更新&lt;/p&gt;
&lt;p&gt;继续说本地上传法&lt;/p&gt;
&lt;p&gt;我们之前说过，本地的图片是不会被hexo上传的，其实这个说法不严谨&lt;br&gt;严格来说，是你凭空放一张图片，无法上传&lt;br&gt;但是，我们可以通过一个方法来上传本地图片，那就是hexo-asset-image。&lt;/p&gt;
&lt;h3 id=&#34;操作方法-1&#34;&gt;&lt;a href=&#34;#操作方法-1&#34; class=&#34;headerlink&#34; title=&#34;操作方法&#34;&gt;&lt;/a&gt;操作方法&lt;/h3&gt;&lt;p&gt;首先安装hexo-asset-image&lt;br&gt;&lt;code&gt;npm install https://github.com/CodeFalling/hexo-asset-image --save&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意，如果你安装速度慢的话，可以讲npm换为淘宝镜像，切换方法如下：&lt;br&gt;&lt;code&gt;npm config set registry https://registry.npm.taobao.org&lt;/code&gt;&lt;br&gt;安装完成后，我们要在_config.yml中作如下更改&lt;blockquote&gt;
&lt;p&gt; 将 post_asset_folder 设置为true&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/post.jpg&#34; alt=&#34;post&#34;&gt;&lt;br&gt;然后，每当我们新建一篇博客时，就会有一个同名文件夹在_post文件夹中生成了&lt;br&gt;我们把需要插入的图片放到这个文件夹里面，在文章中引用格式如下&lt;br&gt;&lt;code&gt;![图片描述]（./包名/NO.01.001.jpg）&lt;/code&gt;&lt;br&gt;&lt;font size=&#34;5&#34;&gt;或者&lt;/font&gt;&lt;br&gt;&lt;code&gt;![logo](logo.jpg)&lt;/code&gt;&lt;br&gt;就可以了，这个方法也是我在用的方法，非常方便，缺点是对服务器压力比较大。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;上述的几个方法，各有优缺点，可以结合自己的特点来使用&lt;br&gt;注意图片描述必须是全英文，否则无法显示图片&lt;br&gt;希望有所帮助&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="markdown" />
        <updated>2022-04-18T15:45:02.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/04/18/Hexo%E4%B8%BB%E9%A2%98%E6%A8%A1%E6%9D%BF%E5%88%87%E6%8D%A2/</id>
        <title>Hexo主题模板切换</title>
        <link rel="alternate" href="http://example.com/2022/04/18/Hexo%E4%B8%BB%E9%A2%98%E6%A8%A1%E6%9D%BF%E5%88%87%E6%8D%A2/"/>
        <content type="html">&lt;h1 id=&#34;下载主题&#34;&gt;&lt;a href=&#34;#下载主题&#34; class=&#34;headerlink&#34; title=&#34;下载主题&#34;&gt;&lt;/a&gt;下载主题&lt;/h1&gt;&lt;p&gt;首先，我们找一个比较好看的主题，比如我找的Fluid&lt;br&gt;&lt;img src=&#34;/2022/04/18/Hexo%E4%B8%BB%E9%A2%98%E6%A8%A1%E6%9D%BF%E5%88%87%E6%8D%A2/fluid.jpg&#34; alt=&#34;fluid网址：https://hexo.fluid-dev.com &#34;&gt;&lt;/p&gt;
&lt;p&gt;找到了这个主题的&lt;a href=&#34;https://github.com/fluid-dev/hexo-theme-fluid&#34;&gt;github网址&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;然后呢，我们需要在cmd中输入一行神秘代码&lt;br&gt;&lt;code&gt;git clone https://github.com/fluid-dev/hexo-theme-fluid themes\fluid&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;git clone 是在GitHub上下载的命令，中间的部分是这个主题的网址，最后是你在blog目录下需要把这个下载的主题存到的位置，系统会自动创建空的文件夹。&lt;/p&gt;
&lt;p&gt;然后静待下载，下载完成后，我们的工作就成功了一大半了！&lt;/p&gt;
&lt;h1 id=&#34;应用主题&#34;&gt;&lt;a href=&#34;#应用主题&#34; class=&#34;headerlink&#34; title=&#34;应用主题&#34;&gt;&lt;/a&gt;应用主题&lt;/h1&gt;&lt;p&gt;应用主题的方法很简单，只需要打开blog目录下的_config.yml文件，把倒数第二个部分的“theme：”改为你的主题所在文件夹的名字就OK了。&lt;br&gt;&lt;img src=&#34;/2022/04/18/Hexo%E4%B8%BB%E9%A2%98%E6%A8%A1%E6%9D%BF%E5%88%87%E6%8D%A2/config.jpg&#34; alt=&#34;这样&#34;&gt;&lt;/p&gt;
&lt;p&gt;别忘了部署到服务器！&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="markdown" />
        <updated>2022-04-18T12:56:34.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/10/28/string/</id>
        <title>string</title>
        <link rel="alternate" href="http://example.com/2021/10/28/string/"/>
        <content type="html"></content>
        <updated>2021-10-28T06:29:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/08/24/md%E8%AF%AD%E6%B3%95%E8%AF%95%E9%AA%8C/</id>
        <title>md语法试验</title>
        <link rel="alternate" href="http://example.com/2021/08/24/md%E8%AF%AD%E6%B3%95%E8%AF%95%E9%AA%8C/"/>
        <content type="html">&lt;h1 id=&#34;分层&#34;&gt;&lt;a href=&#34;#分层&#34; class=&#34;headerlink&#34; title=&#34;分层&#34;&gt;&lt;/a&gt;分层&lt;/h1&gt;&lt;h2 id=&#34;二级目录&#34;&gt;&lt;a href=&#34;#二级目录&#34; class=&#34;headerlink&#34; title=&#34;二级目录&#34;&gt;&lt;/a&gt;二级目录&lt;/h2&gt;&lt;h3 id=&#34;列表&#34;&gt;&lt;a href=&#34;#列表&#34; class=&#34;headerlink&#34; title=&#34;列表&#34;&gt;&lt;/a&gt;列表&lt;/h3&gt;&lt;h4 id=&#34;无序列表&#34;&gt;&lt;a href=&#34;#无序列表&#34; class=&#34;headerlink&#34; title=&#34;无序列表&#34;&gt;&lt;/a&gt;无序列表&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;小标&lt;/li&gt;
&lt;li&gt;无序&lt;/li&gt;
&lt;li&gt;各种符号都行&lt;ul&gt;
&lt;li&gt;第二层嵌套&lt;ul&gt;
&lt;li&gt;第n层嵌套&lt;h4 id=&#34;有序列表&#34;&gt;&lt;a href=&#34;#有序列表&#34; class=&#34;headerlink&#34; title=&#34;有序列表&#34;&gt;&lt;/a&gt;有序列表&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;有序列表&lt;/li&gt;
&lt;li&gt;第一行序号为起始序号&lt;/li&gt;
&lt;li&gt;即使后面序号错误也会顺序下排&lt;ol&gt;
&lt;li&gt;嵌套效果&lt;h2 id=&#34;内容&#34;&gt;&lt;a href=&#34;#内容&#34; class=&#34;headerlink&#34; title=&#34;内容&#34;&gt;&lt;/a&gt;内容&lt;/h2&gt;&lt;h3 id=&#34;引用说明&#34;&gt;&lt;a href=&#34;#引用说明&#34; class=&#34;headerlink&#34; title=&#34;引用说明&#34;&gt;&lt;/a&gt;引用说明&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;引用内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二级引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三级引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;代码块&#34;&gt;&lt;a href=&#34;#代码块&#34; class=&#34;headerlink&#34; title=&#34;代码块&#34;&gt;&lt;/a&gt;代码块&lt;/h3&gt;&lt;p&gt;&lt;code&gt;少量代码，单行使用，用·包裹&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;br&gt;大量代码多行使用，用三个·包裹&lt;br&gt;大量代码多行使用，用三个·包裹&lt;br&gt;大量代码多行使用，用三个·包裹&lt;br&gt;大量代码多行使用，用三个·包裹&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;链接&#34;&gt;&lt;a href=&#34;#链接&#34; class=&#34;headerlink&#34; title=&#34;链接&#34;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;h3 id=&#34;网页链接&#34;&gt;&lt;a href=&#34;#网页链接&#34; class=&#34;headerlink&#34; title=&#34;网页链接&#34;&gt;&lt;/a&gt;网页链接&lt;/h3&gt;&lt;h4 id=&#34;行内式&#34;&gt;&lt;a href=&#34;#行内式&#34; class=&#34;headerlink&#34; title=&#34;行内式&#34;&gt;&lt;/a&gt;行内式&lt;/h4&gt;&lt;p&gt;链接放在【】中，地址放在后面的小括号中，引号内是title&lt;br&gt;&lt;a href=&#34;www.baidu.com&#34; title=&#34;百度一下，你就知道&#34;&gt;百度&lt;/a&gt;&lt;br&gt;[百度]是一个搜索引擎&lt;/p&gt;
&lt;h4 id=&#34;参数式&#34;&gt;&lt;a href=&#34;#参数式&#34; class=&#34;headerlink&#34; title=&#34;参数式&#34;&gt;&lt;/a&gt;参数式&lt;/h4&gt;&lt;p&gt;链接在【】内，地址在冒号后面，title用引号&lt;br&gt;[百度]:&lt;a href=&#34;http://www.baidu.com/&#34;&gt;www.baidu.com&lt;/a&gt; “百度一下，你就知道”&lt;br&gt;[百度]是一个搜索引擎&lt;/p&gt;
&lt;h3 id=&#34;图片&#34;&gt;&lt;a href=&#34;#图片&#34; class=&#34;headerlink&#34; title=&#34;图片&#34;&gt;&lt;/a&gt;图片&lt;/h3&gt;&lt;p&gt;与链接基本一致，注意在引用图片时【】前加上！&lt;br&gt;&lt;img src=&#34;/2021/08/24/md%E8%AF%AD%E6%B3%95%E8%AF%95%E9%AA%8C/download\edge\13623636-6d878e3d3ef63825&#34; alt=&#34;logo&#34;&gt; “my logo”&lt;/p&gt;
&lt;h2 id=&#34;工整&#34;&gt;&lt;a href=&#34;#工整&#34; class=&#34;headerlink&#34; title=&#34;工整&#34;&gt;&lt;/a&gt;工整&lt;/h2&gt;&lt;h3 id=&#34;分割线&#34;&gt;&lt;a href=&#34;#分割线&#34; class=&#34;headerlink&#34; title=&#34;分割线&#34;&gt;&lt;/a&gt;分割线&lt;/h3&gt;&lt;h2 id=&#34;由-这三种之一的三个符号表示&#34;&gt;&lt;a href=&#34;#由-这三种之一的三个符号表示&#34; class=&#34;headerlink&#34; title=&#34;由* - _这三种之一的三个符号表示&#34;&gt;&lt;/a&gt;由* - _这三种之一的三个符号表示&lt;/h2&gt;&lt;p&gt;这就是分割线&lt;/p&gt;
&lt;h3 id=&#34;表格&#34;&gt;&lt;a href=&#34;#表格&#34; class=&#34;headerlink&#34; title=&#34;表格&#34;&gt;&lt;/a&gt;表格&lt;/h3&gt;&lt;p&gt;&amp;#x2F;&amp;#x2F;例子&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;123&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;234&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;345&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;abc&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bcd&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;cde&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;h3 id=&#34;强调字体&#34;&gt;&lt;a href=&#34;#强调字体&#34; class=&#34;headerlink&#34; title=&#34;强调字体&#34;&gt;&lt;/a&gt;强调字体&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;强调字体&lt;br&gt; 用星号包裹，如&lt;em&gt;md&lt;/em&gt;,&lt;strong&gt;md&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;转义&lt;br&gt; 用\&lt;/li&gt;
&lt;li&gt;删除线&lt;br&gt; &lt;del&gt;删除&lt;/del&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="markdown" />
        <updated>2021-08-24T07:32:52.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/08/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
        <title>我的第一篇博客</title>
        <link rel="alternate" href="http://example.com/2021/08/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
        <content type="html"></content>
        <updated>2021-08-24T03:27:11.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/08/24/hello-world/</id>
        <title>Hello World</title>
        <link rel="alternate" href="http://example.com/2021/08/24/hello-world/"/>
        <content type="html">&lt;p&gt;Welcome to &lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&#34;https://hexo.io/docs/&#34;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&#34;https://hexo.io/docs/troubleshooting.html&#34;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/hexojs/hexo/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Quick-Start&#34;&gt;&lt;a href=&#34;#Quick-Start&#34; class=&#34;headerlink&#34; title=&#34;Quick Start&#34;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&#34;Create-a-new-post&#34;&gt;&lt;a href=&#34;#Create-a-new-post&#34; class=&#34;headerlink&#34; title=&#34;Create a new post&#34;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;$ hexo new &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/writing.html&#34;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Run-server&#34;&gt;&lt;a href=&#34;#Run-server&#34; class=&#34;headerlink&#34; title=&#34;Run server&#34;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;$ hexo server&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/server.html&#34;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Generate-static-files&#34;&gt;&lt;a href=&#34;#Generate-static-files&#34; class=&#34;headerlink&#34; title=&#34;Generate static files&#34;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;$ hexo generate&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/generating.html&#34;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Deploy-to-remote-sites&#34;&gt;&lt;a href=&#34;#Deploy-to-remote-sites&#34; class=&#34;headerlink&#34; title=&#34;Deploy to remote sites&#34;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;$ hexo deploy&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/one-command-deployment.html&#34;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
        <updated>2021-08-24T03:26:25.442Z</updated>
    </entry>
</feed>
