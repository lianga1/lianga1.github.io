<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>意大利炮打友军 • Posts by &#34;操作系统&#34; category</title>
        <link>http://example.com</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Fri, 22 Mar 2024 17:44:11 +0800</pubDate>
        <lastBuildDate>Fri, 22 Mar 2024 17:44:11 +0800</lastBuildDate>
        <category>随笔</category>
        <category>技术</category>
        <category>大模型训练</category>
        <category>课题组</category>
        <category>笔记</category>
        <category>博客</category>
        <category>markdown</category>
        <category>Linux</category>
        <category>月历</category>
        <category>写作</category>
        <category>科幻</category>
        <category>世界观</category>
        <category>python</category>
        <category>WSL</category>
        <category>编译</category>
        <category>通信</category>
        <category>操作系统</category>
        <category>电赛</category>
        <category>周报</category>
        <category>神经网络</category>
        <category>pytorch</category>
        <category>记录</category>
        <item>
            <guid isPermalink="true">http://example.com/2024/03/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</guid>
            <title>操作系统学习笔记2：多线程</title>
            <link>http://example.com/2024/03/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</link>
            <category>技术</category>
            <category>博客</category>
            <category>操作系统</category>
            <pubDate>Fri, 22 Mar 2024 17:44:11 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;概述&#34;&gt;&lt;a href=&#34;#概述&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;现代软件大多支持多线程，相比于进程切换，线程共享代码段，数据段以及其他系统资源，但是拥有单独的寄存器和堆栈。&lt;br&gt;服务器采用多线程，可以减少创建进程的资源消耗，同时处理多个并发请求。&lt;/p&gt;
&lt;h3 id=&#34;优点&#34;&gt;&lt;a href=&#34;#优点&#34; class=&#34;headerlink&#34; title=&#34;优点&#34;&gt;&lt;/a&gt;优点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;响应性提高&lt;/li&gt;
&lt;li&gt;资源共享&lt;/li&gt;
&lt;li&gt;创建与切换更加经济&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多核编程&#34;&gt;&lt;a href=&#34;#多核编程&#34; class=&#34;headerlink&#34; title=&#34;多核编程&#34;&gt;&lt;/a&gt;多核编程&lt;/h2&gt;&lt;p&gt;并行性 vs 并发性&lt;br&gt;&lt;strong&gt;并行性&lt;/strong&gt;：是同时执行多个任务&lt;br&gt;&lt;strong&gt;并发性&lt;/strong&gt;：是让每个任务都能取得进展，在单处理器上也能实现&lt;/p&gt;
&lt;p&gt;Amdahl定理：程序中只有S%可以串行执行时，优化比&lt;br&gt;$$\eta \leq \frac{1}{S+\frac{1-S}{N}}$$&lt;/p&gt;
&lt;h3 id=&#34;挑战&#34;&gt;&lt;a href=&#34;#挑战&#34; class=&#34;headerlink&#34; title=&#34;挑战&#34;&gt;&lt;/a&gt;挑战&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;分析一个任务是否可以多核&lt;/li&gt;
&lt;li&gt;平衡某些任务适合单独核心执行&lt;/li&gt;
&lt;li&gt;数据分割&lt;/li&gt;
&lt;li&gt;数据依赖，避免同步性受损&lt;/li&gt;
&lt;li&gt;调试程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;并行类型&#34;&gt;&lt;a href=&#34;#并行类型&#34; class=&#34;headerlink&#34; title=&#34;并行类型&#34;&gt;&lt;/a&gt;并行类型&lt;/h3&gt;&lt;p&gt;分为数据并行（把一个任务的不同部分数据分配到不同核心）&lt;br&gt;和任务并行（把多个任务分配到不同核心）&lt;/p&gt;
&lt;h2 id=&#34;多线程模型&#34;&gt;&lt;a href=&#34;#多线程模型&#34; class=&#34;headerlink&#34; title=&#34;多线程模型&#34;&gt;&lt;/a&gt;多线程模型&lt;/h2&gt;&lt;p&gt;线程支持有两种方案：&lt;strong&gt;用户线程&lt;/strong&gt;和&lt;strong&gt;内核线程&lt;/strong&gt;。用户和内核线程有多重关系模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多对一模型&lt;ul&gt;
&lt;li&gt;一个内核对应多个用户线程&lt;/li&gt;
&lt;li&gt;线程被用户空间库管理&lt;/li&gt;
&lt;li&gt;效率高&lt;/li&gt;
&lt;li&gt;一个线程阻塞整个进程都会阻塞&lt;/li&gt;
&lt;li&gt;同时只有一个线程访问内核，不支持并行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一对一模型&lt;ul&gt;
&lt;li&gt;相比于多对一，一对一对并行的支持更好&lt;/li&gt;
&lt;li&gt;但是系统内核线程会影响性能&lt;/li&gt;
&lt;li&gt;Linux Windows都实现了这个模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多对多模型  &lt;ul&gt;
&lt;li&gt;对这个模型而言，创建多个用户线程同时保持高性能并发是可能的&lt;/li&gt;
&lt;li&gt;一个变体是允许多对多模型和一对一模型同时存在&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程库&#34;&gt;&lt;a href=&#34;#线程库&#34; class=&#34;headerlink&#34; title=&#34;线程库&#34;&gt;&lt;/a&gt;线程库&lt;/h2&gt;&lt;p&gt;  线程库的实现，有&lt;strong&gt;纯用户空间&lt;/strong&gt;实现：即所有数据都位于用户空间，调用库函数不涉及系统调用。也有&lt;strong&gt;内核实现&lt;/strong&gt;：库的代码和数据结构位于内核空间。POSIX线程库是在内核和用户空间都能实现的库，Windows则是只能在内核实现。JVM取决于宿主系统的库。&lt;br&gt;   POSIX和Windows的库中可以声明全局变量，供所有线程访问。本地数据存放在堆栈，每个线程有自己的堆栈&lt;br&gt;   线程分为同步和异步执行，同步执行的父线程需要等待子线程结束才能执行。&lt;br&gt;   对于Pthread函数，pthread_t tid，pthread_attr_t 是参数类型，pthread_attr_init是初始化函数，pthread_create(&amp;amp;tid,&amp;amp;attr,&amp;amp;func,int)创建线程，使用pthread_join()等待tid的线程结束，pthread_exit()用于退出进程&lt;/p&gt;
&lt;p&gt;   windows api使用windows.h库&lt;br&gt;   Java多线程使用Runnable接口的run方法实现。类需要实现Runnable接口的方法。&lt;br&gt;     在Java中，把一个有Runnable接口的类通过Thread类进行实现，调用thrd的start方法即可自动启动子线程。&lt;/p&gt;
&lt;h2 id=&#34;隐式多线程&#34;&gt;&lt;a href=&#34;#隐式多线程&#34; class=&#34;headerlink&#34; title=&#34;隐式多线程&#34;&gt;&lt;/a&gt;隐式多线程&lt;/h2&gt;&lt;p&gt;这是把创建线程交给编译器和runtime进行&lt;/p&gt;
&lt;h3 id=&#34;线程池&#34;&gt;&lt;a href=&#34;#线程池&#34; class=&#34;headerlink&#34; title=&#34;线程池&#34;&gt;&lt;/a&gt;线程池&lt;/h3&gt;&lt;p&gt;这个机制允许提前创建出来等待工作，如果池中没有可用线程，进程将会等待。&lt;br&gt;调用的方法类似QueueUserWorkItem（Function，Param，Flags）&lt;/p&gt;
&lt;h3 id=&#34;OpenMP&#34;&gt;&lt;a href=&#34;#OpenMP&#34; class=&#34;headerlink&#34; title=&#34;OpenMP&#34;&gt;&lt;/a&gt;OpenMP&lt;/h3&gt;&lt;p&gt;openmp使用#pragma 的宏命令来只是openmp识别并行区域来执行代码。&lt;br&gt;例如 &lt;/p&gt;
&lt;figure class=&#34;highlight inform7&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs inform7&#34;&gt;#pragma omp parallel for&lt;br&gt;for (i=0;i&amp;lt;N;i++)&lt;br&gt;&amp;#123;&lt;br&gt;  c&lt;span class=&#34;hljs-comment&#34;&gt;[i]&lt;/span&gt;=a&lt;span class=&#34;hljs-comment&#34;&gt;[i]&lt;/span&gt;+b&lt;span class=&#34;hljs-comment&#34;&gt;[i]&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;大中央调度&#34;&gt;&lt;a href=&#34;#大中央调度&#34; class=&#34;headerlink&#34; title=&#34;大中央调度&#34;&gt;&lt;/a&gt;大中央调度&lt;/h3&gt;&lt;p&gt;GCD，是MacOSX的一种技术，可以使用&lt;br&gt;^{}标记一个块，放置在调度队列（优先队列）来执行，分配给线程池的一个线程。&lt;/p&gt;
&lt;h2 id=&#34;多线程问题&#34;&gt;&lt;a href=&#34;#多线程问题&#34; class=&#34;headerlink&#34; title=&#34;多线程问题&#34;&gt;&lt;/a&gt;多线程问题&lt;/h2&gt;&lt;h3 id=&#34;关于fork和exec&#34;&gt;&lt;a href=&#34;#关于fork和exec&#34; class=&#34;headerlink&#34; title=&#34;关于fork和exec&#34;&gt;&lt;/a&gt;关于fork和exec&lt;/h3&gt;&lt;p&gt;系统调用中，fork有两种形式：fork可以让新进程&lt;strong&gt;复制所有进程&lt;/strong&gt;，或者只&lt;strong&gt;复制调用的进程&lt;/strong&gt;&lt;br&gt;exec会取代所有线程&lt;br&gt;所以如果fork完立刻调用exec，就只复制一个线程就行。 &lt;/p&gt;
&lt;h3 id=&#34;信号处理&#34;&gt;&lt;a href=&#34;#信号处理&#34; class=&#34;headerlink&#34; title=&#34;信号处理&#34;&gt;&lt;/a&gt;信号处理&lt;/h3&gt;&lt;p&gt;信号是一种UNIX用于通知进程的机制，分为&lt;strong&gt;同步信号&lt;/strong&gt;和&lt;strong&gt;异步信号&lt;/strong&gt;，同步信号发送到产生事件的同一进程，异步信号发送到其他进程。&lt;br&gt;信号处理程序分为&lt;strong&gt;缺省信号处理&lt;/strong&gt;和&lt;strong&gt;用户定义处理程序&lt;/strong&gt;。传递信号的函数为kill(pid,signal)。这规定了将信号传递到进程pid，事实上，信号传递到多线程中会有如下可能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传递到信号适用的thread&lt;/li&gt;
&lt;li&gt;传递到每个thread&lt;/li&gt;
&lt;li&gt;传递到某些thread&lt;/li&gt;
&lt;li&gt;传递到一个指定接受所有信号的thread&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于一个异步信号，因为信号只能处理一次，所以传递到第一个不拒绝的线程。&lt;br&gt;pthreads有一个函数：pthread_kill(pthread_t tid, int signal)&lt;/p&gt;
&lt;p&gt;Windows支持异步过程调用来模拟信号机制&lt;/p&gt;
&lt;h3 id=&#34;线程撤销&#34;&gt;&lt;a href=&#34;#线程撤销&#34; class=&#34;headerlink&#34; title=&#34;线程撤销&#34;&gt;&lt;/a&gt;线程撤销&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;目标线程&lt;/strong&gt;是被撤销的线程。撤销线程分为&lt;strong&gt;异步撤销&lt;/strong&gt;（立即撤销）和&lt;strong&gt;延迟撤销&lt;/strong&gt;（一个线程检查目标线程何时适合撤销）使用pthread_cancel来撤销。&lt;br&gt;默认pthread是延迟撤销的，创建线程也可以指定是否可以立刻撤销，如果不可以的话，pthread_testcancel()函数可以指定当前可以撤销。&lt;/p&gt;
&lt;h3 id=&#34;TLS&#34;&gt;&lt;a href=&#34;#TLS&#34; class=&#34;headerlink&#34; title=&#34;TLS&#34;&gt;&lt;/a&gt;TLS&lt;/h3&gt;&lt;p&gt;线程本地存储，可以让一个变量作为线程的全局变量，但是其他线程无法访问&lt;/p&gt;
&lt;h3 id=&#34;调度程序&#34;&gt;&lt;a href=&#34;#调度程序&#34; class=&#34;headerlink&#34; title=&#34;调度程序&#34;&gt;&lt;/a&gt;调度程序&lt;/h3&gt;&lt;p&gt;为了保证内核线程的动态调整，系统实现了一个名为轻量级进程LWP的数据结构，对用户线程，其体现为&lt;strong&gt;虚拟处理器&lt;/strong&gt;，每个LWP与一个内核线程相连（真正调用物理处理器）。一个进程的LWP数量有限。&lt;/p&gt;
&lt;p&gt;用户线程和内核的通信是通过调度器激活的机制进行的。&lt;br&gt;内核分配一组LWP给应用程序。应用程序将线程分配给LWP。&lt;br&gt;当有事件发生时，例如阻塞，内核出发回调给应用程序，应用程序中的线程库出发回调处理程序来保存阻塞进程的内容，然后分配一个新的线程给原本阻塞线程所在的LWP。阻塞结束后，也是通过回调程序来恢复运行。&lt;/p&gt;
&lt;h2 id=&#34;实例&#34;&gt;&lt;a href=&#34;#实例&#34; class=&#34;headerlink&#34; title=&#34;实例&#34;&gt;&lt;/a&gt;实例&lt;/h2&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2024/03/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</guid>
            <title>操作系统学习笔记1</title>
            <link>http://example.com/2024/03/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</link>
            <category>技术</category>
            <category>博客</category>
            <category>操作系统</category>
            <pubDate>Fri, 22 Mar 2024 15:52:53 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;内核设计&#34;&gt;&lt;a href=&#34;#内核设计&#34; class=&#34;headerlink&#34; title=&#34;内核设计&#34;&gt;&lt;/a&gt;内核设计&lt;/h2&gt;&lt;h3 id=&#34;微内核&#34;&gt;&lt;a href=&#34;#微内核&#34; class=&#34;headerlink&#34; title=&#34;微内核&#34;&gt;&lt;/a&gt;微内核&lt;/h3&gt;&lt;p&gt;微内核实现了一个功能较少，但是容易扩展的内核架构，客户程序和不同的功能之间提供&lt;strong&gt;消息传递&lt;/strong&gt;功能。除了必须内核功能外，功能组件都作为用户程序来实现。&lt;/p&gt;
&lt;h3 id=&#34;模块化&#34;&gt;&lt;a href=&#34;#模块化&#34; class=&#34;headerlink&#34; title=&#34;模块化&#34;&gt;&lt;/a&gt;模块化&lt;/h3&gt;&lt;p&gt;例如Solaris，有7种可以在运行时加载的模块。&lt;/p&gt;
&lt;h3 id=&#34;混合架构例子&#34;&gt;&lt;a href=&#34;#混合架构例子&#34; class=&#34;headerlink&#34; title=&#34;混合架构例子&#34;&gt;&lt;/a&gt;混合架构例子&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MacOS X，其Mach内核提供了远程过程调用，进程间通信等功能。BSD内核提供了POSIX库和文件系统等功能。&lt;/li&gt;
&lt;li&gt;iOS基于MacOSX，在系统的顶层提供了媒体服务用来支持图形化，Cocoa Touch库提供了有触屏硬件支持的Objective-C API&lt;/li&gt;
&lt;li&gt;Android由Linux内核，增加了一套Dalvik虚拟机和核心库。采用基于Java的Android API用来进行Java开发。运行在Dalvik虚拟机。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;调试&#34;&gt;&lt;a href=&#34;#调试&#34; class=&#34;headerlink&#34; title=&#34;调试&#34;&gt;&lt;/a&gt;调试&lt;/h2&gt;&lt;h3 id=&#34;D-Trace&#34;&gt;&lt;a href=&#34;#D-Trace&#34; class=&#34;headerlink&#34; title=&#34;D Trace&#34;&gt;&lt;/a&gt;D Trace&lt;/h3&gt;&lt;p&gt;使用D语言&lt;/p&gt;
&lt;p&gt;这个工具可以动态探测运行系统。跟踪系统调用以及指令的运行环境（用户or内核）&lt;br&gt;DTrace提供内核探头，拥有内核运行的编译器，生成安全指令。通过调用创建的内核探头，执行&lt;strong&gt;启用控制块&lt;/strong&gt;可以捕获一些数据。&lt;/p&gt;
&lt;h2 id=&#34;操作系统生成&#34;&gt;&lt;a href=&#34;#操作系统生成&#34; class=&#34;headerlink&#34; title=&#34;操作系统生成&#34;&gt;&lt;/a&gt;操作系统生成&lt;/h2&gt;&lt;p&gt;SYSGEN程序用于配置和生成操作系统。系统安装可以有三种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;极端定制：修改源代码，重新编译系统生成&lt;/li&gt;
&lt;li&gt;极端通用：系统描述表已定义好安装的模块，直接激活&lt;/li&gt;
&lt;li&gt;折中：选择模块进行链接来生成&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编程实例&#34;&gt;&lt;a href=&#34;#编程实例&#34; class=&#34;headerlink&#34; title=&#34;编程实例&#34;&gt;&lt;/a&gt;编程实例&lt;/h2&gt;&lt;h3 id=&#34;基础&#34;&gt;&lt;a href=&#34;#基础&#34; class=&#34;headerlink&#34; title=&#34;基础&#34;&gt;&lt;/a&gt;基础&lt;/h3&gt;&lt;p&gt;头文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linux&amp;#x2F;init.h&lt;/li&gt;
&lt;li&gt;linux&amp;#x2F;kernel.h&lt;/li&gt;
&lt;li&gt;linux.model.h&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重要函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;printk：存储到内核日志缓冲区，用dmesg访问，可以指定优先级&lt;/li&gt;
&lt;li&gt;module_init() &amp;amp; module_exit():用于注册模块。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编译好的内核模块，使用sudo insmod simple.ko来插入内核&lt;br&gt;使用sudo ramos simple来移除&lt;/p&gt;
&lt;h3 id=&#34;数据结构&#34;&gt;&lt;a href=&#34;#数据结构&#34; class=&#34;headerlink&#34; title=&#34;数据结构&#34;&gt;&lt;/a&gt;数据结构&lt;/h3&gt;&lt;p&gt;kmalloc：分配内核内存 &lt;/p&gt;
&lt;h1 id=&#34;进程&#34;&gt;&lt;a href=&#34;#进程&#34; class=&#34;headerlink&#34; title=&#34;进程&#34;&gt;&lt;/a&gt;进程&lt;/h1&gt;&lt;h2 id=&#34;进程概念&#34;&gt;&lt;a href=&#34;#进程概念&#34; class=&#34;headerlink&#34; title=&#34;进程概念&#34;&gt;&lt;/a&gt;进程概念&lt;/h2&gt;&lt;p&gt;进程是一个活动实体，包含代码、程序计数器、堆栈等。&lt;/p&gt;
&lt;h3 id=&#34;进程状态&#34;&gt;&lt;a href=&#34;#进程状态&#34; class=&#34;headerlink&#34; title=&#34;进程状态&#34;&gt;&lt;/a&gt;进程状态&lt;/h3&gt;&lt;p&gt;包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新进程：创建进程&lt;/li&gt;
&lt;li&gt;运行中：指令执行中&lt;/li&gt;
&lt;li&gt;等待：进程等待某个信号&lt;/li&gt;
&lt;li&gt;就绪：等待分配处理器&lt;/li&gt;
&lt;li&gt;终止：进程已完成&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程控制块&#34;&gt;&lt;a href=&#34;#进程控制块&#34; class=&#34;headerlink&#34; title=&#34;进程控制块&#34;&gt;&lt;/a&gt;进程控制块&lt;/h3&gt;&lt;p&gt;存储了一个进程的相关信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程状态&lt;/li&gt;
&lt;li&gt;程序计数器&lt;/li&gt;
&lt;li&gt;CPU寄存器&lt;/li&gt;
&lt;li&gt;CPU调度信息&lt;/li&gt;
&lt;li&gt;内存管理信息&lt;/li&gt;
&lt;li&gt;记账信息&lt;/li&gt;
&lt;li&gt;IO状态信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信息采用task_struct来表示，位于&amp;lt;linux&amp;#x2F;sched.h&amp;gt;&lt;br&gt;这个结构还存储了父进程、子进程等。&lt;br&gt;linux系统使用一个current_state结构来指向当前运行的进程。&lt;/p&gt;
&lt;h2 id=&#34;进程调度&#34;&gt;&lt;a href=&#34;#进程调度&#34; class=&#34;headerlink&#34; title=&#34;进程调度&#34;&gt;&lt;/a&gt;进程调度&lt;/h2&gt;&lt;p&gt;被加载运行的进程，进入&lt;strong&gt;任务队列&lt;/strong&gt;，在内存中等待运行的就是&lt;strong&gt;就绪队列&lt;/strong&gt;，等待IO的进程就放在对应的&lt;strong&gt;设备队列&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于整个流程，进程首先被创建，加入到就绪队列，之后被分配到CPU执行时，会有几种可能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发出IO请求，进入IO队列&lt;/li&gt;
&lt;li&gt;创建子进程，等待进程执行结束&lt;/li&gt;
&lt;li&gt;中断产生，被放回就绪队列&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;调度程序&#34;&gt;&lt;a href=&#34;#调度程序&#34; class=&#34;headerlink&#34; title=&#34;调度程序&#34;&gt;&lt;/a&gt;调度程序&lt;/h3&gt;&lt;p&gt;调度程序分为短期调度程序和长期调度程序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;短期调度程序针对的程序IO请求频繁，决策时间较短。&lt;/li&gt;
&lt;li&gt;长期调度程序的创建和杀死速度都较慢，因此有更多时间进行调度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;长期调度程序应选择IO于CPU密集型程序并重的进程。&lt;/p&gt;
&lt;h3 id=&#34;上下文切换&#34;&gt;&lt;a href=&#34;#上下文切换&#34; class=&#34;headerlink&#34; title=&#34;上下文切换&#34;&gt;&lt;/a&gt;上下文切换&lt;/h3&gt;&lt;p&gt;切换进程需要切换状态，典型时间为几毫秒。&lt;/p&gt;
&lt;h2 id=&#34;进程运行&#34;&gt;&lt;a href=&#34;#进程运行&#34; class=&#34;headerlink&#34; title=&#34;进程运行&#34;&gt;&lt;/a&gt;进程运行&lt;/h2&gt;&lt;p&gt;进程可以产生子进程，因此其组织结构是“树”。init进程是pid为1的进程&lt;/p&gt;
&lt;p&gt;重要的init子进程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kthreadd：创建额外内核进程。&lt;/li&gt;
&lt;li&gt;sshd：创建ssh连接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ps -el 列出进程&lt;/p&gt;
&lt;p&gt;fork（）函数创建一个子进程，子进程复制父进程的地址空间。它们都执行fork之后的内容。父进程fork（）返回子进程pid。子进程返回0。父进程可能会需要wait子进程。&lt;/p&gt;
&lt;p&gt;注意：windows的createProcess函数不继承父进程空间，而是需要制定一个特定程序。&lt;/p&gt;
&lt;p&gt;父进程可以调用wait，让子进程（僵尸进程）标识符得到释放。并且如果父进程先被终止，如果没有级连终止的要求下，init进程成为子进程的父。&lt;/p&gt;
&lt;h2 id=&#34;进程间通信&#34;&gt;&lt;a href=&#34;#进程间通信&#34; class=&#34;headerlink&#34; title=&#34;进程间通信&#34;&gt;&lt;/a&gt;进程间通信&lt;/h2&gt;&lt;p&gt;进程和其他进程通信称为协作。进程间协作机制称为IPC，IPC有两种基本模型：&lt;strong&gt;共享内存&lt;/strong&gt;和&lt;strong&gt;消息传递&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前，在多核系统上，共享内存机制由于高速缓存的不一致性，性能要差于消息传递。&lt;/p&gt;
&lt;h3 id=&#34;共享内存&#34;&gt;&lt;a href=&#34;#共享内存&#34; class=&#34;headerlink&#34; title=&#34;共享内存&#34;&gt;&lt;/a&gt;共享内存&lt;/h3&gt;&lt;p&gt;共享内存区域驻留在创建共享内存段的进程内。并且负责确保内存不会被同时写入。&lt;br&gt;共享内存有一个循环数组，用于共享进程发送信息的缓冲。&lt;/p&gt;
&lt;h3 id=&#34;消息传递&#34;&gt;&lt;a href=&#34;#消息传递&#34; class=&#34;headerlink&#34; title=&#34;消息传递&#34;&gt;&lt;/a&gt;消息传递&lt;/h3&gt;&lt;p&gt;消息传递需要至少提供send()和receive()两个操作。这样要考虑几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接or间接通信&lt;/li&gt;
&lt;li&gt;同步or异步&lt;/li&gt;
&lt;li&gt;自动or显式缓冲&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;通信的直接or间接&#34;&gt;&lt;a href=&#34;#通信的直接or间接&#34; class=&#34;headerlink&#34; title=&#34;通信的直接or间接&#34;&gt;&lt;/a&gt;通信的直接or间接&lt;/h4&gt;&lt;p&gt;采用直接通信的send()和receive()都需要直接指定接收方的地址，可能是对称或非对称的（非对称即接收方只能接受向其发送的进程信息）&lt;/p&gt;
&lt;p&gt;间接通信的方法则通过邮箱或端口来发送信息。通过把邮箱抽象为一个对象，这种方式有如下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享邮箱才能建立链路&lt;/li&gt;
&lt;li&gt;一个链路与多个进程关联&lt;/li&gt;
&lt;li&gt;两个进程之间可以有多个链路&lt;br&gt;但是一个消息只能被一个进程接收&lt;br&gt;邮箱可以为系统或进程拥有，进程拥有的邮箱必须要确定所有者和使用者。所有者只能接受信息，使用者只能发送信息。&lt;br&gt;进程被终止后，邮箱将消失。操作系统的邮箱是独立存在的。操作系统提供机制允许进程进行创建、删除、使用邮箱。而且通过系统调用，邮箱的所有权可以传给其他进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;同步&#34;&gt;&lt;a href=&#34;#同步&#34; class=&#34;headerlink&#34; title=&#34;同步&#34;&gt;&lt;/a&gt;同步&lt;/h4&gt;&lt;p&gt;关于消息传递的同步性，有以下四种可能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阻塞发送：发送消息后，直到被接收，进程都将阻塞&lt;/li&gt;
&lt;li&gt;非阻塞发送：发送后继续操作&lt;/li&gt;
&lt;li&gt;阻塞接收：阻塞进程，直到能接收信息&lt;/li&gt;
&lt;li&gt;非阻塞接收：接收进程收到有效信息或空信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缓存&#34;&gt;&lt;a href=&#34;#缓存&#34; class=&#34;headerlink&#34; title=&#34;缓存&#34;&gt;&lt;/a&gt;缓存&lt;/h4&gt;&lt;p&gt;缓存有三种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;零容量：要求发送者应当阻塞发送，因为消息队列不能等待。&lt;/li&gt;
&lt;li&gt;有限容量：最多n条消息可以等待，超过这个数量时进程将阻塞&lt;/li&gt;
&lt;li&gt;无限容量：进程不会阻塞发送&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;例子&#34;&gt;&lt;a href=&#34;#例子&#34; class=&#34;headerlink&#34; title=&#34;例子&#34;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;h4 id=&#34;posix&#34;&gt;&lt;a href=&#34;#posix&#34; class=&#34;headerlink&#34; title=&#34;posix&#34;&gt;&lt;/a&gt;posix&lt;/h4&gt;&lt;p&gt;posix通过内存映射文件共享内存，通过系统调用shm_open(name,O_CREAT|O_RDRW,0666)函数来创建共享内存对象。&lt;br&gt;创建成功后，函数ftruncate(shm_fd,4096)用于配置对象的大小（4096字节）&lt;br&gt;最后，mmap()函数用于将内存映射文件包含共享内存。返回ptr&lt;br&gt;使用sprintf()将message写入ptr。&lt;br&gt;最终消费者使用了共享内存后，调用shm_unlink()移除共享内存&lt;/p&gt;
&lt;h4 id=&#34;Mach&#34;&gt;&lt;a href=&#34;#Mach&#34; class=&#34;headerlink&#34; title=&#34;Mach&#34;&gt;&lt;/a&gt;Mach&lt;/h4&gt;&lt;p&gt;Mach通过消息传递（采用邮箱）实现&lt;br&gt;包括两个邮箱：内核邮箱和通知邮箱。调用msg_send()来发送消息，msg_receive()接收消息，msg_rpc()用来进行远程过程调用。&lt;br&gt;系统调用port_allocate()来创建新邮箱。可以指定最大排队信息，而且消息复制到邮箱中可以保证单个发送者的顺序统一。&lt;br&gt;发送消息如果遇到邮箱满了，可能会等待（无限或n毫秒），或者立刻返回，或者在操作系统中为一个线程存储一个消息。&lt;br&gt;邮箱可以形成一个邮箱集合来服务单个任务。port_status()用于返回指定邮箱的消息数量。&lt;br&gt;Mach本来是为了分布式系统设计，但是为了多核系统，Mach也可以使用虚拟内存，把发送者地址空间映射到接收者地址空间，来提高性能。&lt;/p&gt;
&lt;h4 id=&#34;Windows&#34;&gt;&lt;a href=&#34;#Windows&#34; class=&#34;headerlink&#34; title=&#34;Windows&#34;&gt;&lt;/a&gt;Windows&lt;/h4&gt;&lt;p&gt;windows支持多个操作环境或子系统，应用程序通过消息传递来通信。Windows使用ALPC工具来进行进程间通信。&lt;br&gt;类似于TCP连接，Windows内部也使用了&lt;strong&gt;连接端口&lt;/strong&gt;和&lt;strong&gt;通信端口&lt;/strong&gt;区分的思想。此外，通信回调机制允许服务器和客户端在等待时也能响应接受请求。&lt;br&gt;这个机制包含三种技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于小消息，采用消息队列进行存储，复制传递&lt;/li&gt;
&lt;li&gt;对于大消息（256字节+）：采用区段对象传递，为共享内存。&lt;/li&gt;
&lt;li&gt;对于巨大消息，采用API直接读写目标地址空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：ALPC不属于WinAPI&lt;/p&gt;
&lt;h3 id=&#34;服务器和客户端通信&#34;&gt;&lt;a href=&#34;#服务器和客户端通信&#34; class=&#34;headerlink&#34; title=&#34;服务器和客户端通信&#34;&gt;&lt;/a&gt;服务器和客户端通信&lt;/h3&gt;&lt;h4 id=&#34;套接字&#34;&gt;&lt;a href=&#34;#套接字&#34; class=&#34;headerlink&#34; title=&#34;套接字&#34;&gt;&lt;/a&gt;套接字&lt;/h4&gt;&lt;p&gt;详见计算机网络&lt;/p&gt;
&lt;h4 id=&#34;RPC&#34;&gt;&lt;a href=&#34;#RPC&#34; class=&#34;headerlink&#34; title=&#34;RPC&#34;&gt;&lt;/a&gt;RPC&lt;/h4&gt;&lt;p&gt;RPC：远程过程调用&lt;/p&gt;
&lt;p&gt;RPC和套接字不同，具有明确的数据结构。和本地调用过程相似，RPC隐藏了远程调用的通信细节。&lt;br&gt;对于每个远程过程，客户端都有一个存根用来调用服务器端口，并传递参数。返回值也可以传递回客户端。&lt;br&gt;通过时间戳，系统可以避免RPC被重复执行。而且还需要和客户确认RPC调用已经收到且执行。这要求客户机实现RPC调用的发送后接收到ACK信息。&lt;br&gt;使用交会服务程序，可以让客户请求RPC的端口灵活分配。&lt;br&gt;RPC可用于实现分布式文件系统&lt;/p&gt;
&lt;h4 id=&#34;管道&#34;&gt;&lt;a href=&#34;#管道&#34; class=&#34;headerlink&#34; title=&#34;管道&#34;&gt;&lt;/a&gt;管道&lt;/h4&gt;&lt;p&gt;管道是一个半双工的结构&lt;br&gt;分为&lt;strong&gt;普通管道&lt;/strong&gt;和&lt;strong&gt;命名管道&lt;/strong&gt;&lt;br&gt;UNIX上，管道采用pipe(int fd[])函数来创建，fd[0]为读出端，fd[1]为写入端&lt;br&gt;父子进程通信可以使用管道来进行，因为子进程继承了夫进程的管道，他们共享一个管道但是有两个fd。但是普通管道需要在同一机器上有父子关系的进程。&lt;/p&gt;
&lt;p&gt;命名管道：提供了一个双向的，不必须父子关系的，多进程通信的管道。&lt;br&gt;而且通信结束后，管道依旧存在。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于UNIX，管道通过mkfifo()系统调用来进行。通过调用对文件的读写函数来进行常规读写。只有显式删除才会关闭管道。这是半双工且单机通信的，除非用套接字来进行远程通信。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于Windows，CreateNamedPipe()支持创建全双工且支持远程的通信。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
