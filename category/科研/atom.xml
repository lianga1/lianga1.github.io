<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>意大利炮打友军 • Posts by &#34;科研&#34; category</title>
    <link href="http://example.com" />
    <updated>2024-03-30T12:54:57.000Z</updated>
    <category term="随笔" />
    <category term="技术" />
    <category term="大模型训练" />
    <category term="课题组" />
    <category term="笔记" />
    <category term="博客" />
    <category term="markdown" />
    <category term="Linux" />
    <category term="月历" />
    <category term="写作" />
    <category term="科幻" />
    <category term="世界观" />
    <category term="python" />
    <category term="WSL" />
    <category term="编译" />
    <category term="通信" />
    <category term="操作系统" />
    <category term="电赛" />
    <category term="周报" />
    <category term="神经网络" />
    <category term="pytorch" />
    <category term="记录" />
    <entry>
        <id>http://example.com/2024/03/30/DeepSpeed%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B9%8B%EF%BC%9Aelasticity/</id>
        <title>DeepSpeed代码阅读笔记之：elasticity</title>
        <link rel="alternate" href="http://example.com/2024/03/30/DeepSpeed%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B9%8B%EF%BC%9Aelasticity/"/>
        <content type="html">&lt;p&gt;本笔记是DeepSpeed代码阅读的第一篇笔记，本周的主要任务是阅读DeepSpeed python代码中的&lt;/p&gt;
&lt;h2 id=&#34;DeepSpeed-部署&#34;&gt;&lt;a href=&#34;#DeepSpeed-部署&#34; class=&#34;headerlink&#34; title=&#34;DeepSpeed 部署&#34;&gt;&lt;/a&gt;DeepSpeed 部署&lt;/h2&gt;&lt;p&gt;DeepSpeed 部署的过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装cuda与pytorch&lt;/li&gt;
&lt;li&gt;按照requirements文件夹安装依赖：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;pip install -r requirements/requirements-dev.txt &lt;br&gt;pip install -r requirements/requirements.txt&lt;br&gt;pip install -r requirements/requirements-sparse_attn.txt &lt;br&gt;pip install mpi4py&lt;br&gt;pip install --ignore-installed PyYAML&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意：attn文件里的triton 可能没有1.0版本&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;mpi4py可能需要通过conda安装&lt;/strong&gt;&lt;br&gt;3. 安装DeepSpeed:运行install.sh&lt;br&gt;&lt;strong&gt;注意：deepspeed需要全目录有rw权限&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;至此，安装已完成，可以使用DeepSpeedExample目录下的例程来测试。&lt;/p&gt;
&lt;h2 id=&#34;elasticity目录代码&#34;&gt;&lt;a href=&#34;#elasticity目录代码&#34; class=&#34;headerlink&#34; title=&#34;elasticity目录代码&#34;&gt;&lt;/a&gt;elasticity目录代码&lt;/h2&gt;&lt;p&gt;init中说明了本目录下有如下几个文件：&lt;/p&gt;
&lt;figure class=&#34;highlight ada&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ada&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;--elasticity&lt;/span&gt;&lt;br&gt;    |&lt;span class=&#34;hljs-comment&#34;&gt;-- __init__.py&lt;/span&gt;&lt;br&gt;    |&lt;span class=&#34;hljs-comment&#34;&gt;-- elasticity.py&lt;/span&gt;&lt;br&gt;    |&lt;span class=&#34;hljs-comment&#34;&gt;-- utils.py&lt;/span&gt;&lt;br&gt;    |&lt;span class=&#34;hljs-comment&#34;&gt;-- contants.py&lt;/span&gt;&lt;br&gt;    |&lt;span class=&#34;hljs-comment&#34;&gt;-- elastic_agent.py&lt;/span&gt;&lt;br&gt;    |&lt;span class=&#34;hljs-comment&#34;&gt;-- config.py&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;init-py&#34;&gt;&lt;a href=&#34;#init-py&#34; class=&#34;headerlink&#34; title=&#34;_init_.py&#34;&gt;&lt;/a&gt;_&lt;em&gt;init_&lt;/em&gt;.py&lt;/h2&gt;&lt;p&gt;这个代码主要是把目录下的文件中包含外部接口的文件进行引用，需要判断pytorch版本是否大于1.11，只有高于此版本才能使用DSElasticAgent类&lt;/p&gt;
&lt;h2 id=&#34;elasticity&#34;&gt;&lt;a href=&#34;#elasticity&#34; class=&#34;headerlink&#34; title=&#34;elasticity&#34;&gt;&lt;/a&gt;elasticity&lt;/h2&gt;&lt;p&gt;elasticity.py中给出了几个接口函数用来供外部调用&lt;/p&gt;
&lt;h3 id=&#34;compute-elastic-config&#34;&gt;&lt;a href=&#34;#compute-elastic-config&#34; class=&#34;headerlink&#34; title=&#34;compute_elastic_config&#34;&gt;&lt;/a&gt;compute_elastic_config&lt;/h3&gt;&lt;p&gt;调用弹性计算的核心代码，在DeepSpeedConfig类中会检查config是否有配置弹性计算，如果有会调用这个函数最终得到总batch——size和根据当前可用GPU数量得到的micro_batch(用于数据并行)（可选）&lt;/p&gt;
&lt;p&gt;elasticity 0.1版本和0.2版本分别调用不同的函数来得到final_batch_size。&lt;/p&gt;
&lt;p&gt;最后，通过检查micro_batch_size能否在数据并行中和batch_size 匹配(batch_size分在每个GPU上的大小能为micro_batch_size整倍)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;感觉这部分代码的去耦合做的很不好&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;elasticity-enabled&#34;&gt;&lt;a href=&#34;#elasticity-enabled&#34; class=&#34;headerlink&#34; title=&#34;elasticity_enabled&#34;&gt;&lt;/a&gt;elasticity_enabled&lt;/h3&gt;&lt;p&gt;检查ds_config的ELSASTICITY是否启用&lt;/p&gt;
&lt;h3 id=&#34;ensure-immutable-elastic-config&#34;&gt;&lt;a href=&#34;#ensure-immutable-elastic-config&#34; class=&#34;headerlink&#34; title=&#34;ensure_immutable_elastic_config&#34;&gt;&lt;/a&gt;ensure_immutable_elastic_config&lt;/h3&gt;&lt;p&gt;确保在资源管理器启用的情况下，根据环境变量中给Deepspeed的弹性配置和deepspeed自身的配置来检查是否匹配。&lt;/p&gt;
&lt;p&gt;除此之外，elasticity中内部还有关于micro_batch_size和total_batch_size计算实现的代码&lt;/p&gt;
&lt;h3 id=&#34;get-compatible-gpus-v01&#34;&gt;&lt;a href=&#34;#get-compatible-gpus-v01&#34; class=&#34;headerlink&#34; title=&#34;_get_compatible_gpus_v01&#34;&gt;&lt;/a&gt;_get_compatible_gpus_v01&lt;/h3&gt;&lt;p&gt;这个函数主要是得到batch_size和可用gpu数量。首先按照指定的micro_batches得到候选的batch_size。这个过程是给定的mrbs来找出最大合适的batch_size，存储在列表里。&lt;br&gt;在此之后，通过batch_sized候选列表中，按照偏好（大or小batch）得到最好的合适的（满足GPU数量和偏好）的batch_size。&lt;/p&gt;
&lt;figure class=&#34;highlight stata&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs stata&#34;&gt;注意：这里满足GPU数量是指mrbs可以被&lt;span class=&#34;hljs-keyword&#34;&gt;bs&lt;/span&gt;整除，同时在给定最大or最小GPU数量中。&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;get-compatible-gpus-v02&#34;&gt;&lt;a href=&#34;#get-compatible-gpus-v02&#34; class=&#34;headerlink&#34; title=&#34;_get_compatible_gpus_v02&#34;&gt;&lt;/a&gt;_get_compatible_gpus_v02&lt;/h3&gt;&lt;p&gt;在v01函数的基础上，这个函数根据bs的大小和GPU，根据节点的GPU数量来调整mrbs数量。以及根据数据并行dpsz来得到bs&amp;#x3D;bs*dpsz。&lt;/p&gt;
&lt;h2 id=&#34;utils&#34;&gt;&lt;a href=&#34;#utils&#34; class=&#34;headerlink&#34; title=&#34;utils&#34;&gt;&lt;/a&gt;utils&lt;/h2&gt;&lt;p&gt;仅负责检查torch版本是否匹配&lt;/p&gt;
&lt;h2 id=&#34;constant&#34;&gt;&lt;a href=&#34;#constant&#34; class=&#34;headerlink&#34; title=&#34;constant&#34;&gt;&lt;/a&gt;constant&lt;/h2&gt;&lt;p&gt;存储了必需的常数，类似ENABLE，DS最低版本，环境变量名。默认bs等。&lt;/p&gt;
&lt;h2 id=&#34;elastic-agent&#34;&gt;&lt;a href=&#34;#elastic-agent&#34; class=&#34;headerlink&#34; title=&#34;elastic_agent&#34;&gt;&lt;/a&gt;elastic_agent&lt;/h2&gt;&lt;p&gt;实现了pytorch LocalElasticAgent的子类。&lt;/p&gt;
&lt;h3 id=&#34;set-master-addr-port&#34;&gt;&lt;a href=&#34;#set-master-addr-port&#34; class=&#34;headerlink&#34; title=&#34;_set_master_addr_port&#34;&gt;&lt;/a&gt;_set_master_addr_port&lt;/h3&gt;&lt;p&gt;这个方法检查主节点的地址（端口），如果没有会自动生成&lt;/p&gt;
&lt;h3 id=&#34;start-workers&#34;&gt;&lt;a href=&#34;#start-workers&#34; class=&#34;headerlink&#34; title=&#34;_start_workers&#34;&gt;&lt;/a&gt;_start_workers&lt;/h3&gt;&lt;p&gt;这个方法使用torch distributed的WorkerGroup类作为参数，给每个worker设定必要的环境变量后，给关于本地worker数量的环境变量进行更新。同时指定必要的参数后，启动workers的进程。&lt;/p&gt;
&lt;h3 id=&#34;invoke-run&#34;&gt;&lt;a href=&#34;#invoke-run&#34; class=&#34;headerlink&#34; title=&#34;_invoke_run&#34;&gt;&lt;/a&gt;_invoke_run&lt;/h3&gt;&lt;p&gt;这个方法在worker启动后，每隔一段时间监控当前workerGroup的状态。&lt;br&gt;可能会遇到节点工作失败的状况，则会选择进行重启worker或者在全部失效时进行报错推出&lt;br&gt;在遇到节点加入或退出时，会进行记录并重启workers。&lt;/p&gt;
&lt;h2 id=&#34;config-py&#34;&gt;&lt;a href=&#34;#config-py&#34; class=&#34;headerlink&#34; title=&#34;config.py&#34;&gt;&lt;/a&gt;config.py&lt;/h2&gt;&lt;p&gt;这个文件主要定义了和elasticity相关的错误抛出，以及对config从ds_config到elasticity_config参数的变换和类型检测。&lt;/p&gt;
&lt;h2 id=&#34;问题&#34;&gt;&lt;a href=&#34;#问题&#34; class=&#34;headerlink&#34; title=&#34;问题&#34;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;为什么在elasticity文件中有预定义的HCN_LIST&lt;/li&gt;
&lt;li&gt;DS相比pytorch的Elasticity多了什么功能？&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="技术" />
        <category term="大模型训练" />
        <category term="课题组" />
        <category term="笔记" />
        <updated>2024-03-30T12:54:57.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/11/15/%E8%AF%BE%E9%A2%98%E7%BB%8423-11-15%E5%91%A8%E6%8A%A5/</id>
        <title>课题组23-11-15周报</title>
        <link rel="alternate" href="http://example.com/2023/11/15/%E8%AF%BE%E9%A2%98%E7%BB%8423-11-15%E5%91%A8%E6%8A%A5/"/>
        <content type="html">&lt;h1 id=&#34;实验关于fp16参数转换速度的问题&#34;&gt;&lt;a href=&#34;#实验关于fp16参数转换速度的问题&#34; class=&#34;headerlink&#34; title=&#34;实验关于fp16参数转换速度的问题&#34;&gt;&lt;/a&gt;实验关于fp16参数转换速度的问题&lt;/h1&gt;&lt;p&gt;本周进行了一个实验，主要用于观察pytorch中对张量转移的各种方法的性能差异。&lt;/p&gt;
&lt;h2 id=&#34;实验思路&#34;&gt;&lt;a href=&#34;#实验思路&#34; class=&#34;headerlink&#34; title=&#34;实验思路&#34;&gt;&lt;/a&gt;实验思路&lt;/h2&gt;&lt;h3 id=&#34;几种不同的传输方向&#34;&gt;&lt;a href=&#34;#几种不同的传输方向&#34; class=&#34;headerlink&#34; title=&#34;几种不同的传输方向&#34;&gt;&lt;/a&gt;几种不同的传输方向&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;cpu -&amp;gt; cpu&lt;/li&gt;
&lt;li&gt;cpu -&amp;gt; gpu&lt;/li&gt;
&lt;li&gt;gpu -&amp;gt; cpu&lt;/li&gt;
&lt;li&gt;gpu -&amp;gt; gpu&lt;h3 id=&#34;几种不同的数据&#34;&gt;&lt;a href=&#34;#几种不同的数据&#34; class=&#34;headerlink&#34; title=&#34;几种不同的数据&#34;&gt;&lt;/a&gt;几种不同的数据&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;fp32 -&amp;gt; fp32&lt;/li&gt;
&lt;li&gt;fp32 -&amp;gt; fp16&lt;br&gt;&lt;code&gt;调用half()函数，将fp32数据转换为fp16数据&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;fp16 -&amp;gt; fp16&lt;/li&gt;
&lt;li&gt;fp16 -&amp;gt; fp32&lt;br&gt;&lt;code&gt;调用float()函数，将fp16数据转换为fp32数据&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;目前第三、四种暂未测试&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;几种不同的传输方式&#34;&gt;&lt;a href=&#34;#几种不同的传输方式&#34; class=&#34;headerlink&#34; title=&#34;几种不同的传输方式&#34;&gt;&lt;/a&gt;几种不同的传输方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;copy_()&lt;/li&gt;
&lt;li&gt;to()&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实验过程&#34;&gt;&lt;a href=&#34;#实验过程&#34; class=&#34;headerlink&#34; title=&#34;实验过程&#34;&gt;&lt;/a&gt;实验过程&lt;/h2&gt;&lt;p&gt;准备一个目的地矩阵，一个源矩阵组（100个）。分别用随机数初始化。&lt;br&gt;循环100次，每次都遍历整个矩阵组，传输至对应的目的地矩阵。&lt;br&gt;测量总时长，对不同情况进行比较&lt;br&gt;代码模板如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; torch&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; time&lt;br&gt;tensor_cpu_1 = torch.rand(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;)&lt;br&gt;tensor_gpu_1 = torch.rand(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;).cuda()&lt;br&gt;tensor_cpu_2 = torch.rand(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;)&lt;br&gt;tensor_gpu_2 = torch.rand(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;).cuda()&lt;br&gt;time_sum = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;):&lt;br&gt;    start = time.time()&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;):&lt;br&gt;        tensor_cpu_1.copy_(tensor_cpu_2[i])&lt;br&gt;    end = time.time()&lt;br&gt;    time_sum += end - start&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;time for copy from cpu to cpu via _copy():&amp;quot;&lt;/span&gt;, time_sum)&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上代码展示了从cpu到cpu传输fp32的过程。最终展示了传输十万个1000*1000的矩阵所耗费的总时间。&lt;br&gt;经过实验，结果如下表所示：&lt;br&gt;记录数据如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;传输方向&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;传输方式&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数据类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;时间&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2.187&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.025&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5.855&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5.634&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9.663&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9.555&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9.876&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10.264&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8.895&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;13.649&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10.051&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7.320&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.605&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.029&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.484&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.591&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;注意，测试时间可能会有波动，尤其是在时间较短时，考虑到这种传输主要出现在gpu-&amp;gt;gpu中，不是主要考虑内容&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="技术" />
        <category term="课题组" />
        <category term="周报" />
        <category term="神经网络" />
        <category term="pytorch" />
        <updated>2023-11-15T08:09:06.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/10/22/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E4%BA%94%E5%91%A8%E5%AD%A6%E4%B9%A0/</id>
        <title>课题组第五周学习</title>
        <link rel="alternate" href="http://example.com/2023/10/22/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E4%BA%94%E5%91%A8%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;h1 id=&#34;高效直接访问主机内存的方法&#34;&gt;&lt;a href=&#34;#高效直接访问主机内存的方法&#34; class=&#34;headerlink&#34; title=&#34;高效直接访问主机内存的方法&#34;&gt;&lt;/a&gt;高效直接访问主机内存的方法&lt;/h1&gt;&lt;h2 id=&#34;现有方法存在的问题&#34;&gt;&lt;a href=&#34;#现有方法存在的问题&#34; class=&#34;headerlink&#34; title=&#34;现有方法存在的问题&#34;&gt;&lt;/a&gt;现有方法存在的问题&lt;/h2&gt;&lt;h3 id=&#34;通过加载后执行的方法&#34;&gt;&lt;a href=&#34;#通过加载后执行的方法&#34; class=&#34;headerlink&#34; title=&#34;通过加载后执行的方法&#34;&gt;&lt;/a&gt;通过加载后执行的方法&lt;/h3&gt;&lt;p&gt;面对巨大的模型参数规模，现有GPU的显存难以支撑大模型的训练。因此产生了一种通过加载后执行的方法，即将模型参数存储在主机内存中，每次训练时将参数加载到显存中，训练结束后将参数保存到主机内存中。这种方法的缺点是每次训练都需要将参数加载到显存中，这个过程会消耗大量的时间，例如在v100上，加载时间会是处理时间的4倍以上，导致训练效率低下。有一种异步加载方法，将加载层和训练层分开，训练层在训练时异步加载参数，但是这种方法会导致训练时的显存占用过高，而且层数较多时加载时间过高的劣势逐渐显现，优化并不明显。&lt;/p&gt;
&lt;h2 id=&#34;本文提出的方法&#34;&gt;&lt;a href=&#34;#本文提出的方法&#34; class=&#34;headerlink&#34; title=&#34;本文提出的方法&#34;&gt;&lt;/a&gt;本文提出的方法&lt;/h2&gt;&lt;h3 id=&#34;直接主机访问&#34;&gt;&lt;a href=&#34;#直接主机访问&#34; class=&#34;headerlink&#34; title=&#34;直接主机访问&#34;&gt;&lt;/a&gt;直接主机访问&lt;/h3&gt;&lt;p&gt;避开加载和训练不同步的问题，直接将cpu内存当作gpu的虚拟内存进行访问，这样避免了加载过程中占用gpu显存过高的问题，但是由于访问和数据流动要经过pcie总线，传输速度较慢。&lt;br&gt;因此，DHA使用了这样一种办法，使得其可以自适应选择访问方式，其可以通过直接主机访问和加载后执行两种方法进行训练，使得加载的时间可以隐藏在训练流的流水线中。&lt;/p&gt;
&lt;h3 id=&#34;多GPU方法&#34;&gt;&lt;a href=&#34;#多GPU方法&#34; class=&#34;headerlink&#34; title=&#34;多GPU方法&#34;&gt;&lt;/a&gt;多GPU方法&lt;/h3&gt;&lt;p&gt;对于多个GPU，由于GPU间通信效率要高于PCIE通信效率，因此可以将模型拆分成多个部分，分别存储在不同的GPU中，这样每次训练的加载都可以直接从其他GPU中加载，而不需要从主机内存中加载，这样可以减少加载时间。&lt;/p&gt;
&lt;h3 id=&#34;DeepPlan&#34;&gt;&lt;a href=&#34;#DeepPlan&#34; class=&#34;headerlink&#34; title=&#34;DeepPlan&#34;&gt;&lt;/a&gt;DeepPlan&lt;/h3&gt;&lt;p&gt;本文还提出了一个工具：用来为给定模型自动生成执行计划，过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对本地GPU显存和主机内存分析性能&lt;/li&gt;
&lt;li&gt;通过比较DHA和流水线方法的延迟差异来决定每一层的策略&lt;/li&gt;
&lt;li&gt;如果有多个GPU，则根据GPU数量平均划分模型&lt;/li&gt;
&lt;li&gt;协调将直接主机访问的执行和加载后执行的执行进行协调&lt;br&gt;本方案在部署时只需要进行一次执行。&lt;h2 id=&#34;原理分析&#34;&gt;&lt;a href=&#34;#原理分析&#34; class=&#34;headerlink&#34; title=&#34;原理分析&#34;&gt;&lt;/a&gt;原理分析&lt;/h2&gt;对于不同层，加载——执行策略与DHA策略的时间是不同的，&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;层&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;加载——执行策略&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;DHA策略&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;结论&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;卷积层&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;小规模差异不大&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;大规模较慢&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;推荐在较小卷积层使用DHA，同时加载较大卷积层等待直接执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;全连接层&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;加载快&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;执行慢&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;推荐在全连接层使用加载后执行，因为其需要频繁访问内存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;嵌入层&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;加载较慢&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;执行较快&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;推荐在嵌入层使用DHA，因为其规模较大，而层中一些参数的访问较少&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;归一化层&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;LayerNorm更好&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;BatchNorm更好&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;需要根据具体情况进行选择&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;产生差异的原因则是不同层对内存访问的需求不同，导致pcie访问次数不同，pcie作为瓶颈，访问次数越多，延迟越大。&lt;/p&gt;
&lt;h3 id=&#34;并行传输&#34;&gt;&lt;a href=&#34;#并行传输&#34; class=&#34;headerlink&#34; title=&#34;并行传输&#34;&gt;&lt;/a&gt;并行传输&lt;/h3&gt;&lt;p&gt;对于多GPU场景，将模型划分为多个部分后，采用并行传输策略：从内存并行地将模型传输到两个GPU，再从第二个GPU向第一个GPU传输，这样可以减少传输时间。&lt;br&gt;在此基础上，可以将GPU2——GPU1的传输变为流水线传输，这样可以进一步减少传输时间。&lt;br&gt;但是，由于CPU提供的PCIE总线数量限制，多GPU系统，例如8GPU也只能每两个GPU公用一组总线，因此多GPU的总线需要考虑总线拓扑。&lt;/p&gt;
&lt;h2 id=&#34;DeepPlan实现&#34;&gt;&lt;a href=&#34;#DeepPlan实现&#34; class=&#34;headerlink&#34; title=&#34;DeepPlan实现&#34;&gt;&lt;/a&gt;DeepPlan实现&lt;/h2&gt;&lt;h3 id=&#34;整体实现思路&#34;&gt;&lt;a href=&#34;#整体实现思路&#34; class=&#34;headerlink&#34; title=&#34;整体实现思路&#34;&gt;&lt;/a&gt;整体实现思路&lt;/h3&gt;&lt;p&gt;再进行训练前，deepPlan会根据每一层的性能分析，推理出当前层采用何种方式进行训练（加载——执行orDHA）。遍历完整个网络后，将根据策略直接执行训练。如果在多GPU系统中，DeepPlan还会根据GPU连连接拓扑，将模型划分为多个部分，应用并行传输方案。&lt;/p&gt;
&lt;h3 id=&#34;单层性能分析&#34;&gt;&lt;a href=&#34;#单层性能分析&#34; class=&#34;headerlink&#34; title=&#34;单层性能分析&#34;&gt;&lt;/a&gt;单层性能分析&lt;/h3&gt;&lt;p&gt;利用单层执行时间的统计数据，或者执行一次单层来得到每一层的性能数据。&lt;/p&gt;
&lt;h3 id=&#34;层间性能分析&#34;&gt;&lt;a href=&#34;#层间性能分析&#34; class=&#34;headerlink&#34; title=&#34;层间性能分析&#34;&gt;&lt;/a&gt;层间性能分析&lt;/h3&gt;&lt;p&gt;对于每层性能已经得到的情况。检查每一层切换策略到DHA后其获得的性能差异是否比加载后执行的停滞时间更短，如果是的话则切换为DHA。并且通过递归的方式检查每个层之前最多可以使用几个DHA来缩短总加载停滞时间。&lt;/p&gt;
&lt;h3 id=&#34;模型传输规划&#34;&gt;&lt;a href=&#34;#模型传输规划&#34; class=&#34;headerlink&#34; title=&#34;模型传输规划&#34;&gt;&lt;/a&gt;模型传输规划&lt;/h3&gt;&lt;p&gt;DeepPlan根据GPU拓扑，和PCIE交换机布局，避免并行加载的总线冲突，检查所选GPU是否使用NVLink，如果使用则直接进行并行传输，否则使用流水线传输。同时，根据并行传输带来的性能优化，重新规划每一层使用的策略。&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="课题组" />
        <category term="周报" />
        <category term="神经网络" />
        <category term="pytorch" />
        <updated>2023-10-22T15:36:49.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/10/13/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E5%9B%9B%E5%91%A8%E5%AD%A6%E4%B9%A0/</id>
        <title>课题组第四周学习</title>
        <link rel="alternate" href="http://example.com/2023/10/13/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E5%9B%9B%E5%91%A8%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;h1 id=&#34;ZeRO-Offload方法&#34;&gt;&lt;a href=&#34;#ZeRO-Offload方法&#34; class=&#34;headerlink&#34; title=&#34;ZeRO-Offload方法&#34;&gt;&lt;/a&gt;ZeRO-Offload方法&lt;/h1&gt;&lt;h2 id=&#34;提出背景&#34;&gt;&lt;a href=&#34;#提出背景&#34; class=&#34;headerlink&#34; title=&#34;提出背景&#34;&gt;&lt;/a&gt;提出背景&lt;/h2&gt;&lt;p&gt;对大模型训练来说，GPU显存对参数规模巨大的网络来说是一个瓶颈，然而CPU内存可以做到TB级别，因此可以考虑将一部分参数放在CPU上，而将需要频繁访问的参数放在GPU上，这样可以减少GPU显存的压力，提高训练速度。ZeRO-Offload提出了一种没有数据冗余的优化方法，可以将模型参数分布在CPU和GPU上，而且可以在CPU和GPU之间进行无缝的迁移。&lt;/p&gt;
&lt;h3 id=&#34;大模型传统方法&#34;&gt;&lt;a href=&#34;#大模型传统方法&#34; class=&#34;headerlink&#34; title=&#34;大模型传统方法&#34;&gt;&lt;/a&gt;大模型传统方法&lt;/h3&gt;&lt;p&gt;针对大模型需要的内存过大的问题，传统分为两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型分割：将模型分割成多个部分，每个部分在GPU上训练，然后将结果传递给下一个部分，&lt;/li&gt;
&lt;li&gt;流水线并行：将训练过程分为不同层，每个层分给不同的GPU，然后将结果传递给下一个GPU&lt;h2 id=&#34;增益来源&#34;&gt;&lt;a href=&#34;#增益来源&#34; class=&#34;headerlink&#34; title=&#34;增益来源&#34;&gt;&lt;/a&gt;增益来源&lt;/h2&gt;根据计算流程，CPU的计算量相比于GPU的$O(MB)$,只有$O(M)$，其中M是模型大小，B是批次大小。&lt;br&gt;这个过程中，ZeRO-Offload将前向与后向传播分配给了GPU，而标准化计算和权重更新等对模型大小有直接联系的计算则分配给了CPU。&lt;br&gt;在数据吞吐方面，cpu与gpu之间仅存在fp16数据的传输，相比与其他方法（例如L2L）有大幅度减少&lt;br&gt;在并行方面，随着计算节点的增加，CPU的计算资源会随着节点数量增加而增加&lt;br&gt;CPU计算通过提高并行性增加了效率&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对CPU作为计算瓶颈的解决方法&#34;&gt;&lt;a href=&#34;#对CPU作为计算瓶颈的解决方法&#34; class=&#34;headerlink&#34; title=&#34;对CPU作为计算瓶颈的解决方法&#34;&gt;&lt;/a&gt;对CPU作为计算瓶颈的解决方法&lt;/h3&gt;&lt;h4 id=&#34;对CPU计算的优化&#34;&gt;&lt;a href=&#34;#对CPU计算的优化&#34; class=&#34;headerlink&#34; title=&#34;对CPU计算的优化&#34;&gt;&lt;/a&gt;对CPU计算的优化&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;向量运算SIMD&lt;/li&gt;
&lt;li&gt;循环展开&lt;/li&gt;
&lt;li&gt;多核并行&lt;/li&gt;
&lt;li&gt;减少缓存抖动&lt;h4 id=&#34;延迟参数更新&#34;&gt;&lt;a href=&#34;#延迟参数更新&#34; class=&#34;headerlink&#34; title=&#34;延迟参数更新&#34;&gt;&lt;/a&gt;延迟参数更新&lt;/h4&gt;将参数更新延迟，重叠CPU与GPU计算。也就是说，在某一轮计算之后，此后每次gpu使用的优化器参数都是上一轮计算的结果，而不是这一轮计算的结果。，因此可以让cpu计算时间和gpu计算时间重叠。提高流水线负载率。&lt;h2 id=&#34;优化方法&#34;&gt;&lt;a href=&#34;#优化方法&#34; class=&#34;headerlink&#34; title=&#34;优化方法&#34;&gt;&lt;/a&gt;优化方法&lt;/h2&gt;ZeRO-Offload 同时利用CPU内存计算能力来优化。基于ZeRO优化方法，但是不是像原本多个GPU并行计算，并且通过联系收集器来进行并行。而是把这个通讯过程转化为与CPU的联系，相当于原本多个GPU同时做的工作，让单个GPU进行，每个阶段只进行原先一个GPU进行的工作，同时把其他GPU本应进行的计算状态经由内存进行存储。&lt;h3 id=&#34;ZeRO的工作&#34;&gt;&lt;a href=&#34;#ZeRO的工作&#34; class=&#34;headerlink&#34; title=&#34;ZeRO的工作&#34;&gt;&lt;/a&gt;ZeRO的工作&lt;/h3&gt;ZeRO，在ZeRO-Offload中使用ZeRO-2阶段，这个阶段你主要是分割模型状态和梯度。在ZeRO-2中，每个GPU都存储着所有参数，但是每轮训练只更新其中不包含的部分。&lt;br&gt;这个过程如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;每个GPU进行前馈，计算不同批次的损失。&lt;/li&gt;
&lt;li&gt;每个cpu进行反向传播，并且对每个有梯度的GPU使用减少梯度的算子进行平均。&lt;/li&gt;
&lt;li&gt;反向传播结束后，GPU使用其对应的梯度平均值对其部分参数和优化器状态进行更新。&lt;/li&gt;
&lt;li&gt;进行一次全收集，接收其他GPU计算的参数更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;ZeRO-Offload的工作&#34;&gt;&lt;a href=&#34;#ZeRO-Offload的工作&#34; class=&#34;headerlink&#34; title=&#34;ZeRO-Offload的工作&#34;&gt;&lt;/a&gt;ZeRO-Offload的工作&lt;/h3&gt;&lt;p&gt;ZeRO-Offload将训练修改为数据流图，主要优势：使得CPU计算量减少了几个数量级。保证CPU与GPU通讯最小化。最大限度节省内存。&lt;/p&gt;
&lt;h4 id=&#34;计算流图&#34;&gt;&lt;a href=&#34;#计算流图&#34; class=&#34;headerlink&#34; title=&#34;计算流图&#34;&gt;&lt;/a&gt;计算流图&lt;/h4&gt;&lt;p&gt;计算流图是一种图形化的表示，用于表示计算过程中的数据流动。在计算流图中，节点表示计算，边表示数据流动。&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lianga1/picGo_test/main/1.jpg&#34; alt=&#34;计算流图&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;减少CPU计算&#34;&gt;&lt;a href=&#34;#减少CPU计算&#34; class=&#34;headerlink&#34; title=&#34;减少CPU计算&#34;&gt;&lt;/a&gt;减少CPU计算&lt;/h4&gt;&lt;p&gt;ZeRO-Offload将前向与后向传播分配给了GPU，而标准化计算和权重更新等对模型大小有直接联系的计算则分配给了CPU。&lt;/p&gt;
&lt;h4 id=&#34;减少CPU与GPU通讯&#34;&gt;&lt;a href=&#34;#减少CPU与GPU通讯&#34; class=&#34;headerlink&#34; title=&#34;减少CPU与GPU通讯&#34;&gt;&lt;/a&gt;减少CPU与GPU通讯&lt;/h4&gt;&lt;p&gt;创建fp32区：为了避免fp32数据在pcie总线传输，需要将所有fp32数据放在一个设备上进行处理&lt;br&gt;p16分配：将fp16必须放在前馈与反向传播共同节点的位置，因为这两个节点之间的通信是较大的。&lt;br&gt;因此，ZeRO-Offload将fp16分配给GPU，而将fp32分配给CPU。&lt;/p&gt;
&lt;h4 id=&#34;减少内存&#34;&gt;&lt;a href=&#34;#减少内存&#34; class=&#34;headerlink&#34; title=&#34;减少内存&#34;&gt;&lt;/a&gt;减少内存&lt;/h4&gt;&lt;p&gt;将反向传播后得到的梯度，以及更新梯度所需要的计算和存储空间，写遭到CPU上，可以节省最多的显存使用。&lt;/p&gt;
&lt;h2 id=&#34;优势&#34;&gt;&lt;a href=&#34;#优势&#34; class=&#34;headerlink&#34; title=&#34;优势&#34;&gt;&lt;/a&gt;优势&lt;/h2&gt;&lt;h3 id=&#34;扩展性强&#34;&gt;&lt;a href=&#34;#扩展性强&#34; class=&#34;headerlink&#34; title=&#34;扩展性强&#34;&gt;&lt;/a&gt;扩展性强&lt;/h3&gt;&lt;p&gt;对于任何模型，其优化算法的优化参数对于ZeRO-Offload来说并不关键，其只是需要把fp32的计算内容单独放在CPU中。&lt;/p&gt;
&lt;h3 id=&#34;支持并行&#34;&gt;&lt;a href=&#34;#支持并行&#34; class=&#34;headerlink&#34; title=&#34;支持并行&#34;&gt;&lt;/a&gt;支持并行&lt;/h3&gt;&lt;p&gt;对多个GPU而言。ZeRO-Offload基于ZeRO-2，因此可以将分区的参数分配给多个GPU。&lt;/p&gt;
&lt;h3 id=&#34;模型并行&#34;&gt;&lt;a href=&#34;#模型并行&#34; class=&#34;headerlink&#34; title=&#34;模型并行&#34;&gt;&lt;/a&gt;模型并行&lt;/h3&gt;&lt;p&gt;ZeRO-Offload还可以用模型并行来实现更好的并行性。通过给cpu卸载梯度、优化器状态和优化器计算来和模型并行计算相适应。在这个情况下，首先，借由更难耗尽内存，可以使用更大的批次大小。其次，可以使用更多的GPU来进行模型并行计算。&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="课题组" />
        <category term="周报" />
        <category term="神经网络" />
        <category term="pytorch" />
        <updated>2023-10-13T10:23:34.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/09/30/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0/</id>
        <title>课题组第一周学习</title>
        <link rel="alternate" href="http://example.com/2023/09/30/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;h1 id=&#34;理论学习&#34;&gt;&lt;a href=&#34;#理论学习&#34; class=&#34;headerlink&#34; title=&#34;理论学习&#34;&gt;&lt;/a&gt;理论学习&lt;/h1&gt;&lt;h2 id=&#34;反向传播算法&#34;&gt;&lt;a href=&#34;#反向传播算法&#34; class=&#34;headerlink&#34; title=&#34;反向传播算法&#34;&gt;&lt;/a&gt;反向传播算法&lt;/h2&gt;&lt;p&gt;反向传播是一种基于有监督学习，用于根据误差和损失函数调整网络权重的算法。反向传播算法的核心思想是通过链式法则计算损失函数对于每个权重的梯度，然后使用梯度下降法更新权重。&lt;br&gt;过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先通过正向传播，根据输入数据得到一个网络的激励&lt;/li&gt;
&lt;li&gt;根据得到的激励与目标值计算损失函数&lt;/li&gt;
&lt;li&gt;根据损失函数，从输出层开始，依次沿着计算图反向计算每个权重的梯度&lt;/li&gt;
&lt;li&gt;根据得到的梯度调整权重&lt;br&gt;[1]	 &lt;a href=&#34;https://books.google.com/books/about/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8.html?id=2-PWvQEACAAJ&#34;&gt;深度学习入门: 基于Python的理论与实现[M]. 人民邮电出版社, 2018.(p.121,161)&lt;/a&gt;&lt;h2 id=&#34;前馈&#34;&gt;&lt;a href=&#34;#前馈&#34; class=&#34;headerlink&#34; title=&#34;前馈&#34;&gt;&lt;/a&gt;前馈&lt;/h2&gt;前馈神经网络是一种最简单的神经网络，它的每个神经元都是前一层神经元的输出。前馈神经网络的每个神经元都是前一层神经元的输出，因此它的输出不会反馈到输入层，这种网络结构也被称为前馈神经网络。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;卷积神经网络&#34;&gt;&lt;a href=&#34;#卷积神经网络&#34; class=&#34;headerlink&#34; title=&#34;卷积神经网络&#34;&gt;&lt;/a&gt;卷积神经网络&lt;/h2&gt;&lt;h3 id=&#34;卷积&#34;&gt;&lt;a href=&#34;#卷积&#34; class=&#34;headerlink&#34; title=&#34;卷积&#34;&gt;&lt;/a&gt;卷积&lt;/h3&gt;&lt;p&gt;卷积（convolution）是一种数学运算，主要应用于信号处理中对系统响应的计算。卷积运算可以将某个冲激响应针对任意输入进行计算，得到对应的响应结果。卷积运算的公式如下：&lt;br&gt;$$&lt;br&gt;y(t) &amp;#x3D; \int_{-\infty}^{\infty} x(a)h(t-a)da&lt;br&gt;$$&lt;br&gt;其中，$x(t)$为输入信号，$h(t)$为系统响应，$y(t)$为输出信号。&lt;/p&gt;
&lt;h3 id=&#34;二维离散卷积&#34;&gt;&lt;a href=&#34;#二维离散卷积&#34; class=&#34;headerlink&#34; title=&#34;二维离散卷积&#34;&gt;&lt;/a&gt;二维离散卷积&lt;/h3&gt;&lt;p&gt;对于图像处理来说，卷积需要用到二维矩阵的滑动窗口来进行卷积运算。二维离散卷积的公式如下：&lt;br&gt;$$&lt;br&gt;y(i,j) &amp;#x3D; \sum_{m&amp;#x3D;-\infty}^{\infty}\sum_{n&amp;#x3D;-\infty}^{\infty}x(m,n)h(i-m,j-n)&lt;br&gt;$$&lt;br&gt;其中，$x(m,n)$为输入图像，$h(i,j)$为卷积核，$y(i,j)$为输出图像。&lt;/p&gt;
&lt;h3 id=&#34;卷积神经网络-1&#34;&gt;&lt;a href=&#34;#卷积神经网络-1&#34; class=&#34;headerlink&#34; title=&#34;卷积神经网络&#34;&gt;&lt;/a&gt;卷积神经网络&lt;/h3&gt;&lt;p&gt;卷积神经网络（CNN）中，增加了卷积层和池化层。其可以从原本多维度的数据中提取欧氏距离较近的单元之间蕴含的信息。&lt;/p&gt;
&lt;h4 id=&#34;卷积层&#34;&gt;&lt;a href=&#34;#卷积层&#34; class=&#34;headerlink&#34; title=&#34;卷积层&#34;&gt;&lt;/a&gt;卷积层&lt;/h4&gt;&lt;p&gt;在卷积层中，当输入数据是图像时，卷积层会以三维数据形式接收数据，并以三维数据形式传输到下一层，输入输出数据称为特征图（feature map）。其中，卷积层的输入数据称为输入特征图（input feature map），输出数据称为输出特征图（output feature map）。&lt;/p&gt;
&lt;h4 id=&#34;CNN的处理流&#34;&gt;&lt;a href=&#34;#CNN的处理流&#34; class=&#34;headerlink&#34; title=&#34;CNN的处理流&#34;&gt;&lt;/a&gt;CNN的处理流&lt;/h4&gt;&lt;p&gt;针对一个图像，有三维的信息（长、宽、通道），同样，对这个图像进行处理的卷积核也是三维的。但是最终卷积得到的输出结果是二维的（每个通道卷积的结果加在一起）。在CNN中，针对多个卷积核，会得到多个二维的输出结果，这些输出结果会被叠加在一起，得到一个三维的输出结果。这个结果传递给下一层。同时，对多个数据，即批处理，卷积层将多个样本汇总成一次处理，传递中综合成四维的数据。&lt;/p&gt;
&lt;h4 id=&#34;池化层&#34;&gt;&lt;a href=&#34;#池化层&#34; class=&#34;headerlink&#34; title=&#34;池化层&#34;&gt;&lt;/a&gt;池化层&lt;/h4&gt;&lt;p&gt;池化层是一种降低数据大小的方法，它可以减少数据的大小，同时也可以防止过拟合。池化层的处理流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按照设定的步长，从输入数据中提取数据块&lt;/li&gt;
&lt;li&gt;例如MAX池化，将数据块中的最大值作为输出结果&lt;/li&gt;
&lt;li&gt;输出结果的规模即随步长变大而缩小&lt;br&gt;同时，池化层输入数据和输出数据的维度相同&lt;h2 id=&#34;循环神经网络&#34;&gt;&lt;a href=&#34;#循环神经网络&#34; class=&#34;headerlink&#34; title=&#34;循环神经网络&#34;&gt;&lt;/a&gt;循环神经网络&lt;/h2&gt;循环神经网络常用于nlp领域。它和前馈神经网络或CNN的主要区别在于循环神经网络（RNN）的隐藏层的输出不仅仅取决于当前的输入，还取决于前一时刻的隐藏层的输出。因此，RNN具有某种程度上的“记忆”能力。&lt;br&gt;另一个显著特征在于它们在每个网络层共享参数，RNN在每一层都共享相同的参数，这使得它们可以处理任意长度的序列。&lt;br&gt;然而，RNN在反向传播的过程中，梯度会随着时间的推移而消失或爆炸，这使得它们很难学习长期依赖关系。&lt;h2 id=&#34;注意力机制&#34;&gt;&lt;a href=&#34;#注意力机制&#34; class=&#34;headerlink&#34; title=&#34;注意力机制&#34;&gt;&lt;/a&gt;注意力机制&lt;/h2&gt;注意力机制可以增强神经网络输入数据中某些部分的权重，同时减弱其他部分的权重。&lt;br&gt;例如对一个翻译句子的网络，普通的逐个词翻译会在每一轮翻译过程中对单词序列依次提高注意力，也就是其注意力矩阵会是一个对角线上权值高的矩阵。但是在注意力机制下，每一轮翻译过程中，网络会根据上一轮的翻译结果，对输入句子中的某些部分进行更多的关注，即其权值的最大值不一定在对角线。从而提高翻译的连贯性。&lt;h2 id=&#34;并行计算&#34;&gt;&lt;a href=&#34;#并行计算&#34; class=&#34;headerlink&#34; title=&#34;并行计算&#34;&gt;&lt;/a&gt;并行计算&lt;/h2&gt;并行计算对计算任务进行拆分，将同时进行的计算任务分配到不同的计算单元上，从而提高计算速度。拆分的方式统称为并行方式，并行计算后的结果重新聚合的方式称为模型更新传递方式。&lt;br&gt;常见的并行方式有：&lt;/li&gt;
&lt;li&gt;数据并行：把数据集切分放到各个计算节点，并在哥哥节点之间传递模型参数&lt;/li&gt;
&lt;li&gt;模型并行：把模型切分放到各个计算节点，并在各个节点之间传递数据。一般把单个算子分配在配置相同的几个硬件上进行模型存储和计算。&lt;/li&gt;
&lt;li&gt;流水线并行：将模型切分成多个阶段，每个阶段在不同的计算节点上进行计算，每个阶段的计算结果传递给下一个阶段。&lt;br&gt;另外，如何更新模型参数也是并行计算的一个重要问题。在硬件组织架构方面，分为参数服务器架构和collective架构。在更新参数方面分为同步和异步更新&lt;a href=&#34;https://zhuanlan.zhihu.com/p/350501860&#34;&gt;参考内容&lt;/a&gt;&lt;h3 id=&#34;allreduce训练&#34;&gt;&lt;a href=&#34;#allreduce训练&#34; class=&#34;headerlink&#34; title=&#34;allreduce训练&#34;&gt;&lt;/a&gt;allreduce训练&lt;/h3&gt;在同步更新参数的训练中，利用AllReduce来整合不同worker的梯度数据。AllReduce有很多种类的实现，主要关注的问题在于不同worker之间传递信息的拓扑结构。例如，对于一个有4个worker的集群，有以下几种拓扑结构：&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ring&lt;/strong&gt;：每个worker只和相邻的worker通信&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mesh&lt;/strong&gt;：每个worker和所有其他worker通信，但是效率比较低。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Master-Worker&lt;/strong&gt;：一个worker作为master，其他worker作为worker，master和每个worker通信，worker之间不通信。&lt;br&gt;举N个worker的ring结构为例，考察这个结构的工作过程：&lt;/li&gt;
&lt;li&gt;每个worker计算自己的梯度&lt;/li&gt;
&lt;li&gt;每个worker把数据分成N份&lt;/li&gt;
&lt;li&gt;第k个worker把其第k份数据发送给第k+1个worker&lt;/li&gt;
&lt;li&gt;第k个worker把其第k-1份数据和第k-1个worker发送的数据整合，再发给下一个worker&lt;/li&gt;
&lt;li&gt;循环N次之后，每个worker包含最终整合结果的1份&lt;/li&gt;
&lt;li&gt;每个worker把自己的数据发送给下一个worker，收到数据后，每个worker的数据都是最终整合结果&lt;br&gt;这个结构的AllReduce的优势在于发送的数据量是固定的，和worker数量无关，避免了网络拥塞。&lt;a href=&#34;https://zhuanlan.zhihu.com/p/100012827&#34;&gt;参考内容&lt;/a&gt;&lt;h1 id=&#34;实践内容&#34;&gt;&lt;a href=&#34;#实践内容&#34; class=&#34;headerlink&#34; title=&#34;实践内容&#34;&gt;&lt;/a&gt;实践内容&lt;/h1&gt;&lt;h2 id=&#34;lenet5&#34;&gt;&lt;a href=&#34;#lenet5&#34; class=&#34;headerlink&#34; title=&#34;lenet5&#34;&gt;&lt;/a&gt;lenet5&lt;/h2&gt;lenet5是进行手写数字识别的CNN，它的结构如下：&lt;br&gt;输入层-&amp;gt;卷积层-&amp;gt;池化层-&amp;gt;卷积层-&amp;gt;池化层-&amp;gt;全连接层-&amp;gt;全连接层-&amp;gt;输出层（高斯连接）&lt;br&gt;与CNN不同的地方在于，LeNet使用sigmoid函数而非reLU函数。&lt;br&gt;lenet5网络的实现代码如下：&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;LeNet&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(LeNet, self).__init__()&lt;br&gt;        self.conv = nn.Sequential(&lt;br&gt;            nn.Conv2d(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;), &lt;span class=&#34;hljs-comment&#34;&gt;# in_channels, out_channels, kernel_size&lt;/span&gt;&lt;br&gt;            nn.Sigmoid(),&lt;br&gt;            nn.MaxPool2d(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;), &lt;span class=&#34;hljs-comment&#34;&gt;# kernel_size, stride&lt;/span&gt;&lt;br&gt;            nn.Conv2d(&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;),&lt;br&gt;            nn.Sigmoid(),&lt;br&gt;            nn.MaxPool2d(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        )&lt;br&gt;        self.fc = nn.Sequential(&lt;br&gt;            nn.Linear(&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;*&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;*&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;120&lt;/span&gt;),&lt;br&gt;            nn.Sigmoid(),&lt;br&gt;            nn.Linear(&lt;span class=&#34;hljs-number&#34;&gt;120&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;84&lt;/span&gt;),&lt;br&gt;            nn.Sigmoid(),&lt;br&gt;            nn.Linear(&lt;span class=&#34;hljs-number&#34;&gt;84&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;)&lt;br&gt;        )&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, img&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        feature = self.conv(img)&lt;br&gt;        output = self.fc(feature.view(img.shape[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;], -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;))&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; output&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
这个网络定义了两个部分，一个是卷积层，一个是全连接层。卷积层的输入是一个1通道的图像，输出是一个6通道的图像，卷积核的大小为5*5。全连接层的输入是16*4*4的数据，输出是10个类别的概率。&lt;h2 id=&#34;resnet&#34;&gt;&lt;a href=&#34;#resnet&#34; class=&#34;headerlink&#34; title=&#34;resnet&#34;&gt;&lt;/a&gt;resnet&lt;/h2&gt;ResNet主要用于解决深度神经网络无法找到更好的解的问题。在深层网络中，梯度消失或爆炸的问题会导致网络无法训练。ResNet通过引入残差块（residual block）来解决这个问题。ResNet将堆叠的几个隐含层作为一个残差块，用残差块拟合的函数从原本的f(x)变为f(x)+x。&lt;br&gt;[4]	&lt;a href=&#34;https://arxiv.org/abs/1512.03385&#34;&gt;HE K, ZHANG X, REN S, et al. Deep residual learning for image recognition[C]. Proceedings of the IEEE conference on computer vision and pattern recognition, 2016:770-778.&lt;/a&gt;&lt;br&gt;通过每个block中残差路径和shortcut路径的设计，可以实现不同的ResNet网络。事实证明，不断增加ResNet的深度，也没有发生解的退化，反而可以提高网络的性能。因此ResNet可以实现如下的网络结构：&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lianga1/picGo_test/main/3u8Wwj.png&#34; alt=&#34;resnet&#34;&gt;&lt;h3 id=&#34;实际部署&#34;&gt;&lt;a href=&#34;#实际部署&#34; class=&#34;headerlink&#34; title=&#34;实际部署&#34;&gt;&lt;/a&gt;实际部署&lt;/h3&gt;残差块类定义如下：&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Bottleneck&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;# 残差块定义&lt;/span&gt;&lt;br&gt;    extention = &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, inplanes, planes, stride, downsample=&lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(Bottleneck, self).__init__()&lt;br&gt;        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, stride=stride, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.bn1 = nn.BatchNorm2d(planes)&lt;br&gt;&lt;br&gt;        self.conv2 = nn.Conv2d(planes, planes, kernel_size=&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, stride=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, padding=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.bn2 = nn.BatchNorm2d(planes)&lt;br&gt;&lt;br&gt;        self.conv3 = nn.Conv2d(planes, planes * self.extention, kernel_size=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, stride=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.bn3 = nn.BatchNorm2d(planes * self.extention)&lt;br&gt;&lt;br&gt;        self.relu = nn.ReLU(inplace=&lt;span class=&#34;hljs-literal&#34;&gt;True&lt;/span&gt;)&lt;br&gt;&lt;br&gt;        self.downsample = downsample&lt;br&gt;        self.stride = stride&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
ResNet网络定义如下：&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ResNet50&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, block, layers, num_class&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        self.inplane = &lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(ResNet50, self).__init__()&lt;br&gt;&lt;br&gt;        self.block = block&lt;br&gt;        self.layers = layers&lt;br&gt;&lt;br&gt;        self.conv1 = nn.Conv2d(&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, self.inplane, kernel_size=&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;, stride=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, padding=&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.bn1 = nn.BatchNorm2d(self.inplane)&lt;br&gt;        self.relu = nn.ReLU()&lt;br&gt;        self.maxpool = nn.MaxPool2d(kernel_size=&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, stride=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, padding=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;&lt;br&gt;        self.stage1 = self.make_layer(self.block, &lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;, layers[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;], stride=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;        self.stage2 = self.make_layer(self.block, &lt;span class=&#34;hljs-number&#34;&gt;128&lt;/span&gt;, layers[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;], stride=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        self.stage3 = self.make_layer(self.block, &lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;, layers[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;], stride=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        self.stage4 = self.make_layer(self.block, &lt;span class=&#34;hljs-number&#34;&gt;512&lt;/span&gt;, layers[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;], stride=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;&lt;br&gt;        self.avgpool = nn.AvgPool2d(&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;)&lt;br&gt;        self.fc = nn.Linear(&lt;span class=&#34;hljs-number&#34;&gt;512&lt;/span&gt; * block.extention, num_class)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
在30Epoch后，在测试集的准确度达到了75%。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;BERT&#34;&gt;&lt;a href=&#34;#BERT&#34; class=&#34;headerlink&#34; title=&#34;BERT&#34;&gt;&lt;/a&gt;BERT&lt;/h2&gt;&lt;p&gt;BERT是基于Transformer的预训练模型，主要用于自然语言处理，它能够预测句子中缺失的词语。以及判断两个句子是不是上下句。&lt;br&gt;整个框架由多层transformer的encoder堆叠而成。encoder由注意力层和feed-forward层组成。&lt;br&gt;BERT中，输入由三种不同embedding组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;wordpiece embedding：由但词向量组成将单词划分成一组有限公共子词单元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;position embedaang：将单词的位置信息编码成特征向量。Transformer通过制定规则来构建一个position embedding&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;segment embedding：用于区分两个句子的向量表示。用于区别问答等非对称子句。&lt;/p&gt;
&lt;h3 id=&#34;网络结构&#34;&gt;&lt;a href=&#34;#网络结构&#34; class=&#34;headerlink&#34; title=&#34;网络结构&#34;&gt;&lt;/a&gt;网络结构&lt;/h3&gt;&lt;p&gt;BERT的主要结构是Transformer，Transformer结构如下图所示：&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lianga1/picGo_test/main/20200814234510853.jpg&#34; alt=&#34;transformer&#34;&gt;&lt;br&gt;其中左侧部分即为encoder部分。&lt;br&gt;encoder单元由一个multi-head-Attention + Layer Normalization + feedforword + Layer Normalization 叠加产生。&lt;br&gt;在比较大的BERT模型中，有24层encoder，每层有16个Attention，词向量维度1024。在较小情况下，有12层encoder，每层12个Attention，词向量维度768。&lt;br&gt;任何时候feed-forward大小都是词向量维度的4倍。&lt;/p&gt;
&lt;h4 id=&#34;Attention-Layer&#34;&gt;&lt;a href=&#34;#Attention-Layer&#34; class=&#34;headerlink&#34; title=&#34;Attention Layer&#34;&gt;&lt;/a&gt;Attention Layer&lt;/h4&gt;&lt;p&gt;这一层的输入是由X &amp;#x3D; (batch_size,max_len_embedding)构成的。&lt;br&gt;单个self-attention 计算过程是输入X分别和三个矩阵Wq,Wk,Wv相乘，得到Q,K,V。然后计算Q和K的点积，再除以$\sqrt{d_k}$，再经过softmax函数，得到attention矩阵。最后将attention矩阵和V相乘即加权求和，得到输出。&lt;br&gt;multi-head-Attention将多个不同的self-attention输出进行拼接，然后再乘以一个矩阵W0，得到最终的输出output_sum &amp;#x3D; (batch_size,max_len,n*w_length)这个结果再经过一个全连接层就是整个multi-head-Attention的输出。&lt;/p&gt;
&lt;h4 id=&#34;Layer-Normalization&#34;&gt;&lt;a href=&#34;#Layer-Normalization&#34; class=&#34;headerlink&#34; title=&#34;Layer Normalization&#34;&gt;&lt;/a&gt;Layer Normalization&lt;/h4&gt;&lt;p&gt;这个层相当于对每句话的embedding做归一化，所以用LN而非Batch Normalization&lt;/p&gt;
&lt;h4 id=&#34;BERT每一层的学习&#34;&gt;&lt;a href=&#34;#BERT每一层的学习&#34; class=&#34;headerlink&#34; title=&#34;BERT每一层的学习&#34;&gt;&lt;/a&gt;BERT每一层的学习&lt;/h4&gt;&lt;p&gt;从浅层到深层分别可以学习到surface，短语，语法和语义的信息。&lt;/p&gt;
&lt;h3 id=&#34;BERT的训练&#34;&gt;&lt;a href=&#34;#BERT的训练&#34; class=&#34;headerlink&#34; title=&#34;BERT的训练&#34;&gt;&lt;/a&gt;BERT的训练&lt;/h3&gt;&lt;p&gt;定义几个层的类如下：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Embedding：输入的embedding层，包括wordpiece embedding，position embedding，segment embedding&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Embeddings&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(Embeddings, self).__init__()&lt;br&gt;        self.seg_emb = nn.Embedding(n_segs, d_model)&lt;br&gt;        self.word_emb = nn.Embedding(max_vocab, d_model)&lt;br&gt;        self.pos_emb = nn.Embedding(max_len, d_model)&lt;br&gt;        self.norm = nn.LayerNorm(d_model)&lt;br&gt;        self.dropout = nn.Dropout(p_dropout)&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, x, seg&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        x: [batch, seq_len]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;        word_enc = self.word_emb(x)&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# positional embedding&lt;/span&gt;&lt;br&gt;        pos = torch.arange(x.shape[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;], dtype=torch.long, device=device)&lt;br&gt;        pos = pos.unsqueeze(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;).expand_as(x)&lt;br&gt;        pos_enc = self.pos_emb(pos)&lt;br&gt;&lt;br&gt;        seg_enc = self.seg_emb(seg)&lt;br&gt;        x = self.norm(word_enc + pos_enc + seg_enc)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; self.dropout(x)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# return: [batch, seq_len, d_model]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Multi-Head-Attention层&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ScaledDotProductAttention&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(ScaledDotProductAttention, self).__init__()&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, Q, K, V, attn_mask&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        scores = torch.matmul(Q, K.transpose(-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) / msqrt(d_k))&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# scores: [batch, n_heads, seq_len, seq_len]&lt;/span&gt;&lt;br&gt;        scores.masked_fill_(attn_mask, -&lt;span class=&#34;hljs-number&#34;&gt;1e9&lt;/span&gt;)&lt;br&gt;        attn = nn.Softmax(dim=-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)(scores)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# context: [batch, n_heads, seq_len, d_v]&lt;/span&gt;&lt;br&gt;        context = torch.matmul(attn, V)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; context&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MultiHeadAttention&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(MultiHeadAttention, self).__init__()&lt;br&gt;        self.W_Q = nn.Linear(d_model, d_k * n_heads, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.W_K = nn.Linear(d_model, d_k * n_heads, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.W_V = nn.Linear(d_model, d_v * n_heads, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.fc = nn.Linear(n_heads * d_v, d_model, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, Q, K, V, attn_mask&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        Q, K, V: [batch, seq_len, d_model]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        attn_mask: [batch, seq_len, seq_len]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;        batch = Q.size(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        split Q, K, V to per head formula: [batch, seq_len, n_heads, d_k]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        Convenient for matrix multiply opearation later&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        q, k, v: [batch, n_heads, seq_len, d_k / d_v]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;        per_Q = self.W_Q(Q).view(batch, -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, n_heads, d_k).transpose(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        per_K = self.W_K(K).view(batch, -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, n_heads, d_k).transpose(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        per_V = self.W_V(V).view(batch, -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, n_heads, d_v).transpose(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;&lt;br&gt;        attn_mask = attn_mask.unsqueeze(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;).repeat(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, n_heads, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# context: [batch, n_heads, seq_len, d_v]&lt;/span&gt;&lt;br&gt;        context = ScaledDotProductAttention()(per_Q, per_K, per_V, attn_mask)&lt;br&gt;        context = context.transpose(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;).contiguous().view(&lt;br&gt;            batch, -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, n_heads * d_v)&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# output: [batch, seq_len, d_model]&lt;/span&gt;&lt;br&gt;        output = self.fc(context)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; output&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其余层，包括FeedForword层和池化层&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;FeedForwardNetwork&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(FeedForwardNetwork, self).__init__()&lt;br&gt;        self.fc1 = nn.Linear(d_model, d_ff)&lt;br&gt;        self.fc2 = nn.Linear(d_ff, d_model)&lt;br&gt;        self.dropout = nn.Dropout(p_dropout)&lt;br&gt;        self.gelu = gelu&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, x&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        x = self.fc1(x)&lt;br&gt;        x = self.dropout(x)&lt;br&gt;        x = self.gelu(x)&lt;br&gt;        x = self.fc2(x)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; x&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Pooler&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(Pooler, self).__init__()&lt;br&gt;        self.fc = nn.Linear(d_model, d_model)&lt;br&gt;        self.tanh = nn.Tanh()&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, x&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        x: [batch, d_model] (first place output)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;        x = self.fc(x)&lt;br&gt;        x = self.tanh(x)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; x&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Encoder层和组合而成的BERT网络&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;EncoderLayer&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(EncoderLayer, self).__init__()&lt;br&gt;        self.norm1 = nn.LayerNorm(d_model)&lt;br&gt;        self.norm2 = nn.LayerNorm(d_model)&lt;br&gt;&lt;br&gt;        self.enc_attn = MultiHeadAttention()&lt;br&gt;        self.ffn = FeedForwardNetwork()&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, x, pad_mask&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        pre-norm&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        see more detail in https://openreview.net/pdf?id=B1x8anVFPr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        x: [batch, seq_len, d_model]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;        residual = x&lt;br&gt;        x = self.norm1(x)&lt;br&gt;        x = self.enc_attn(x, x, x, pad_mask) + residual&lt;br&gt;        residual = x&lt;br&gt;        x = self.norm2(x)&lt;br&gt;        x = self.ffn(x)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; x + residual&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;BERT&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, n_layers&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(BERT, self).__init__()&lt;br&gt;        self.embedding = Embeddings()&lt;br&gt;        self.encoders = nn.ModuleList([&lt;br&gt;            EncoderLayer() &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; _ &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;range&lt;/span&gt;(n_layers)&lt;br&gt;        ])&lt;br&gt;&lt;br&gt;        self.pooler = Pooler()&lt;br&gt;&lt;br&gt;        self.next_cls = nn.Linear(d_model, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        self.gelu = gelu&lt;br&gt;&lt;br&gt;        shared_weight = self.pooler.fc.weight&lt;br&gt;        self.fc = nn.Linear(d_model, d_model)&lt;br&gt;        self.fc.weight = shared_weight&lt;br&gt;&lt;br&gt;        shared_weight = self.embedding.word_emb.weight&lt;br&gt;        self.word_classifier = nn.Linear(d_model, max_vocab, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.word_classifier.weight = shared_weight&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, tokens, segments, masked_pos&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        output = self.embedding(tokens, segments)&lt;br&gt;        enc_self_pad_mask = get_pad_mask(tokens)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; layer &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; self.encoders:&lt;br&gt;            output = layer(output, enc_self_pad_mask)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# output: [batch, max_len, d_model]&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# NSP Task&lt;/span&gt;&lt;br&gt;        hidden_pool = self.pooler(output[:, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;])&lt;br&gt;        logits_cls = self.next_cls(hidden_pool)&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# Masked Language Model Task&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# masked_pos: [batch, max_pred] -&amp;gt; [batch, max_pred, d_model]&lt;/span&gt;&lt;br&gt;        masked_pos = masked_pos.unsqueeze(-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;).expand(-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, d_model)&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# h_masked: [batch, max_pred, d_model]&lt;/span&gt;&lt;br&gt;        h_masked = torch.gather(output, dim=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, index=masked_pos)&lt;br&gt;        h_masked = self.gelu(self.fc(h_masked))&lt;br&gt;        logits_lm = self.word_classifier(h_masked)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# logits_lm: [batch, max_pred, max_vocab]&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# logits_cls: [batch, 2]&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; logits_cls, logits_lm&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;batch-size设为6&lt;br&gt;训练300个Epoch&lt;br&gt;训练结果进行预测例句&lt;br&gt;结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight routeros&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs routeros&#34;&gt;========================================================&lt;br&gt;Masked data:&lt;br&gt;[&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[CLS]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[MASK]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[MASK]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;too&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;how&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;are&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;today&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;great&amp;#x27;&lt;/span&gt;,&lt;br&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;my&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;baseball&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;team&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;won&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;the&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;competition&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;]&lt;br&gt;BERT reconstructed:&lt;br&gt;[&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[CLS]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;nice&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;meet&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;too&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;how&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;are&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;today&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;great&amp;#x27;&lt;/span&gt;,&lt;br&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;my&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;baseball&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;team&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;won&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;the&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;competition&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;]&lt;br&gt;Original sentence:&lt;br&gt;[&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[CLS]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;nice&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;meet&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;too&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;how&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;are&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;today&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;great&amp;#x27;&lt;/span&gt;,&lt;br&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;my&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;baseball&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;team&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;won&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;the&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;competition&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;]&lt;br&gt;===============Next Sentence &lt;span class=&#34;hljs-attribute&#34;&gt;Prediction&lt;/span&gt;===============&lt;br&gt;Two sentences are continuous? &lt;span class=&#34;hljs-literal&#34;&gt;True&lt;/span&gt;&lt;br&gt;BERT predict: &lt;span class=&#34;hljs-literal&#34;&gt;True&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="技术" />
        <category term="课题组" />
        <category term="周报" />
        <category term="神经网络" />
        <category term="pytorch" />
        <updated>2023-09-30T11:51:44.000Z</updated>
    </entry>
</feed>
