{
    "version": "https://jsonfeed.org/version/1",
    "title": "意大利炮打友军 • All posts by \"笔记\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/03/30/DeepSpeed%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B9%8B%EF%BC%9Aelasticity/",
            "url": "http://example.com/2024/03/30/DeepSpeed%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B9%8B%EF%BC%9Aelasticity/",
            "title": "DeepSpeed代码阅读笔记之：elasticity",
            "date_published": "2024-03-30T12:54:57.000Z",
            "content_html": "<p>本笔记是DeepSpeed代码阅读的第一篇笔记，本周的主要任务是阅读DeepSpeed python代码中的</p>\n<h2 id=\"DeepSpeed-部署\"><a href=\"#DeepSpeed-部署\" class=\"headerlink\" title=\"DeepSpeed 部署\"></a>DeepSpeed 部署</h2><p>DeepSpeed 部署的过程如下：</p>\n<ol>\n<li>安装cuda与pytorch</li>\n<li>按照requirements文件夹安装依赖：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs bash\">pip install -r requirements/requirements-dev.txt <br>pip install -r requirements/requirements.txt<br>pip install -r requirements/requirements-sparse_attn.txt <br>pip install mpi4py<br>pip install --ignore-installed PyYAML<br></code></pre></td></tr></table></figure>\n<p><strong>注意：attn文件里的triton 可能没有1.0版本</strong><br><strong>mpi4py可能需要通过conda安装</strong><br>3. 安装DeepSpeed:运行install.sh<br><strong>注意：deepspeed需要全目录有rw权限</strong></p>\n<p>至此，安装已完成，可以使用DeepSpeedExample目录下的例程来测试。</p>\n<h2 id=\"elasticity目录代码\"><a href=\"#elasticity目录代码\" class=\"headerlink\" title=\"elasticity目录代码\"></a>elasticity目录代码</h2><p>init中说明了本目录下有如下几个文件：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\"><span class=\"hljs-comment\">--elasticity</span><br>    |<span class=\"hljs-comment\">-- __init__.py</span><br>    |<span class=\"hljs-comment\">-- elasticity.py</span><br>    |<span class=\"hljs-comment\">-- utils.py</span><br>    |<span class=\"hljs-comment\">-- contants.py</span><br>    |<span class=\"hljs-comment\">-- elastic_agent.py</span><br>    |<span class=\"hljs-comment\">-- config.py</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"init-py\"><a href=\"#init-py\" class=\"headerlink\" title=\"_init_.py\"></a>_<em>init_</em>.py</h2><p>这个代码主要是把目录下的文件中包含外部接口的文件进行引用，需要判断pytorch版本是否大于1.11，只有高于此版本才能使用DSElasticAgent类</p>\n<h2 id=\"elasticity\"><a href=\"#elasticity\" class=\"headerlink\" title=\"elasticity\"></a>elasticity</h2><p>elasticity.py中给出了几个接口函数用来供外部调用</p>\n<h3 id=\"compute-elastic-config\"><a href=\"#compute-elastic-config\" class=\"headerlink\" title=\"compute_elastic_config\"></a>compute_elastic_config</h3><p>调用弹性计算的核心代码，在DeepSpeedConfig类中会检查config是否有配置弹性计算，如果有会调用这个函数最终得到总batch——size和根据当前可用GPU数量得到的micro_batch(用于数据并行)（可选）</p>\n<p>elasticity 0.1版本和0.2版本分别调用不同的函数来得到final_batch_size。</p>\n<p>最后，通过检查micro_batch_size能否在数据并行中和batch_size 匹配(batch_size分在每个GPU上的大小能为micro_batch_size整倍)</p>\n<p><strong>感觉这部分代码的去耦合做的很不好</strong></p>\n<h3 id=\"elasticity-enabled\"><a href=\"#elasticity-enabled\" class=\"headerlink\" title=\"elasticity_enabled\"></a>elasticity_enabled</h3><p>检查ds_config的ELSASTICITY是否启用</p>\n<h3 id=\"ensure-immutable-elastic-config\"><a href=\"#ensure-immutable-elastic-config\" class=\"headerlink\" title=\"ensure_immutable_elastic_config\"></a>ensure_immutable_elastic_config</h3><p>确保在资源管理器启用的情况下，根据环境变量中给Deepspeed的弹性配置和deepspeed自身的配置来检查是否匹配。</p>\n<p>除此之外，elasticity中内部还有关于micro_batch_size和total_batch_size计算实现的代码</p>\n<h3 id=\"get-compatible-gpus-v01\"><a href=\"#get-compatible-gpus-v01\" class=\"headerlink\" title=\"_get_compatible_gpus_v01\"></a>_get_compatible_gpus_v01</h3><p>这个函数主要是得到batch_size和可用gpu数量。首先按照指定的micro_batches得到候选的batch_size。这个过程是给定的mrbs来找出最大合适的batch_size，存储在列表里。<br>在此之后，通过batch_sized候选列表中，按照偏好（大or小batch）得到最好的合适的（满足GPU数量和偏好）的batch_size。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stata\">注意：这里满足GPU数量是指mrbs可以被<span class=\"hljs-keyword\">bs</span>整除，同时在给定最大or最小GPU数量中。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"get-compatible-gpus-v02\"><a href=\"#get-compatible-gpus-v02\" class=\"headerlink\" title=\"_get_compatible_gpus_v02\"></a>_get_compatible_gpus_v02</h3><p>在v01函数的基础上，这个函数根据bs的大小和GPU，根据节点的GPU数量来调整mrbs数量。以及根据数据并行dpsz来得到bs&#x3D;bs*dpsz。</p>\n<h2 id=\"utils\"><a href=\"#utils\" class=\"headerlink\" title=\"utils\"></a>utils</h2><p>仅负责检查torch版本是否匹配</p>\n<h2 id=\"constant\"><a href=\"#constant\" class=\"headerlink\" title=\"constant\"></a>constant</h2><p>存储了必需的常数，类似ENABLE，DS最低版本，环境变量名。默认bs等。</p>\n<h2 id=\"elastic-agent\"><a href=\"#elastic-agent\" class=\"headerlink\" title=\"elastic_agent\"></a>elastic_agent</h2><p>实现了pytorch LocalElasticAgent的子类。</p>\n<h3 id=\"set-master-addr-port\"><a href=\"#set-master-addr-port\" class=\"headerlink\" title=\"_set_master_addr_port\"></a>_set_master_addr_port</h3><p>这个方法检查主节点的地址（端口），如果没有会自动生成</p>\n<h3 id=\"start-workers\"><a href=\"#start-workers\" class=\"headerlink\" title=\"_start_workers\"></a>_start_workers</h3><p>这个方法使用torch distributed的WorkerGroup类作为参数，给每个worker设定必要的环境变量后，给关于本地worker数量的环境变量进行更新。同时指定必要的参数后，启动workers的进程。</p>\n<h3 id=\"invoke-run\"><a href=\"#invoke-run\" class=\"headerlink\" title=\"_invoke_run\"></a>_invoke_run</h3><p>这个方法在worker启动后，每隔一段时间监控当前workerGroup的状态。<br>可能会遇到节点工作失败的状况，则会选择进行重启worker或者在全部失效时进行报错推出<br>在遇到节点加入或退出时，会进行记录并重启workers。</p>\n<h2 id=\"config-py\"><a href=\"#config-py\" class=\"headerlink\" title=\"config.py\"></a>config.py</h2><p>这个文件主要定义了和elasticity相关的错误抛出，以及对config从ds_config到elasticity_config参数的变换和类型检测。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ol>\n<li>为什么在elasticity文件中有预定义的HCN_LIST</li>\n<li>DS相比pytorch的Elasticity多了什么功能？</li>\n</ol>\n",
            "tags": [
                "技术",
                "大模型训练",
                "课题组",
                "笔记"
            ]
        }
    ]
}