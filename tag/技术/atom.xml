<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>意大利炮打友军 • Posts by &#34;技术&#34; tag</title>
    <link href="http://example.com" />
    <updated>2024-03-15T02:05:10.000Z</updated>
    <category term="随笔" />
    <category term="技术" />
    <category term="博客" />
    <category term="markdown" />
    <category term="python" />
    <category term="月历" />
    <category term="写作" />
    <category term="科幻" />
    <category term="世界观" />
    <category term="WSL" />
    <category term="Linux" />
    <category term="编译" />
    <category term="电赛" />
    <category term="记录" />
    <category term="周报" />
    <category term="课题组" />
    <category term="神经网络" />
    <category term="pytorch" />
    <entry>
        <id>http://example.com/2024/03/15/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</id>
        <title>Linux学习笔记2</title>
        <link rel="alternate" href="http://example.com/2024/03/15/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
        <content type="html">&lt;h2 id=&#34;账号文件&#34;&gt;&lt;a href=&#34;#账号文件&#34; class=&#34;headerlink&#34; title=&#34;账号文件&#34;&gt;&lt;/a&gt;账号文件&lt;/h2&gt;&lt;h3 id=&#34;x2F-etc-x2F-passwd&#34;&gt;&lt;a href=&#34;#x2F-etc-x2F-passwd&#34; class=&#34;headerlink&#34; title=&#34;&amp;#x2F;etc&amp;#x2F;passwd&#34;&gt;&lt;/a&gt;&amp;#x2F;etc&amp;#x2F;passwd&lt;/h3&gt;&lt;p&gt;存储了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;账号信息&lt;/li&gt;
&lt;li&gt;x（密码）&lt;/li&gt;
&lt;li&gt;UID&lt;/li&gt;
&lt;li&gt;GID&lt;/li&gt;
&lt;li&gt;用户信息栏&lt;/li&gt;
&lt;li&gt;家目录&lt;/li&gt;
&lt;li&gt;shell&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;x2F-etc-x2F-shadow&#34;&gt;&lt;a href=&#34;#x2F-etc-x2F-shadow&#34; class=&#34;headerlink&#34; title=&#34;&amp;#x2F;etc&amp;#x2F;shadow&#34;&gt;&lt;/a&gt;&amp;#x2F;etc&amp;#x2F;shadow&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;账号名&lt;/li&gt;
&lt;li&gt;密码&lt;/li&gt;
&lt;li&gt;最近修改&lt;/li&gt;
&lt;li&gt;不可修改天数&lt;/li&gt;
&lt;li&gt;建议修改天数&lt;/li&gt;
&lt;li&gt;警告天数&lt;/li&gt;
&lt;li&gt;过期密码宽限&lt;/li&gt;
&lt;li&gt;失效日期&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;忘记密码&#34;&gt;&lt;a href=&#34;#忘记密码&#34; class=&#34;headerlink&#34; title=&#34;忘记密码&#34;&gt;&lt;/a&gt;忘记密码&lt;/h2&gt;&lt;p&gt;普通用户：passwd&lt;br&gt;root：单人启动模式&lt;/p&gt;
&lt;h2 id=&#34;用户组&#34;&gt;&lt;a href=&#34;#用户组&#34; class=&#34;headerlink&#34; title=&#34;用户组&#34;&gt;&lt;/a&gt;用户组&lt;/h2&gt;&lt;p&gt;&amp;#x2F;etc&amp;#x2F;group&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组名&lt;/li&gt;
&lt;li&gt;用户组密码&lt;/li&gt;
&lt;li&gt;GID&lt;/li&gt;
&lt;li&gt;支持的账号名称 逗号分开&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;group：查看用户所属的组，第一个是有效用户组，即为创建文件时代表的组&lt;br&gt;newgrp：切换有效用户组，以另外一个单独的shell生效。&lt;/p&gt;
&lt;p&gt;加入用户组：root用usermod，组管理员用gpasswd&lt;/p&gt;
&lt;h2 id=&#34;账号管理&#34;&gt;&lt;a href=&#34;#账号管理&#34; class=&#34;headerlink&#34; title=&#34;账号管理&#34;&gt;&lt;/a&gt;账号管理&lt;/h2&gt;&lt;p&gt;useradd：新建账户&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-g初始用户组&lt;/li&gt;
&lt;li&gt;-G次要用户组&lt;/li&gt;
&lt;li&gt;-e失效日期&lt;/li&gt;
&lt;li&gt;-f密码失效&lt;/li&gt;
&lt;li&gt;-s默认shell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;userdel：删除账户&lt;br&gt;usermod：修改存在的账户&lt;/p&gt;
&lt;p&gt;id：查询用户信息&lt;br&gt;finger：查询用户动态&lt;br&gt;chfn：改变自身动态&lt;/p&gt;
&lt;h2 id=&#34;用户组管理&#34;&gt;&lt;a href=&#34;#用户组管理&#34; class=&#34;headerlink&#34; title=&#34;用户组管理&#34;&gt;&lt;/a&gt;用户组管理&lt;/h2&gt;&lt;p&gt;groupadd：新增组&lt;br&gt;groupmod：修改组&lt;br&gt;groupdel：删除组&lt;/p&gt;
&lt;h2 id=&#34;ACL&#34;&gt;&lt;a href=&#34;#ACL&#34; class=&#34;headerlink&#34; title=&#34;ACL&#34;&gt;&lt;/a&gt;ACL&lt;/h2&gt;&lt;p&gt;ACL为访问控制列表，针对单一用户、单一目录来进行rwx的权限设置。&lt;/p&gt;
&lt;p&gt;setfacl：设置ACL参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-m为设置参数&lt;/li&gt;
&lt;li&gt;-x为删除参数&lt;/li&gt;
&lt;li&gt;-R递归设置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对特定使用者：setfacl -m u:账号列表：rwx&lt;/li&gt;
&lt;li&gt;针对特定组：setfacl -m g:用户组列表：rwx&lt;/li&gt;
&lt;li&gt;针对有效权限：setfacl -m m:[rwx]&lt;br&gt;getfacl：查询文件权限&lt;br&gt;getfacl filename&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;用户身份切换&#34;&gt;&lt;a href=&#34;#用户身份切换&#34; class=&#34;headerlink&#34; title=&#34;用户身份切换&#34;&gt;&lt;/a&gt;用户身份切换&lt;/h2&gt;&lt;p&gt;su：切换shell执行不同身份&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-：直接变为root，作为login_shell&lt;/li&gt;
&lt;li&gt;-l：指定账号&lt;/li&gt;
&lt;li&gt;如无-，则表示用非login shell登录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;区别在于：非login shell时，你的环境变量还是使用的原来的用户，而loginshell会使用root的名称。&lt;/p&gt;
&lt;p&gt;sudo：以root权限来执行命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-b：后台执行&lt;/li&gt;
&lt;li&gt;-u：指定希望切换的使用者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;能否执行取决于是否在&amp;#x2F;etc&amp;#x2F;sudoers文件，可用visudo修改。&lt;br&gt;visudo可以通过添加用户，添加用户组，限制命令执行，别名等方式来简化流程。&lt;/p&gt;
&lt;h2 id=&#34;特殊shell：-x2F-sbin-x2F-nologin&#34;&gt;&lt;a href=&#34;#特殊shell：-x2F-sbin-x2F-nologin&#34; class=&#34;headerlink&#34; title=&#34;特殊shell：&amp;#x2F;sbin&amp;#x2F;nologin&#34;&gt;&lt;/a&gt;特殊shell：&amp;#x2F;sbin&amp;#x2F;nologin&lt;/h2&gt;&lt;p&gt;系统账号可以登录，但是不能用shell访问系统资源&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="Linux" />
        <updated>2024-03-15T02:05:10.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/03/03/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</id>
        <title>Linux学习笔记1</title>
        <link rel="alternate" href="http://example.com/2024/03/03/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
        <content type="html">&lt;h1 id=&#34;Linux学习笔记1&#34;&gt;&lt;a href=&#34;#Linux学习笔记1&#34; class=&#34;headerlink&#34; title=&#34;Linux学习笔记1&#34;&gt;&lt;/a&gt;Linux学习笔记1&lt;/h1&gt;&lt;h2 id=&#34;启动运行级&#34;&gt;&lt;a href=&#34;#启动运行级&#34; class=&#34;headerlink&#34; title=&#34;启动运行级&#34;&gt;&lt;/a&gt;启动运行级&lt;/h2&gt;&lt;p&gt;Linux的&amp;#x2F;etc&amp;#x2F;rcX.d目录下存储着各个启动级的运行程序&lt;br&gt;运行级&lt;strong&gt;1&lt;/strong&gt;时进入单用户模式，仅仅进行文件系统维护。标准运行级为&lt;strong&gt;3&lt;/strong&gt;。运行级为&lt;strong&gt;5&lt;/strong&gt;时会启动X Window服务。切换启动级别可以使用runlevel命令来设置&lt;/p&gt;
&lt;h2 id=&#34;内核模块&#34;&gt;&lt;a href=&#34;#内核模块&#34; class=&#34;headerlink&#34; title=&#34;内核模块&#34;&gt;&lt;/a&gt;内核模块&lt;/h2&gt;&lt;p&gt;Linux内有两种方法插入设备驱动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译进内核&lt;/li&gt;
&lt;li&gt;可插入的设备驱动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;linux内部有三种设备文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符设备文件：包括终端等&lt;/li&gt;
&lt;li&gt;块设备文件：包括硬盘&lt;/li&gt;
&lt;li&gt;网络设备文件：包括网卡和回环设备&lt;br&gt;每个设备都有一个节点文件，用于唯一标识设备（主设备号，次设备号）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设置终端&#34;&gt;&lt;a href=&#34;#设置终端&#34; class=&#34;headerlink&#34; title=&#34;设置终端&#34;&gt;&lt;/a&gt;设置终端&lt;/h2&gt;&lt;p&gt;可以使用setterm命令执行诸如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;settterm -inversescreen on&lt;/li&gt;
&lt;li&gt;setterm -background white&lt;/li&gt;
&lt;li&gt;setterm -foreground black&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;GNU-nm&#34;&gt;&lt;a href=&#34;#GNU-nm&#34; class=&#34;headerlink&#34; title=&#34;GNU nm&#34;&gt;&lt;/a&gt;GNU nm&lt;/h2&gt;&lt;p&gt;这个命令可以分析obj文件并输出符号列表&lt;/p&gt;
&lt;h2 id=&#34;man&#34;&gt;&lt;a href=&#34;#man&#34; class=&#34;headerlink&#34; title=&#34;man&#34;&gt;&lt;/a&gt;man&lt;/h2&gt;&lt;p&gt;man可以指定手册的部分，分为1-9内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1：命令名&lt;/li&gt;
&lt;li&gt;2：系统调用&lt;/li&gt;
&lt;li&gt;3：库调用&lt;/li&gt;
&lt;li&gt;4：特殊文件&lt;/li&gt;
&lt;li&gt;5：文件格式与约定&lt;/li&gt;
&lt;li&gt;6：游戏&lt;/li&gt;
&lt;li&gt;7：概览，约定&lt;/li&gt;
&lt;li&gt;8：root命令&lt;/li&gt;
&lt;li&gt;9：内核例程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ls&#34;&gt;&lt;a href=&#34;#ls&#34; class=&#34;headerlink&#34; title=&#34;ls&#34;&gt;&lt;/a&gt;ls&lt;/h2&gt;&lt;p&gt;如下参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-F：标注文件类型&lt;/li&gt;
&lt;li&gt;-R：递归寻找&lt;/li&gt;
&lt;li&gt;加入字符串：模糊匹配&lt;/li&gt;
&lt;li&gt;–time&amp;#x3D;atime：显示访问时间&lt;/li&gt;
&lt;li&gt;-d：不递归显示&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;copy&#34;&gt;&lt;a href=&#34;#copy&#34; class=&#34;headerlink&#34; title=&#34;copy&#34;&gt;&lt;/a&gt;copy&lt;/h2&gt;&lt;p&gt;cp source dest&lt;br&gt;如下参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i：询问是否覆盖&lt;/li&gt;
&lt;li&gt;-R：复制目录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;链接&#34;&gt;&lt;a href=&#34;#链接&#34; class=&#34;headerlink&#34; title=&#34;链接&#34;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;ln srcfile linkfile&lt;/p&gt;
&lt;p&gt;参数；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-s：符号链接&lt;/li&gt;
&lt;li&gt;无参数：硬链接&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mv&#34;&gt;&lt;a href=&#34;#mv&#34; class=&#34;headerlink&#34; title=&#34;mv&#34;&gt;&lt;/a&gt;mv&lt;/h2&gt;&lt;p&gt;mv src dest&lt;/p&gt;
&lt;p&gt;移动文件是不会改变inode的。&lt;/p&gt;
&lt;h2 id=&#34;目录操作&#34;&gt;&lt;a href=&#34;#目录操作&#34; class=&#34;headerlink&#34; title=&#34;目录操作&#34;&gt;&lt;/a&gt;目录操作&lt;/h2&gt;&lt;p&gt;mkdir ：-p可以创建缺失父目录&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="Linux" />
        <updated>2024-03-03T08:29:11.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/11/15/%E8%AF%BE%E9%A2%98%E7%BB%8423-11-15%E5%91%A8%E6%8A%A5/</id>
        <title>课题组23-11-15周报</title>
        <link rel="alternate" href="http://example.com/2023/11/15/%E8%AF%BE%E9%A2%98%E7%BB%8423-11-15%E5%91%A8%E6%8A%A5/"/>
        <content type="html">&lt;h1 id=&#34;实验关于fp16参数转换速度的问题&#34;&gt;&lt;a href=&#34;#实验关于fp16参数转换速度的问题&#34; class=&#34;headerlink&#34; title=&#34;实验关于fp16参数转换速度的问题&#34;&gt;&lt;/a&gt;实验关于fp16参数转换速度的问题&lt;/h1&gt;&lt;p&gt;本周进行了一个实验，主要用于观察pytorch中对张量转移的各种方法的性能差异。&lt;/p&gt;
&lt;h2 id=&#34;实验思路&#34;&gt;&lt;a href=&#34;#实验思路&#34; class=&#34;headerlink&#34; title=&#34;实验思路&#34;&gt;&lt;/a&gt;实验思路&lt;/h2&gt;&lt;h3 id=&#34;几种不同的传输方向&#34;&gt;&lt;a href=&#34;#几种不同的传输方向&#34; class=&#34;headerlink&#34; title=&#34;几种不同的传输方向&#34;&gt;&lt;/a&gt;几种不同的传输方向&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;cpu -&amp;gt; cpu&lt;/li&gt;
&lt;li&gt;cpu -&amp;gt; gpu&lt;/li&gt;
&lt;li&gt;gpu -&amp;gt; cpu&lt;/li&gt;
&lt;li&gt;gpu -&amp;gt; gpu&lt;h3 id=&#34;几种不同的数据&#34;&gt;&lt;a href=&#34;#几种不同的数据&#34; class=&#34;headerlink&#34; title=&#34;几种不同的数据&#34;&gt;&lt;/a&gt;几种不同的数据&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;fp32 -&amp;gt; fp32&lt;/li&gt;
&lt;li&gt;fp32 -&amp;gt; fp16&lt;br&gt;&lt;code&gt;调用half()函数，将fp32数据转换为fp16数据&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;fp16 -&amp;gt; fp16&lt;/li&gt;
&lt;li&gt;fp16 -&amp;gt; fp32&lt;br&gt;&lt;code&gt;调用float()函数，将fp16数据转换为fp32数据&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;目前第三、四种暂未测试&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;几种不同的传输方式&#34;&gt;&lt;a href=&#34;#几种不同的传输方式&#34; class=&#34;headerlink&#34; title=&#34;几种不同的传输方式&#34;&gt;&lt;/a&gt;几种不同的传输方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;copy_()&lt;/li&gt;
&lt;li&gt;to()&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实验过程&#34;&gt;&lt;a href=&#34;#实验过程&#34; class=&#34;headerlink&#34; title=&#34;实验过程&#34;&gt;&lt;/a&gt;实验过程&lt;/h2&gt;&lt;p&gt;准备一个目的地矩阵，一个源矩阵组（100个）。分别用随机数初始化。&lt;br&gt;循环100次，每次都遍历整个矩阵组，传输至对应的目的地矩阵。&lt;br&gt;测量总时长，对不同情况进行比较&lt;br&gt;代码模板如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; torch&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; time&lt;br&gt;tensor_cpu_1 = torch.rand(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;)&lt;br&gt;tensor_gpu_1 = torch.rand(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;).cuda()&lt;br&gt;tensor_cpu_2 = torch.rand(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;)&lt;br&gt;tensor_gpu_2 = torch.rand(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;).cuda()&lt;br&gt;time_sum = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;):&lt;br&gt;    start = time.time()&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;):&lt;br&gt;        tensor_cpu_1.copy_(tensor_cpu_2[i])&lt;br&gt;    end = time.time()&lt;br&gt;    time_sum += end - start&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;time for copy from cpu to cpu via _copy():&amp;quot;&lt;/span&gt;, time_sum)&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上代码展示了从cpu到cpu传输fp32的过程。最终展示了传输十万个1000*1000的矩阵所耗费的总时间。&lt;br&gt;经过实验，结果如下表所示：&lt;br&gt;记录数据如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;传输方向&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;传输方式&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数据类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;时间&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2.187&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.025&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5.855&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5.634&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9.663&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9.555&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9.876&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;cpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10.264&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8.895&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;13.649&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10.051&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; cpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7.320&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.605&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.029&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;copy_()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.484&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gpu -&amp;gt; gpu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fp32 -&amp;gt; fp16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.591&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;注意，测试时间可能会有波动，尤其是在时间较短时，考虑到这种传输主要出现在gpu-&amp;gt;gpu中，不是主要考虑内容&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="技术" />
        <category term="周报" />
        <category term="课题组" />
        <category term="神经网络" />
        <category term="pytorch" />
        <updated>2023-11-15T08:09:06.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/10/22/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E4%BA%94%E5%91%A8%E5%AD%A6%E4%B9%A0/</id>
        <title>课题组第五周学习</title>
        <link rel="alternate" href="http://example.com/2023/10/22/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E4%BA%94%E5%91%A8%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;h1 id=&#34;高效直接访问主机内存的方法&#34;&gt;&lt;a href=&#34;#高效直接访问主机内存的方法&#34; class=&#34;headerlink&#34; title=&#34;高效直接访问主机内存的方法&#34;&gt;&lt;/a&gt;高效直接访问主机内存的方法&lt;/h1&gt;&lt;h2 id=&#34;现有方法存在的问题&#34;&gt;&lt;a href=&#34;#现有方法存在的问题&#34; class=&#34;headerlink&#34; title=&#34;现有方法存在的问题&#34;&gt;&lt;/a&gt;现有方法存在的问题&lt;/h2&gt;&lt;h3 id=&#34;通过加载后执行的方法&#34;&gt;&lt;a href=&#34;#通过加载后执行的方法&#34; class=&#34;headerlink&#34; title=&#34;通过加载后执行的方法&#34;&gt;&lt;/a&gt;通过加载后执行的方法&lt;/h3&gt;&lt;p&gt;面对巨大的模型参数规模，现有GPU的显存难以支撑大模型的训练。因此产生了一种通过加载后执行的方法，即将模型参数存储在主机内存中，每次训练时将参数加载到显存中，训练结束后将参数保存到主机内存中。这种方法的缺点是每次训练都需要将参数加载到显存中，这个过程会消耗大量的时间，例如在v100上，加载时间会是处理时间的4倍以上，导致训练效率低下。有一种异步加载方法，将加载层和训练层分开，训练层在训练时异步加载参数，但是这种方法会导致训练时的显存占用过高，而且层数较多时加载时间过高的劣势逐渐显现，优化并不明显。&lt;/p&gt;
&lt;h2 id=&#34;本文提出的方法&#34;&gt;&lt;a href=&#34;#本文提出的方法&#34; class=&#34;headerlink&#34; title=&#34;本文提出的方法&#34;&gt;&lt;/a&gt;本文提出的方法&lt;/h2&gt;&lt;h3 id=&#34;直接主机访问&#34;&gt;&lt;a href=&#34;#直接主机访问&#34; class=&#34;headerlink&#34; title=&#34;直接主机访问&#34;&gt;&lt;/a&gt;直接主机访问&lt;/h3&gt;&lt;p&gt;避开加载和训练不同步的问题，直接将cpu内存当作gpu的虚拟内存进行访问，这样避免了加载过程中占用gpu显存过高的问题，但是由于访问和数据流动要经过pcie总线，传输速度较慢。&lt;br&gt;因此，DHA使用了这样一种办法，使得其可以自适应选择访问方式，其可以通过直接主机访问和加载后执行两种方法进行训练，使得加载的时间可以隐藏在训练流的流水线中。&lt;/p&gt;
&lt;h3 id=&#34;多GPU方法&#34;&gt;&lt;a href=&#34;#多GPU方法&#34; class=&#34;headerlink&#34; title=&#34;多GPU方法&#34;&gt;&lt;/a&gt;多GPU方法&lt;/h3&gt;&lt;p&gt;对于多个GPU，由于GPU间通信效率要高于PCIE通信效率，因此可以将模型拆分成多个部分，分别存储在不同的GPU中，这样每次训练的加载都可以直接从其他GPU中加载，而不需要从主机内存中加载，这样可以减少加载时间。&lt;/p&gt;
&lt;h3 id=&#34;DeepPlan&#34;&gt;&lt;a href=&#34;#DeepPlan&#34; class=&#34;headerlink&#34; title=&#34;DeepPlan&#34;&gt;&lt;/a&gt;DeepPlan&lt;/h3&gt;&lt;p&gt;本文还提出了一个工具：用来为给定模型自动生成执行计划，过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对本地GPU显存和主机内存分析性能&lt;/li&gt;
&lt;li&gt;通过比较DHA和流水线方法的延迟差异来决定每一层的策略&lt;/li&gt;
&lt;li&gt;如果有多个GPU，则根据GPU数量平均划分模型&lt;/li&gt;
&lt;li&gt;协调将直接主机访问的执行和加载后执行的执行进行协调&lt;br&gt;本方案在部署时只需要进行一次执行。&lt;h2 id=&#34;原理分析&#34;&gt;&lt;a href=&#34;#原理分析&#34; class=&#34;headerlink&#34; title=&#34;原理分析&#34;&gt;&lt;/a&gt;原理分析&lt;/h2&gt;对于不同层，加载——执行策略与DHA策略的时间是不同的，&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;层&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;加载——执行策略&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;DHA策略&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;结论&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;卷积层&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;小规模差异不大&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;大规模较慢&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;推荐在较小卷积层使用DHA，同时加载较大卷积层等待直接执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;全连接层&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;加载快&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;执行慢&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;推荐在全连接层使用加载后执行，因为其需要频繁访问内存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;嵌入层&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;加载较慢&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;执行较快&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;推荐在嵌入层使用DHA，因为其规模较大，而层中一些参数的访问较少&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;归一化层&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;LayerNorm更好&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;BatchNorm更好&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;需要根据具体情况进行选择&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;产生差异的原因则是不同层对内存访问的需求不同，导致pcie访问次数不同，pcie作为瓶颈，访问次数越多，延迟越大。&lt;/p&gt;
&lt;h3 id=&#34;并行传输&#34;&gt;&lt;a href=&#34;#并行传输&#34; class=&#34;headerlink&#34; title=&#34;并行传输&#34;&gt;&lt;/a&gt;并行传输&lt;/h3&gt;&lt;p&gt;对于多GPU场景，将模型划分为多个部分后，采用并行传输策略：从内存并行地将模型传输到两个GPU，再从第二个GPU向第一个GPU传输，这样可以减少传输时间。&lt;br&gt;在此基础上，可以将GPU2——GPU1的传输变为流水线传输，这样可以进一步减少传输时间。&lt;br&gt;但是，由于CPU提供的PCIE总线数量限制，多GPU系统，例如8GPU也只能每两个GPU公用一组总线，因此多GPU的总线需要考虑总线拓扑。&lt;/p&gt;
&lt;h2 id=&#34;DeepPlan实现&#34;&gt;&lt;a href=&#34;#DeepPlan实现&#34; class=&#34;headerlink&#34; title=&#34;DeepPlan实现&#34;&gt;&lt;/a&gt;DeepPlan实现&lt;/h2&gt;&lt;h3 id=&#34;整体实现思路&#34;&gt;&lt;a href=&#34;#整体实现思路&#34; class=&#34;headerlink&#34; title=&#34;整体实现思路&#34;&gt;&lt;/a&gt;整体实现思路&lt;/h3&gt;&lt;p&gt;再进行训练前，deepPlan会根据每一层的性能分析，推理出当前层采用何种方式进行训练（加载——执行orDHA）。遍历完整个网络后，将根据策略直接执行训练。如果在多GPU系统中，DeepPlan还会根据GPU连连接拓扑，将模型划分为多个部分，应用并行传输方案。&lt;/p&gt;
&lt;h3 id=&#34;单层性能分析&#34;&gt;&lt;a href=&#34;#单层性能分析&#34; class=&#34;headerlink&#34; title=&#34;单层性能分析&#34;&gt;&lt;/a&gt;单层性能分析&lt;/h3&gt;&lt;p&gt;利用单层执行时间的统计数据，或者执行一次单层来得到每一层的性能数据。&lt;/p&gt;
&lt;h3 id=&#34;层间性能分析&#34;&gt;&lt;a href=&#34;#层间性能分析&#34; class=&#34;headerlink&#34; title=&#34;层间性能分析&#34;&gt;&lt;/a&gt;层间性能分析&lt;/h3&gt;&lt;p&gt;对于每层性能已经得到的情况。检查每一层切换策略到DHA后其获得的性能差异是否比加载后执行的停滞时间更短，如果是的话则切换为DHA。并且通过递归的方式检查每个层之前最多可以使用几个DHA来缩短总加载停滞时间。&lt;/p&gt;
&lt;h3 id=&#34;模型传输规划&#34;&gt;&lt;a href=&#34;#模型传输规划&#34; class=&#34;headerlink&#34; title=&#34;模型传输规划&#34;&gt;&lt;/a&gt;模型传输规划&lt;/h3&gt;&lt;p&gt;DeepPlan根据GPU拓扑，和PCIE交换机布局，避免并行加载的总线冲突，检查所选GPU是否使用NVLink，如果使用则直接进行并行传输，否则使用流水线传输。同时，根据并行传输带来的性能优化，重新规划每一层使用的策略。&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="周报" />
        <category term="课题组" />
        <category term="神经网络" />
        <category term="pytorch" />
        <updated>2023-10-22T15:36:49.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/10/13/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E5%9B%9B%E5%91%A8%E5%AD%A6%E4%B9%A0/</id>
        <title>课题组第四周学习</title>
        <link rel="alternate" href="http://example.com/2023/10/13/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E5%9B%9B%E5%91%A8%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;h1 id=&#34;ZeRO-Offload方法&#34;&gt;&lt;a href=&#34;#ZeRO-Offload方法&#34; class=&#34;headerlink&#34; title=&#34;ZeRO-Offload方法&#34;&gt;&lt;/a&gt;ZeRO-Offload方法&lt;/h1&gt;&lt;h2 id=&#34;提出背景&#34;&gt;&lt;a href=&#34;#提出背景&#34; class=&#34;headerlink&#34; title=&#34;提出背景&#34;&gt;&lt;/a&gt;提出背景&lt;/h2&gt;&lt;p&gt;对大模型训练来说，GPU显存对参数规模巨大的网络来说是一个瓶颈，然而CPU内存可以做到TB级别，因此可以考虑将一部分参数放在CPU上，而将需要频繁访问的参数放在GPU上，这样可以减少GPU显存的压力，提高训练速度。ZeRO-Offload提出了一种没有数据冗余的优化方法，可以将模型参数分布在CPU和GPU上，而且可以在CPU和GPU之间进行无缝的迁移。&lt;/p&gt;
&lt;h3 id=&#34;大模型传统方法&#34;&gt;&lt;a href=&#34;#大模型传统方法&#34; class=&#34;headerlink&#34; title=&#34;大模型传统方法&#34;&gt;&lt;/a&gt;大模型传统方法&lt;/h3&gt;&lt;p&gt;针对大模型需要的内存过大的问题，传统分为两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型分割：将模型分割成多个部分，每个部分在GPU上训练，然后将结果传递给下一个部分，&lt;/li&gt;
&lt;li&gt;流水线并行：将训练过程分为不同层，每个层分给不同的GPU，然后将结果传递给下一个GPU&lt;h2 id=&#34;增益来源&#34;&gt;&lt;a href=&#34;#增益来源&#34; class=&#34;headerlink&#34; title=&#34;增益来源&#34;&gt;&lt;/a&gt;增益来源&lt;/h2&gt;根据计算流程，CPU的计算量相比于GPU的$O(MB)$,只有$O(M)$，其中M是模型大小，B是批次大小。&lt;br&gt;这个过程中，ZeRO-Offload将前向与后向传播分配给了GPU，而标准化计算和权重更新等对模型大小有直接联系的计算则分配给了CPU。&lt;br&gt;在数据吞吐方面，cpu与gpu之间仅存在fp16数据的传输，相比与其他方法（例如L2L）有大幅度减少&lt;br&gt;在并行方面，随着计算节点的增加，CPU的计算资源会随着节点数量增加而增加&lt;br&gt;CPU计算通过提高并行性增加了效率&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对CPU作为计算瓶颈的解决方法&#34;&gt;&lt;a href=&#34;#对CPU作为计算瓶颈的解决方法&#34; class=&#34;headerlink&#34; title=&#34;对CPU作为计算瓶颈的解决方法&#34;&gt;&lt;/a&gt;对CPU作为计算瓶颈的解决方法&lt;/h3&gt;&lt;h4 id=&#34;对CPU计算的优化&#34;&gt;&lt;a href=&#34;#对CPU计算的优化&#34; class=&#34;headerlink&#34; title=&#34;对CPU计算的优化&#34;&gt;&lt;/a&gt;对CPU计算的优化&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;向量运算SIMD&lt;/li&gt;
&lt;li&gt;循环展开&lt;/li&gt;
&lt;li&gt;多核并行&lt;/li&gt;
&lt;li&gt;减少缓存抖动&lt;h4 id=&#34;延迟参数更新&#34;&gt;&lt;a href=&#34;#延迟参数更新&#34; class=&#34;headerlink&#34; title=&#34;延迟参数更新&#34;&gt;&lt;/a&gt;延迟参数更新&lt;/h4&gt;将参数更新延迟，重叠CPU与GPU计算。也就是说，在某一轮计算之后，此后每次gpu使用的优化器参数都是上一轮计算的结果，而不是这一轮计算的结果。，因此可以让cpu计算时间和gpu计算时间重叠。提高流水线负载率。&lt;h2 id=&#34;优化方法&#34;&gt;&lt;a href=&#34;#优化方法&#34; class=&#34;headerlink&#34; title=&#34;优化方法&#34;&gt;&lt;/a&gt;优化方法&lt;/h2&gt;ZeRO-Offload 同时利用CPU内存计算能力来优化。基于ZeRO优化方法，但是不是像原本多个GPU并行计算，并且通过联系收集器来进行并行。而是把这个通讯过程转化为与CPU的联系，相当于原本多个GPU同时做的工作，让单个GPU进行，每个阶段只进行原先一个GPU进行的工作，同时把其他GPU本应进行的计算状态经由内存进行存储。&lt;h3 id=&#34;ZeRO的工作&#34;&gt;&lt;a href=&#34;#ZeRO的工作&#34; class=&#34;headerlink&#34; title=&#34;ZeRO的工作&#34;&gt;&lt;/a&gt;ZeRO的工作&lt;/h3&gt;ZeRO，在ZeRO-Offload中使用ZeRO-2阶段，这个阶段你主要是分割模型状态和梯度。在ZeRO-2中，每个GPU都存储着所有参数，但是每轮训练只更新其中不包含的部分。&lt;br&gt;这个过程如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;每个GPU进行前馈，计算不同批次的损失。&lt;/li&gt;
&lt;li&gt;每个cpu进行反向传播，并且对每个有梯度的GPU使用减少梯度的算子进行平均。&lt;/li&gt;
&lt;li&gt;反向传播结束后，GPU使用其对应的梯度平均值对其部分参数和优化器状态进行更新。&lt;/li&gt;
&lt;li&gt;进行一次全收集，接收其他GPU计算的参数更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;ZeRO-Offload的工作&#34;&gt;&lt;a href=&#34;#ZeRO-Offload的工作&#34; class=&#34;headerlink&#34; title=&#34;ZeRO-Offload的工作&#34;&gt;&lt;/a&gt;ZeRO-Offload的工作&lt;/h3&gt;&lt;p&gt;ZeRO-Offload将训练修改为数据流图，主要优势：使得CPU计算量减少了几个数量级。保证CPU与GPU通讯最小化。最大限度节省内存。&lt;/p&gt;
&lt;h4 id=&#34;计算流图&#34;&gt;&lt;a href=&#34;#计算流图&#34; class=&#34;headerlink&#34; title=&#34;计算流图&#34;&gt;&lt;/a&gt;计算流图&lt;/h4&gt;&lt;p&gt;计算流图是一种图形化的表示，用于表示计算过程中的数据流动。在计算流图中，节点表示计算，边表示数据流动。&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lianga1/picGo_test/main/1.jpg&#34; alt=&#34;计算流图&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;减少CPU计算&#34;&gt;&lt;a href=&#34;#减少CPU计算&#34; class=&#34;headerlink&#34; title=&#34;减少CPU计算&#34;&gt;&lt;/a&gt;减少CPU计算&lt;/h4&gt;&lt;p&gt;ZeRO-Offload将前向与后向传播分配给了GPU，而标准化计算和权重更新等对模型大小有直接联系的计算则分配给了CPU。&lt;/p&gt;
&lt;h4 id=&#34;减少CPU与GPU通讯&#34;&gt;&lt;a href=&#34;#减少CPU与GPU通讯&#34; class=&#34;headerlink&#34; title=&#34;减少CPU与GPU通讯&#34;&gt;&lt;/a&gt;减少CPU与GPU通讯&lt;/h4&gt;&lt;p&gt;创建fp32区：为了避免fp32数据在pcie总线传输，需要将所有fp32数据放在一个设备上进行处理&lt;br&gt;p16分配：将fp16必须放在前馈与反向传播共同节点的位置，因为这两个节点之间的通信是较大的。&lt;br&gt;因此，ZeRO-Offload将fp16分配给GPU，而将fp32分配给CPU。&lt;/p&gt;
&lt;h4 id=&#34;减少内存&#34;&gt;&lt;a href=&#34;#减少内存&#34; class=&#34;headerlink&#34; title=&#34;减少内存&#34;&gt;&lt;/a&gt;减少内存&lt;/h4&gt;&lt;p&gt;将反向传播后得到的梯度，以及更新梯度所需要的计算和存储空间，写遭到CPU上，可以节省最多的显存使用。&lt;/p&gt;
&lt;h2 id=&#34;优势&#34;&gt;&lt;a href=&#34;#优势&#34; class=&#34;headerlink&#34; title=&#34;优势&#34;&gt;&lt;/a&gt;优势&lt;/h2&gt;&lt;h3 id=&#34;扩展性强&#34;&gt;&lt;a href=&#34;#扩展性强&#34; class=&#34;headerlink&#34; title=&#34;扩展性强&#34;&gt;&lt;/a&gt;扩展性强&lt;/h3&gt;&lt;p&gt;对于任何模型，其优化算法的优化参数对于ZeRO-Offload来说并不关键，其只是需要把fp32的计算内容单独放在CPU中。&lt;/p&gt;
&lt;h3 id=&#34;支持并行&#34;&gt;&lt;a href=&#34;#支持并行&#34; class=&#34;headerlink&#34; title=&#34;支持并行&#34;&gt;&lt;/a&gt;支持并行&lt;/h3&gt;&lt;p&gt;对多个GPU而言。ZeRO-Offload基于ZeRO-2，因此可以将分区的参数分配给多个GPU。&lt;/p&gt;
&lt;h3 id=&#34;模型并行&#34;&gt;&lt;a href=&#34;#模型并行&#34; class=&#34;headerlink&#34; title=&#34;模型并行&#34;&gt;&lt;/a&gt;模型并行&lt;/h3&gt;&lt;p&gt;ZeRO-Offload还可以用模型并行来实现更好的并行性。通过给cpu卸载梯度、优化器状态和优化器计算来和模型并行计算相适应。在这个情况下，首先，借由更难耗尽内存，可以使用更大的批次大小。其次，可以使用更多的GPU来进行模型并行计算。&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="周报" />
        <category term="课题组" />
        <category term="神经网络" />
        <category term="pytorch" />
        <updated>2023-10-13T10:23:34.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/09/30/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0/</id>
        <title>课题组第一周学习</title>
        <link rel="alternate" href="http://example.com/2023/09/30/%E8%AF%BE%E9%A2%98%E7%BB%84%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;h1 id=&#34;理论学习&#34;&gt;&lt;a href=&#34;#理论学习&#34; class=&#34;headerlink&#34; title=&#34;理论学习&#34;&gt;&lt;/a&gt;理论学习&lt;/h1&gt;&lt;h2 id=&#34;反向传播算法&#34;&gt;&lt;a href=&#34;#反向传播算法&#34; class=&#34;headerlink&#34; title=&#34;反向传播算法&#34;&gt;&lt;/a&gt;反向传播算法&lt;/h2&gt;&lt;p&gt;反向传播是一种基于有监督学习，用于根据误差和损失函数调整网络权重的算法。反向传播算法的核心思想是通过链式法则计算损失函数对于每个权重的梯度，然后使用梯度下降法更新权重。&lt;br&gt;过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先通过正向传播，根据输入数据得到一个网络的激励&lt;/li&gt;
&lt;li&gt;根据得到的激励与目标值计算损失函数&lt;/li&gt;
&lt;li&gt;根据损失函数，从输出层开始，依次沿着计算图反向计算每个权重的梯度&lt;/li&gt;
&lt;li&gt;根据得到的梯度调整权重&lt;br&gt;[1]	 &lt;a href=&#34;https://books.google.com/books/about/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8.html?id=2-PWvQEACAAJ&#34;&gt;深度学习入门: 基于Python的理论与实现[M]. 人民邮电出版社, 2018.(p.121,161)&lt;/a&gt;&lt;h2 id=&#34;前馈&#34;&gt;&lt;a href=&#34;#前馈&#34; class=&#34;headerlink&#34; title=&#34;前馈&#34;&gt;&lt;/a&gt;前馈&lt;/h2&gt;前馈神经网络是一种最简单的神经网络，它的每个神经元都是前一层神经元的输出。前馈神经网络的每个神经元都是前一层神经元的输出，因此它的输出不会反馈到输入层，这种网络结构也被称为前馈神经网络。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;卷积神经网络&#34;&gt;&lt;a href=&#34;#卷积神经网络&#34; class=&#34;headerlink&#34; title=&#34;卷积神经网络&#34;&gt;&lt;/a&gt;卷积神经网络&lt;/h2&gt;&lt;h3 id=&#34;卷积&#34;&gt;&lt;a href=&#34;#卷积&#34; class=&#34;headerlink&#34; title=&#34;卷积&#34;&gt;&lt;/a&gt;卷积&lt;/h3&gt;&lt;p&gt;卷积（convolution）是一种数学运算，主要应用于信号处理中对系统响应的计算。卷积运算可以将某个冲激响应针对任意输入进行计算，得到对应的响应结果。卷积运算的公式如下：&lt;br&gt;$$&lt;br&gt;y(t) &amp;#x3D; \int_{-\infty}^{\infty} x(a)h(t-a)da&lt;br&gt;$$&lt;br&gt;其中，$x(t)$为输入信号，$h(t)$为系统响应，$y(t)$为输出信号。&lt;/p&gt;
&lt;h3 id=&#34;二维离散卷积&#34;&gt;&lt;a href=&#34;#二维离散卷积&#34; class=&#34;headerlink&#34; title=&#34;二维离散卷积&#34;&gt;&lt;/a&gt;二维离散卷积&lt;/h3&gt;&lt;p&gt;对于图像处理来说，卷积需要用到二维矩阵的滑动窗口来进行卷积运算。二维离散卷积的公式如下：&lt;br&gt;$$&lt;br&gt;y(i,j) &amp;#x3D; \sum_{m&amp;#x3D;-\infty}^{\infty}\sum_{n&amp;#x3D;-\infty}^{\infty}x(m,n)h(i-m,j-n)&lt;br&gt;$$&lt;br&gt;其中，$x(m,n)$为输入图像，$h(i,j)$为卷积核，$y(i,j)$为输出图像。&lt;/p&gt;
&lt;h3 id=&#34;卷积神经网络-1&#34;&gt;&lt;a href=&#34;#卷积神经网络-1&#34; class=&#34;headerlink&#34; title=&#34;卷积神经网络&#34;&gt;&lt;/a&gt;卷积神经网络&lt;/h3&gt;&lt;p&gt;卷积神经网络（CNN）中，增加了卷积层和池化层。其可以从原本多维度的数据中提取欧氏距离较近的单元之间蕴含的信息。&lt;/p&gt;
&lt;h4 id=&#34;卷积层&#34;&gt;&lt;a href=&#34;#卷积层&#34; class=&#34;headerlink&#34; title=&#34;卷积层&#34;&gt;&lt;/a&gt;卷积层&lt;/h4&gt;&lt;p&gt;在卷积层中，当输入数据是图像时，卷积层会以三维数据形式接收数据，并以三维数据形式传输到下一层，输入输出数据称为特征图（feature map）。其中，卷积层的输入数据称为输入特征图（input feature map），输出数据称为输出特征图（output feature map）。&lt;/p&gt;
&lt;h4 id=&#34;CNN的处理流&#34;&gt;&lt;a href=&#34;#CNN的处理流&#34; class=&#34;headerlink&#34; title=&#34;CNN的处理流&#34;&gt;&lt;/a&gt;CNN的处理流&lt;/h4&gt;&lt;p&gt;针对一个图像，有三维的信息（长、宽、通道），同样，对这个图像进行处理的卷积核也是三维的。但是最终卷积得到的输出结果是二维的（每个通道卷积的结果加在一起）。在CNN中，针对多个卷积核，会得到多个二维的输出结果，这些输出结果会被叠加在一起，得到一个三维的输出结果。这个结果传递给下一层。同时，对多个数据，即批处理，卷积层将多个样本汇总成一次处理，传递中综合成四维的数据。&lt;/p&gt;
&lt;h4 id=&#34;池化层&#34;&gt;&lt;a href=&#34;#池化层&#34; class=&#34;headerlink&#34; title=&#34;池化层&#34;&gt;&lt;/a&gt;池化层&lt;/h4&gt;&lt;p&gt;池化层是一种降低数据大小的方法，它可以减少数据的大小，同时也可以防止过拟合。池化层的处理流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按照设定的步长，从输入数据中提取数据块&lt;/li&gt;
&lt;li&gt;例如MAX池化，将数据块中的最大值作为输出结果&lt;/li&gt;
&lt;li&gt;输出结果的规模即随步长变大而缩小&lt;br&gt;同时，池化层输入数据和输出数据的维度相同&lt;h2 id=&#34;循环神经网络&#34;&gt;&lt;a href=&#34;#循环神经网络&#34; class=&#34;headerlink&#34; title=&#34;循环神经网络&#34;&gt;&lt;/a&gt;循环神经网络&lt;/h2&gt;循环神经网络常用于nlp领域。它和前馈神经网络或CNN的主要区别在于循环神经网络（RNN）的隐藏层的输出不仅仅取决于当前的输入，还取决于前一时刻的隐藏层的输出。因此，RNN具有某种程度上的“记忆”能力。&lt;br&gt;另一个显著特征在于它们在每个网络层共享参数，RNN在每一层都共享相同的参数，这使得它们可以处理任意长度的序列。&lt;br&gt;然而，RNN在反向传播的过程中，梯度会随着时间的推移而消失或爆炸，这使得它们很难学习长期依赖关系。&lt;h2 id=&#34;注意力机制&#34;&gt;&lt;a href=&#34;#注意力机制&#34; class=&#34;headerlink&#34; title=&#34;注意力机制&#34;&gt;&lt;/a&gt;注意力机制&lt;/h2&gt;注意力机制可以增强神经网络输入数据中某些部分的权重，同时减弱其他部分的权重。&lt;br&gt;例如对一个翻译句子的网络，普通的逐个词翻译会在每一轮翻译过程中对单词序列依次提高注意力，也就是其注意力矩阵会是一个对角线上权值高的矩阵。但是在注意力机制下，每一轮翻译过程中，网络会根据上一轮的翻译结果，对输入句子中的某些部分进行更多的关注，即其权值的最大值不一定在对角线。从而提高翻译的连贯性。&lt;h2 id=&#34;并行计算&#34;&gt;&lt;a href=&#34;#并行计算&#34; class=&#34;headerlink&#34; title=&#34;并行计算&#34;&gt;&lt;/a&gt;并行计算&lt;/h2&gt;并行计算对计算任务进行拆分，将同时进行的计算任务分配到不同的计算单元上，从而提高计算速度。拆分的方式统称为并行方式，并行计算后的结果重新聚合的方式称为模型更新传递方式。&lt;br&gt;常见的并行方式有：&lt;/li&gt;
&lt;li&gt;数据并行：把数据集切分放到各个计算节点，并在哥哥节点之间传递模型参数&lt;/li&gt;
&lt;li&gt;模型并行：把模型切分放到各个计算节点，并在各个节点之间传递数据。一般把单个算子分配在配置相同的几个硬件上进行模型存储和计算。&lt;/li&gt;
&lt;li&gt;流水线并行：将模型切分成多个阶段，每个阶段在不同的计算节点上进行计算，每个阶段的计算结果传递给下一个阶段。&lt;br&gt;另外，如何更新模型参数也是并行计算的一个重要问题。在硬件组织架构方面，分为参数服务器架构和collective架构。在更新参数方面分为同步和异步更新&lt;a href=&#34;https://zhuanlan.zhihu.com/p/350501860&#34;&gt;参考内容&lt;/a&gt;&lt;h3 id=&#34;allreduce训练&#34;&gt;&lt;a href=&#34;#allreduce训练&#34; class=&#34;headerlink&#34; title=&#34;allreduce训练&#34;&gt;&lt;/a&gt;allreduce训练&lt;/h3&gt;在同步更新参数的训练中，利用AllReduce来整合不同worker的梯度数据。AllReduce有很多种类的实现，主要关注的问题在于不同worker之间传递信息的拓扑结构。例如，对于一个有4个worker的集群，有以下几种拓扑结构：&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ring&lt;/strong&gt;：每个worker只和相邻的worker通信&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mesh&lt;/strong&gt;：每个worker和所有其他worker通信，但是效率比较低。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Master-Worker&lt;/strong&gt;：一个worker作为master，其他worker作为worker，master和每个worker通信，worker之间不通信。&lt;br&gt;举N个worker的ring结构为例，考察这个结构的工作过程：&lt;/li&gt;
&lt;li&gt;每个worker计算自己的梯度&lt;/li&gt;
&lt;li&gt;每个worker把数据分成N份&lt;/li&gt;
&lt;li&gt;第k个worker把其第k份数据发送给第k+1个worker&lt;/li&gt;
&lt;li&gt;第k个worker把其第k-1份数据和第k-1个worker发送的数据整合，再发给下一个worker&lt;/li&gt;
&lt;li&gt;循环N次之后，每个worker包含最终整合结果的1份&lt;/li&gt;
&lt;li&gt;每个worker把自己的数据发送给下一个worker，收到数据后，每个worker的数据都是最终整合结果&lt;br&gt;这个结构的AllReduce的优势在于发送的数据量是固定的，和worker数量无关，避免了网络拥塞。&lt;a href=&#34;https://zhuanlan.zhihu.com/p/100012827&#34;&gt;参考内容&lt;/a&gt;&lt;h1 id=&#34;实践内容&#34;&gt;&lt;a href=&#34;#实践内容&#34; class=&#34;headerlink&#34; title=&#34;实践内容&#34;&gt;&lt;/a&gt;实践内容&lt;/h1&gt;&lt;h2 id=&#34;lenet5&#34;&gt;&lt;a href=&#34;#lenet5&#34; class=&#34;headerlink&#34; title=&#34;lenet5&#34;&gt;&lt;/a&gt;lenet5&lt;/h2&gt;lenet5是进行手写数字识别的CNN，它的结构如下：&lt;br&gt;输入层-&amp;gt;卷积层-&amp;gt;池化层-&amp;gt;卷积层-&amp;gt;池化层-&amp;gt;全连接层-&amp;gt;全连接层-&amp;gt;输出层（高斯连接）&lt;br&gt;与CNN不同的地方在于，LeNet使用sigmoid函数而非reLU函数。&lt;br&gt;lenet5网络的实现代码如下：&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;LeNet&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(LeNet, self).__init__()&lt;br&gt;        self.conv = nn.Sequential(&lt;br&gt;            nn.Conv2d(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;), &lt;span class=&#34;hljs-comment&#34;&gt;# in_channels, out_channels, kernel_size&lt;/span&gt;&lt;br&gt;            nn.Sigmoid(),&lt;br&gt;            nn.MaxPool2d(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;), &lt;span class=&#34;hljs-comment&#34;&gt;# kernel_size, stride&lt;/span&gt;&lt;br&gt;            nn.Conv2d(&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;),&lt;br&gt;            nn.Sigmoid(),&lt;br&gt;            nn.MaxPool2d(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        )&lt;br&gt;        self.fc = nn.Sequential(&lt;br&gt;            nn.Linear(&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;*&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;*&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;120&lt;/span&gt;),&lt;br&gt;            nn.Sigmoid(),&lt;br&gt;            nn.Linear(&lt;span class=&#34;hljs-number&#34;&gt;120&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;84&lt;/span&gt;),&lt;br&gt;            nn.Sigmoid(),&lt;br&gt;            nn.Linear(&lt;span class=&#34;hljs-number&#34;&gt;84&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;)&lt;br&gt;        )&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, img&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        feature = self.conv(img)&lt;br&gt;        output = self.fc(feature.view(img.shape[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;], -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;))&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; output&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
这个网络定义了两个部分，一个是卷积层，一个是全连接层。卷积层的输入是一个1通道的图像，输出是一个6通道的图像，卷积核的大小为5*5。全连接层的输入是16*4*4的数据，输出是10个类别的概率。&lt;h2 id=&#34;resnet&#34;&gt;&lt;a href=&#34;#resnet&#34; class=&#34;headerlink&#34; title=&#34;resnet&#34;&gt;&lt;/a&gt;resnet&lt;/h2&gt;ResNet主要用于解决深度神经网络无法找到更好的解的问题。在深层网络中，梯度消失或爆炸的问题会导致网络无法训练。ResNet通过引入残差块（residual block）来解决这个问题。ResNet将堆叠的几个隐含层作为一个残差块，用残差块拟合的函数从原本的f(x)变为f(x)+x。&lt;br&gt;[4]	&lt;a href=&#34;https://arxiv.org/abs/1512.03385&#34;&gt;HE K, ZHANG X, REN S, et al. Deep residual learning for image recognition[C]. Proceedings of the IEEE conference on computer vision and pattern recognition, 2016:770-778.&lt;/a&gt;&lt;br&gt;通过每个block中残差路径和shortcut路径的设计，可以实现不同的ResNet网络。事实证明，不断增加ResNet的深度，也没有发生解的退化，反而可以提高网络的性能。因此ResNet可以实现如下的网络结构：&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lianga1/picGo_test/main/3u8Wwj.png&#34; alt=&#34;resnet&#34;&gt;&lt;h3 id=&#34;实际部署&#34;&gt;&lt;a href=&#34;#实际部署&#34; class=&#34;headerlink&#34; title=&#34;实际部署&#34;&gt;&lt;/a&gt;实际部署&lt;/h3&gt;残差块类定义如下：&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Bottleneck&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;# 残差块定义&lt;/span&gt;&lt;br&gt;    extention = &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, inplanes, planes, stride, downsample=&lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(Bottleneck, self).__init__()&lt;br&gt;        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, stride=stride, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.bn1 = nn.BatchNorm2d(planes)&lt;br&gt;&lt;br&gt;        self.conv2 = nn.Conv2d(planes, planes, kernel_size=&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, stride=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, padding=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.bn2 = nn.BatchNorm2d(planes)&lt;br&gt;&lt;br&gt;        self.conv3 = nn.Conv2d(planes, planes * self.extention, kernel_size=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, stride=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.bn3 = nn.BatchNorm2d(planes * self.extention)&lt;br&gt;&lt;br&gt;        self.relu = nn.ReLU(inplace=&lt;span class=&#34;hljs-literal&#34;&gt;True&lt;/span&gt;)&lt;br&gt;&lt;br&gt;        self.downsample = downsample&lt;br&gt;        self.stride = stride&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
ResNet网络定义如下：&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ResNet50&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, block, layers, num_class&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        self.inplane = &lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(ResNet50, self).__init__()&lt;br&gt;&lt;br&gt;        self.block = block&lt;br&gt;        self.layers = layers&lt;br&gt;&lt;br&gt;        self.conv1 = nn.Conv2d(&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, self.inplane, kernel_size=&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;, stride=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, padding=&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.bn1 = nn.BatchNorm2d(self.inplane)&lt;br&gt;        self.relu = nn.ReLU()&lt;br&gt;        self.maxpool = nn.MaxPool2d(kernel_size=&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, stride=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, padding=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;&lt;br&gt;        self.stage1 = self.make_layer(self.block, &lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;, layers[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;], stride=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;        self.stage2 = self.make_layer(self.block, &lt;span class=&#34;hljs-number&#34;&gt;128&lt;/span&gt;, layers[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;], stride=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        self.stage3 = self.make_layer(self.block, &lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;, layers[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;], stride=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        self.stage4 = self.make_layer(self.block, &lt;span class=&#34;hljs-number&#34;&gt;512&lt;/span&gt;, layers[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;], stride=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;&lt;br&gt;        self.avgpool = nn.AvgPool2d(&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;)&lt;br&gt;        self.fc = nn.Linear(&lt;span class=&#34;hljs-number&#34;&gt;512&lt;/span&gt; * block.extention, num_class)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
在30Epoch后，在测试集的准确度达到了75%。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;BERT&#34;&gt;&lt;a href=&#34;#BERT&#34; class=&#34;headerlink&#34; title=&#34;BERT&#34;&gt;&lt;/a&gt;BERT&lt;/h2&gt;&lt;p&gt;BERT是基于Transformer的预训练模型，主要用于自然语言处理，它能够预测句子中缺失的词语。以及判断两个句子是不是上下句。&lt;br&gt;整个框架由多层transformer的encoder堆叠而成。encoder由注意力层和feed-forward层组成。&lt;br&gt;BERT中，输入由三种不同embedding组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;wordpiece embedding：由但词向量组成将单词划分成一组有限公共子词单元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;position embedaang：将单词的位置信息编码成特征向量。Transformer通过制定规则来构建一个position embedding&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;segment embedding：用于区分两个句子的向量表示。用于区别问答等非对称子句。&lt;/p&gt;
&lt;h3 id=&#34;网络结构&#34;&gt;&lt;a href=&#34;#网络结构&#34; class=&#34;headerlink&#34; title=&#34;网络结构&#34;&gt;&lt;/a&gt;网络结构&lt;/h3&gt;&lt;p&gt;BERT的主要结构是Transformer，Transformer结构如下图所示：&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lianga1/picGo_test/main/20200814234510853.jpg&#34; alt=&#34;transformer&#34;&gt;&lt;br&gt;其中左侧部分即为encoder部分。&lt;br&gt;encoder单元由一个multi-head-Attention + Layer Normalization + feedforword + Layer Normalization 叠加产生。&lt;br&gt;在比较大的BERT模型中，有24层encoder，每层有16个Attention，词向量维度1024。在较小情况下，有12层encoder，每层12个Attention，词向量维度768。&lt;br&gt;任何时候feed-forward大小都是词向量维度的4倍。&lt;/p&gt;
&lt;h4 id=&#34;Attention-Layer&#34;&gt;&lt;a href=&#34;#Attention-Layer&#34; class=&#34;headerlink&#34; title=&#34;Attention Layer&#34;&gt;&lt;/a&gt;Attention Layer&lt;/h4&gt;&lt;p&gt;这一层的输入是由X &amp;#x3D; (batch_size,max_len_embedding)构成的。&lt;br&gt;单个self-attention 计算过程是输入X分别和三个矩阵Wq,Wk,Wv相乘，得到Q,K,V。然后计算Q和K的点积，再除以$\sqrt{d_k}$，再经过softmax函数，得到attention矩阵。最后将attention矩阵和V相乘即加权求和，得到输出。&lt;br&gt;multi-head-Attention将多个不同的self-attention输出进行拼接，然后再乘以一个矩阵W0，得到最终的输出output_sum &amp;#x3D; (batch_size,max_len,n*w_length)这个结果再经过一个全连接层就是整个multi-head-Attention的输出。&lt;/p&gt;
&lt;h4 id=&#34;Layer-Normalization&#34;&gt;&lt;a href=&#34;#Layer-Normalization&#34; class=&#34;headerlink&#34; title=&#34;Layer Normalization&#34;&gt;&lt;/a&gt;Layer Normalization&lt;/h4&gt;&lt;p&gt;这个层相当于对每句话的embedding做归一化，所以用LN而非Batch Normalization&lt;/p&gt;
&lt;h4 id=&#34;BERT每一层的学习&#34;&gt;&lt;a href=&#34;#BERT每一层的学习&#34; class=&#34;headerlink&#34; title=&#34;BERT每一层的学习&#34;&gt;&lt;/a&gt;BERT每一层的学习&lt;/h4&gt;&lt;p&gt;从浅层到深层分别可以学习到surface，短语，语法和语义的信息。&lt;/p&gt;
&lt;h3 id=&#34;BERT的训练&#34;&gt;&lt;a href=&#34;#BERT的训练&#34; class=&#34;headerlink&#34; title=&#34;BERT的训练&#34;&gt;&lt;/a&gt;BERT的训练&lt;/h3&gt;&lt;p&gt;定义几个层的类如下：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Embedding：输入的embedding层，包括wordpiece embedding，position embedding，segment embedding&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Embeddings&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(Embeddings, self).__init__()&lt;br&gt;        self.seg_emb = nn.Embedding(n_segs, d_model)&lt;br&gt;        self.word_emb = nn.Embedding(max_vocab, d_model)&lt;br&gt;        self.pos_emb = nn.Embedding(max_len, d_model)&lt;br&gt;        self.norm = nn.LayerNorm(d_model)&lt;br&gt;        self.dropout = nn.Dropout(p_dropout)&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, x, seg&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        x: [batch, seq_len]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;        word_enc = self.word_emb(x)&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# positional embedding&lt;/span&gt;&lt;br&gt;        pos = torch.arange(x.shape[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;], dtype=torch.long, device=device)&lt;br&gt;        pos = pos.unsqueeze(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;).expand_as(x)&lt;br&gt;        pos_enc = self.pos_emb(pos)&lt;br&gt;&lt;br&gt;        seg_enc = self.seg_emb(seg)&lt;br&gt;        x = self.norm(word_enc + pos_enc + seg_enc)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; self.dropout(x)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# return: [batch, seq_len, d_model]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Multi-Head-Attention层&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ScaledDotProductAttention&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(ScaledDotProductAttention, self).__init__()&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, Q, K, V, attn_mask&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        scores = torch.matmul(Q, K.transpose(-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) / msqrt(d_k))&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# scores: [batch, n_heads, seq_len, seq_len]&lt;/span&gt;&lt;br&gt;        scores.masked_fill_(attn_mask, -&lt;span class=&#34;hljs-number&#34;&gt;1e9&lt;/span&gt;)&lt;br&gt;        attn = nn.Softmax(dim=-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)(scores)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# context: [batch, n_heads, seq_len, d_v]&lt;/span&gt;&lt;br&gt;        context = torch.matmul(attn, V)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; context&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MultiHeadAttention&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(MultiHeadAttention, self).__init__()&lt;br&gt;        self.W_Q = nn.Linear(d_model, d_k * n_heads, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.W_K = nn.Linear(d_model, d_k * n_heads, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.W_V = nn.Linear(d_model, d_v * n_heads, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.fc = nn.Linear(n_heads * d_v, d_model, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, Q, K, V, attn_mask&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        Q, K, V: [batch, seq_len, d_model]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        attn_mask: [batch, seq_len, seq_len]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;        batch = Q.size(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        split Q, K, V to per head formula: [batch, seq_len, n_heads, d_k]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        Convenient for matrix multiply opearation later&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        q, k, v: [batch, n_heads, seq_len, d_k / d_v]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;        per_Q = self.W_Q(Q).view(batch, -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, n_heads, d_k).transpose(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        per_K = self.W_K(K).view(batch, -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, n_heads, d_k).transpose(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        per_V = self.W_V(V).view(batch, -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, n_heads, d_v).transpose(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;&lt;br&gt;        attn_mask = attn_mask.unsqueeze(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;).repeat(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, n_heads, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# context: [batch, n_heads, seq_len, d_v]&lt;/span&gt;&lt;br&gt;        context = ScaledDotProductAttention()(per_Q, per_K, per_V, attn_mask)&lt;br&gt;        context = context.transpose(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;).contiguous().view(&lt;br&gt;            batch, -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, n_heads * d_v)&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# output: [batch, seq_len, d_model]&lt;/span&gt;&lt;br&gt;        output = self.fc(context)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; output&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其余层，包括FeedForword层和池化层&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;FeedForwardNetwork&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(FeedForwardNetwork, self).__init__()&lt;br&gt;        self.fc1 = nn.Linear(d_model, d_ff)&lt;br&gt;        self.fc2 = nn.Linear(d_ff, d_model)&lt;br&gt;        self.dropout = nn.Dropout(p_dropout)&lt;br&gt;        self.gelu = gelu&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, x&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        x = self.fc1(x)&lt;br&gt;        x = self.dropout(x)&lt;br&gt;        x = self.gelu(x)&lt;br&gt;        x = self.fc2(x)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; x&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Pooler&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(Pooler, self).__init__()&lt;br&gt;        self.fc = nn.Linear(d_model, d_model)&lt;br&gt;        self.tanh = nn.Tanh()&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, x&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        x: [batch, d_model] (first place output)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;        x = self.fc(x)&lt;br&gt;        x = self.tanh(x)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; x&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Encoder层和组合而成的BERT网络&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;EncoderLayer&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(EncoderLayer, self).__init__()&lt;br&gt;        self.norm1 = nn.LayerNorm(d_model)&lt;br&gt;        self.norm2 = nn.LayerNorm(d_model)&lt;br&gt;&lt;br&gt;        self.enc_attn = MultiHeadAttention()&lt;br&gt;        self.ffn = FeedForwardNetwork()&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, x, pad_mask&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        pre-norm&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        see more detail in https://openreview.net/pdf?id=B1x8anVFPr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        x: [batch, seq_len, d_model]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;        residual = x&lt;br&gt;        x = self.norm1(x)&lt;br&gt;        x = self.enc_attn(x, x, x, pad_mask) + residual&lt;br&gt;        residual = x&lt;br&gt;        x = self.norm2(x)&lt;br&gt;        x = self.ffn(x)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; x + residual&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;BERT&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, n_layers&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(BERT, self).__init__()&lt;br&gt;        self.embedding = Embeddings()&lt;br&gt;        self.encoders = nn.ModuleList([&lt;br&gt;            EncoderLayer() &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; _ &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;range&lt;/span&gt;(n_layers)&lt;br&gt;        ])&lt;br&gt;&lt;br&gt;        self.pooler = Pooler()&lt;br&gt;&lt;br&gt;        self.next_cls = nn.Linear(d_model, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;        self.gelu = gelu&lt;br&gt;&lt;br&gt;        shared_weight = self.pooler.fc.weight&lt;br&gt;        self.fc = nn.Linear(d_model, d_model)&lt;br&gt;        self.fc.weight = shared_weight&lt;br&gt;&lt;br&gt;        shared_weight = self.embedding.word_emb.weight&lt;br&gt;        self.word_classifier = nn.Linear(d_model, max_vocab, bias=&lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;)&lt;br&gt;        self.word_classifier.weight = shared_weight&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, tokens, segments, masked_pos&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;        output = self.embedding(tokens, segments)&lt;br&gt;        enc_self_pad_mask = get_pad_mask(tokens)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; layer &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; self.encoders:&lt;br&gt;            output = layer(output, enc_self_pad_mask)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# output: [batch, max_len, d_model]&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# NSP Task&lt;/span&gt;&lt;br&gt;        hidden_pool = self.pooler(output[:, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;])&lt;br&gt;        logits_cls = self.next_cls(hidden_pool)&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# Masked Language Model Task&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# masked_pos: [batch, max_pred] -&amp;gt; [batch, max_pred, d_model]&lt;/span&gt;&lt;br&gt;        masked_pos = masked_pos.unsqueeze(-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;).expand(-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, d_model)&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# h_masked: [batch, max_pred, d_model]&lt;/span&gt;&lt;br&gt;        h_masked = torch.gather(output, dim=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, index=masked_pos)&lt;br&gt;        h_masked = self.gelu(self.fc(h_masked))&lt;br&gt;        logits_lm = self.word_classifier(h_masked)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# logits_lm: [batch, max_pred, max_vocab]&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# logits_cls: [batch, 2]&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; logits_cls, logits_lm&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;batch-size设为6&lt;br&gt;训练300个Epoch&lt;br&gt;训练结果进行预测例句&lt;br&gt;结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight routeros&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs routeros&#34;&gt;========================================================&lt;br&gt;Masked data:&lt;br&gt;[&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[CLS]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[MASK]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[MASK]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;too&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;how&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;are&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;today&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;great&amp;#x27;&lt;/span&gt;,&lt;br&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;my&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;baseball&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;team&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;won&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;the&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;competition&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;]&lt;br&gt;BERT reconstructed:&lt;br&gt;[&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[CLS]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;nice&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;meet&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;too&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;how&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;are&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;today&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;great&amp;#x27;&lt;/span&gt;,&lt;br&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;my&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;baseball&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;team&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;won&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;the&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;competition&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;]&lt;br&gt;Original sentence:&lt;br&gt;[&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[CLS]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;nice&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;meet&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;too&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;how&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;are&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;you&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;today&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;great&amp;#x27;&lt;/span&gt;,&lt;br&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;my&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;baseball&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;team&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;won&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;the&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;competition&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;[SEP]&amp;#x27;&lt;/span&gt;]&lt;br&gt;===============Next Sentence &lt;span class=&#34;hljs-attribute&#34;&gt;Prediction&lt;/span&gt;===============&lt;br&gt;Two sentences are continuous? &lt;span class=&#34;hljs-literal&#34;&gt;True&lt;/span&gt;&lt;br&gt;BERT predict: &lt;span class=&#34;hljs-literal&#34;&gt;True&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="技术" />
        <category term="周报" />
        <category term="课题组" />
        <category term="神经网络" />
        <category term="pytorch" />
        <updated>2023-09-30T11:51:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/09/24/%E5%85%B3%E4%BA%8Eselenium%E5%8C%85%E5%AE%89%E8%A3%85%E8%BF%90%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E9%99%A4/</id>
        <title>关于selenium包安装运行的问题排除</title>
        <link rel="alternate" href="http://example.com/2023/09/24/%E5%85%B3%E4%BA%8Eselenium%E5%8C%85%E5%AE%89%E8%A3%85%E8%BF%90%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E9%99%A4/"/>
        <content type="html">&lt;h1 id=&#34;selenium-包安装&#34;&gt;&lt;a href=&#34;#selenium-包安装&#34; class=&#34;headerlink&#34; title=&#34;selenium 包安装&#34;&gt;&lt;/a&gt;selenium 包安装&lt;/h1&gt;&lt;p&gt;首先是想要在base环境下安装的，但是因为base环境的内容太多，solve解决依赖问题耗时过长，所以考虑新建环境。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;conda create -n webdriver python=3.7&lt;br&gt;conda activate webdriver&lt;br&gt;conda install selenium&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;出现问题&#34;&gt;&lt;a href=&#34;#出现问题&#34; class=&#34;headerlink&#34; title=&#34;出现问题&#34;&gt;&lt;/a&gt;出现问题&lt;/h1&gt;&lt;p&gt;在按照例程运行代码时，出现了以下问题：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; selenium &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; webdriver&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; pd&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; platform&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; plt&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; os&lt;br&gt;chromedriver = os.path.abspath(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;C:\\Users\\18381\\anaconda3\\Scripts\\chromedriver.exe&amp;#x27;&lt;/span&gt;)&lt;br&gt;os.environ[&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;webdriver.chrome.driver&amp;quot;&lt;/span&gt;] = chromedriver&lt;br&gt;driver = webdriver.Chrome()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;出现了以下错误：&lt;br&gt;Unable to obtain driver using Selenium Manager: C:\Users\18381\anaconda3\envs\webdriver\lib\site-packages\selenium\webdriver\common\windows\selenium-manager.exe is missing.&lt;/p&gt;
&lt;p&gt;因此，查阅github上有关issue，发现是conda打包问题，没有打包这个可执行文件。因此，需要手动下载这个文件，放到对应的目录下。&lt;br&gt;&lt;a href=&#34;https://github.com/SeleniumHQ/selenium/tree/trunk/common/manager&#34;&gt;下载文件&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;其他需要注意的地方&#34;&gt;&lt;a href=&#34;#其他需要注意的地方&#34; class=&#34;headerlink&#34; title=&#34;其他需要注意的地方&#34;&gt;&lt;/a&gt;其他需要注意的地方&lt;/h1&gt;&lt;p&gt;比如求解器，可以使用新的求解器例如&lt;a href=&#34;https://www.anaconda.com/blog/a-faster-conda-for-a-growing-community&#34;&gt;libmamba&lt;/a&gt;&lt;br&gt;虽然我还没完全搞懂这个东西如何使用&lt;/p&gt;
&lt;p&gt;需要先安装chrome和对应的chromedriver&lt;br&gt;&lt;a href=&#34;https://chromedriver.chromium.org/downloads&#34;&gt;chromedriver&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="python" />
        <updated>2023-09-24T09:03:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/07/05/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-05/</id>
        <title>电赛培训-23-07-05</title>
        <link rel="alternate" href="http://example.com/2023/07/05/%E7%94%B5%E8%B5%9B%E5%9F%B9%E8%AE%AD-23-07-05/"/>
        <content type="html">&lt;h1 id=&#34;Arduino&#34;&gt;&lt;a href=&#34;#Arduino&#34; class=&#34;headerlink&#34; title=&#34;Arduino&#34;&gt;&lt;/a&gt;Arduino&lt;/h1&gt;&lt;p&gt;软件：使用Arduino IDE，以C++风格语言编写相关库。&lt;br&gt;利用IDE编译固件下载到Arduino的前提条件是有bootloader程序。&lt;br&gt;所以从程序到固件的关键在于bootloader，其他单片机也可以装载bootloader固件，然后使用arduino库。&lt;/p&gt;
&lt;h2 id=&#34;硬件-uno板&#34;&gt;&lt;a href=&#34;#硬件-uno板&#34; class=&#34;headerlink&#34; title=&#34;硬件 uno板&#34;&gt;&lt;/a&gt;硬件 uno板&lt;/h2&gt;&lt;p&gt;工作电压5v,可以typeB，DC5.5，或者跳线接入&lt;br&gt;共有14个数字输入输出（6个PWM口），6个模拟输入输出&lt;/p&gt;
&lt;h2 id=&#34;系统指示灯&#34;&gt;&lt;a href=&#34;#系统指示灯&#34; class=&#34;headerlink&#34; title=&#34;系统指示灯&#34;&gt;&lt;/a&gt;系统指示灯&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ON：系统指示灯&lt;/li&gt;
&lt;li&gt;RX：接收指示灯&lt;/li&gt;
&lt;li&gt;TX：发送指示灯&lt;/li&gt;
&lt;li&gt;L：内置LED，对应13号数字口&lt;h2 id=&#34;开始编写代码&#34;&gt;&lt;a href=&#34;#开始编写代码&#34; class=&#34;headerlink&#34; title=&#34;开始编写代码&#34;&gt;&lt;/a&gt;开始编写代码&lt;/h2&gt;有两个一定会有的函数，void setup()和void loop()，分别是初始化和循环函数。&lt;br&gt;setup会执行一次，loop在setup后会自动循环&lt;h3 id=&#34;setup函数&#34;&gt;&lt;a href=&#34;#setup函数&#34; class=&#34;headerlink&#34; title=&#34;setup函数&#34;&gt;&lt;/a&gt;setup函数&lt;/h3&gt;setup中用pinMode配置管脚模式为输出&lt;br&gt;pinMode(pin编号，INPUT)：高阻态，可认为是100m欧姆，电平不定。&lt;br&gt;pinMode(pinnum,INPUT_PULLUP):内置上拉输入，无外部信号默认高电平。&lt;br&gt;pinMode(pinnum,OUTPUT):输出模式，uno上高电平5v，电流&amp;lt;40mA&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;loop函数&#34;&gt;&lt;a href=&#34;#loop函数&#34; class=&#34;headerlink&#34; title=&#34;loop函数&#34;&gt;&lt;/a&gt;loop函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;digitalWrite(pinnum,HIGH&amp;#x2F;LOW):输出高低电平，只对output模式有效&lt;/li&gt;
&lt;li&gt;digitalRead(pinnum):读取高低电平,返回HIGH&amp;#x2F;LOW两种电平&lt;/li&gt;
&lt;li&gt;analogRead(anaPinNum)：读取模拟输入电平，返回0-1023的数字，对应0-5v的电压&lt;/li&gt;
&lt;li&gt;analogWrite(pwmPinNum,0-255)：输出PWM波，对应0-5v的电压，频率为490Hz(3,9,10,11pin),或980Hz(5,6pin)&lt;/li&gt;
&lt;li&gt;analogReference(AD参考电压输入来源)：切换AD参考电压输入来源，有默认值，一般不用，可以让输出更加精细。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;中断和轮询&#34;&gt;&lt;a href=&#34;#中断和轮询&#34; class=&#34;headerlink&#34; title=&#34;中断和轮询&#34;&gt;&lt;/a&gt;中断和轮询&lt;/h3&gt;&lt;p&gt;轮询：不断重复读取某个状态值，缺点是占用资源&lt;br&gt;中断：可以通过某个状态改变来发送信号，然后发送信号后可以执行其他操作，之后再恢复到发送信号之前的状态。&lt;br&gt;管脚中断：attachInterrupt(digitalPinToInterrupt(pinnum),ISR,mode),第一个参数是中断管脚号（uno为2，3），第二个参数是中断服务函数（可以自定义），第三个参数是中断模式，有LOW，RISING，FALLING，CHANGE四种模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LOW：低电平触发&lt;/li&gt;
&lt;li&gt;RISING：上升沿触发&lt;/li&gt;
&lt;li&gt;FALLING：下降沿触发&lt;/li&gt;
&lt;li&gt;CHANGE：任意电平变化触发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意，终端服务函数应当很短，而且不能使用其他中断实现的函数，延时需要delayMicroseconds(us)&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;修改全局变量应当用volatile修饰，防止编译器优化&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;ESP32&#34;&gt;&lt;a href=&#34;#ESP32&#34; class=&#34;headerlink&#34; title=&#34;ESP32&#34;&gt;&lt;/a&gt;ESP32&lt;/h1&gt;&lt;h2 id=&#34;硬件&#34;&gt;&lt;a href=&#34;#硬件&#34; class=&#34;headerlink&#34; title=&#34;硬件&#34;&gt;&lt;/a&gt;硬件&lt;/h2&gt;&lt;p&gt;esp32-WROOM-32&lt;br&gt;串口芯片：CP2102&lt;br&gt;核心频率240mHz&lt;br&gt;WiFi IEEE 802.11 b&amp;#x2F;g&amp;#x2F;n 2.4GHz&lt;br&gt;BLuetooth 4.2 BR&amp;#x2F;EDR and BLE&lt;br&gt;520k SRAM 448kB ROM&lt;br&gt;2个I2S，RMT远程控制，LED PWM，1个host SD&amp;#x2F;eMMC&amp;#x2F;SDIO，一个slave SDIO&amp;#x2F;SPI. TWAI(CAN),12bitADC,Ethernet&lt;/p&gt;
&lt;h2 id=&#34;开发环境&#34;&gt;&lt;a href=&#34;#开发环境&#34; class=&#34;headerlink&#34; title=&#34;开发环境&#34;&gt;&lt;/a&gt;开发环境&lt;/h2&gt;&lt;p&gt;MicroPython+Thonny&lt;/p&gt;
&lt;h3 id=&#34;常用库&#34;&gt;&lt;a href=&#34;#常用库&#34; class=&#34;headerlink&#34; title=&#34;常用库&#34;&gt;&lt;/a&gt;常用库&lt;/h3&gt;&lt;h3 id=&#34;GPIO&#34;&gt;&lt;a href=&#34;#GPIO&#34; class=&#34;headerlink&#34; title=&#34;GPIO&#34;&gt;&lt;/a&gt;GPIO&lt;/h3&gt;&lt;figure class=&#34;highlight pgsql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs pgsql&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; machine &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; Pin&lt;br&gt;&lt;br&gt;p0 = Pin(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,Pin.&lt;span class=&#34;hljs-keyword&#34;&gt;OUT&lt;/span&gt;) # &lt;span class=&#34;hljs-keyword&#34;&gt;create&lt;/span&gt; output pin &lt;span class=&#34;hljs-keyword&#34;&gt;on&lt;/span&gt; GPIO0&lt;br&gt;p0.&lt;span class=&#34;hljs-keyword&#34;&gt;on&lt;/span&gt;() # &lt;span class=&#34;hljs-keyword&#34;&gt;set&lt;/span&gt; pin &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; &amp;quot;on&amp;quot; (high) &lt;span class=&#34;hljs-keyword&#34;&gt;level&lt;/span&gt;&lt;br&gt;p0.&lt;span class=&#34;hljs-keyword&#34;&gt;off&lt;/span&gt;() # &lt;span class=&#34;hljs-keyword&#34;&gt;set&lt;/span&gt; pin &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; &amp;quot;off&amp;quot; (low) &lt;span class=&#34;hljs-keyword&#34;&gt;level&lt;/span&gt;&lt;br&gt;p0.&lt;span class=&#34;hljs-keyword&#34;&gt;value&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) # &lt;span class=&#34;hljs-keyword&#34;&gt;set&lt;/span&gt; pin &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;on&lt;/span&gt;/high&lt;br&gt;p0.init(p0.&lt;span class=&#34;hljs-keyword&#34;&gt;IN&lt;/span&gt;,p0.PULL_DOWN) # &lt;span class=&#34;hljs-keyword&#34;&gt;set&lt;/span&gt; pin &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;with&lt;/span&gt; a pull-down resistor&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;init函数中，id是强制的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mode指定引脚模式，有IN，OUT，OPEN_DRAIN，AF_OPEN_DRAIN四种模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pull指定引脚是否连接弱上拉电阻，有None，PULL_UP，PULL_DOWN三种模式&lt;br&gt;弱上拉指上拉电阻阻值较大，高电平很容易因为外部电流驱动而拉低。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;drive具有不同的最大安全电流的限制，有DRIVE_0-3四种选择&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;alt为引脚的备用功能，仅对alt和alt_open_drain两种模式有效，有0-7八种选择&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;value函数中，如果不带参数，就是得到当前状态，如果在输出模式，需要带参数，变为设置电平&lt;/p&gt;
&lt;p&gt;配置在引脚的触发源处于活动状态时要调用中断处理程序，如果引脚模式为Pin.IN，可以使用irq函数，如果引脚模式为Pin.IN，可以使用Pin.IRQ_RISING，Pin.IRQ_FALLING，Pin.IRQ_ANY三种模式，分别对应上升沿，下降沿，任意电平变化触发中断。&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="电赛" />
        <updated>2023-07-05T01:46:48.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/05/29/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3WSL-Ubuntu%E6%89%BE%E4%B8%8D%E5%88%B0sys-time-h%E7%9A%84%E9%97%AE%E9%A2%98/</id>
        <title>关于解决WSL_Ubuntu找不到sys/time.h的问题</title>
        <link rel="alternate" href="http://example.com/2023/05/29/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3WSL-Ubuntu%E6%89%BE%E4%B8%8D%E5%88%B0sys-time-h%E7%9A%84%E9%97%AE%E9%A2%98/"/>
        <content type="html">&lt;h1 id=&#34;问题描述&#34;&gt;&lt;a href=&#34;#问题描述&#34; class=&#34;headerlink&#34; title=&#34;问题描述&#34;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;在使用WSL_Ubuntu的时候，编译C代码时，出现了找不到sys&amp;#x2F;time.h的问题&lt;/p&gt;
&lt;h1 id=&#34;解决方法&#34;&gt;&lt;a href=&#34;#解决方法&#34; class=&#34;headerlink&#34; title=&#34;解决方法&#34;&gt;&lt;/a&gt;解决方法&lt;/h1&gt;&lt;h2 id=&#34;第一次失败&#34;&gt;&lt;a href=&#34;#第一次失败&#34; class=&#34;headerlink&#34; title=&#34;第一次失败&#34;&gt;&lt;/a&gt;第一次失败&lt;/h2&gt;&lt;p&gt;网上的一个直接解决方案是安装libc6-dev-amd64&lt;br&gt;但是问题又一次出现，当输入指令&lt;br&gt;&lt;code&gt;sudo apt-get install libc6-dev-amd64&lt;/code&gt;&lt;br&gt;发生报错 unable to locate package&lt;/p&gt;
&lt;h2 id=&#34;第二次失败&#34;&gt;&lt;a href=&#34;#第二次失败&#34; class=&#34;headerlink&#34; title=&#34;第二次失败&#34;&gt;&lt;/a&gt;第二次失败&lt;/h2&gt;&lt;p&gt;于是转而解决无法定位包的问题，根据查找发现需要在&amp;#x2F;etc&amp;#x2F;apt&amp;#x2F;sources.list中添加源,添加了清华源、阿里源后输入&lt;br&gt;&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;br&gt;更新完成后再次尝试安装libc6-dev-amd64，但是问题依旧存在&lt;/p&gt;
&lt;h2 id=&#34;第三次解决&#34;&gt;&lt;a href=&#34;#第三次解决&#34; class=&#34;headerlink&#34; title=&#34;第三次解决&#34;&gt;&lt;/a&gt;第三次解决&lt;/h2&gt;&lt;p&gt;这次发现libc6-dev-amd64是一个需要在i386架构下安装的包，于是尝试添加i386架构，运行指令&lt;br&gt;&lt;code&gt;dpkg --add-architecture i386&lt;/code&gt;&lt;br&gt;添加成功后再次输入&lt;br&gt;&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;br&gt;更新完成后再次尝试安装libc6-dev-amd64，问题解决&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="WSL" />
        <category term="Linux" />
        <category term="编译" />
        <updated>2023-05-29T07:24:24.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/05/14/%E7%94%B5%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/</id>
        <title>电赛学习笔记-机器视觉</title>
        <link rel="alternate" href="http://example.com/2023/05/14/%E7%94%B5%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
        <content type="html">&lt;h1 id=&#34;开发环境&#34;&gt;&lt;a href=&#34;#开发环境&#34; class=&#34;headerlink&#34; title=&#34;开发环境&#34;&gt;&lt;/a&gt;开发环境&lt;/h1&gt;&lt;h2 id=&#34;安装opencv&#34;&gt;&lt;a href=&#34;#安装opencv&#34; class=&#34;headerlink&#34; title=&#34;安装opencv&#34;&gt;&lt;/a&gt;安装opencv&lt;/h2&gt;&lt;h2 id=&#34;开发板：STM32F407&#34;&gt;&lt;a href=&#34;#开发板：STM32F407&#34; class=&#34;headerlink&#34; title=&#34;开发板：STM32F407&#34;&gt;&lt;/a&gt;开发板：STM32F407&lt;/h2&gt;&lt;h2 id=&#34;IDE：STM32CubeIDE&#34;&gt;&lt;a href=&#34;#IDE：STM32CubeIDE&#34; class=&#34;headerlink&#34; title=&#34;IDE：STM32CubeIDE&#34;&gt;&lt;/a&gt;IDE：STM32CubeIDE&lt;/h2&gt;&lt;h2 id=&#34;配置过程&#34;&gt;&lt;a href=&#34;#配置过程&#34; class=&#34;headerlink&#34; title=&#34;配置过程&#34;&gt;&lt;/a&gt;配置过程&lt;/h2&gt;&lt;p&gt;配置工程ioc文件，配置好基础外设后，再packs中安装X-CUBE-AI组件包，在软件包外设中添加模型文件，设置压缩倍数，导入测试集验证准确率&lt;/p&gt;
&lt;h2 id=&#34;模型&#34;&gt;&lt;a href=&#34;#模型&#34; class=&#34;headerlink&#34; title=&#34;模型&#34;&gt;&lt;/a&gt;模型&lt;/h2&gt;&lt;h3 id=&#34;yolo&#34;&gt;&lt;a href=&#34;#yolo&#34; class=&#34;headerlink&#34; title=&#34;yolo&#34;&gt;&lt;/a&gt;yolo&lt;/h3&gt;&lt;p&gt;利用mobilenet yolo50k模型可以导入到单片机中，只需要较少内存即可实现实时运行，实现人脸识别的功能&lt;/p&gt;
&lt;h3 id=&#34;openmv&#34;&gt;&lt;a href=&#34;#openmv&#34; class=&#34;headerlink&#34; title=&#34;openmv&#34;&gt;&lt;/a&gt;openmv&lt;/h3&gt;&lt;h2 id=&#34;硬件&#34;&gt;&lt;a href=&#34;#硬件&#34; class=&#34;headerlink&#34; title=&#34;硬件&#34;&gt;&lt;/a&gt;硬件&lt;/h2&gt;&lt;p&gt;正点原子ov7725摄像头&lt;br&gt;yolo50k&lt;/p&gt;
&lt;h1 id=&#34;相关资料&#34;&gt;&lt;a href=&#34;#相关资料&#34; class=&#34;headerlink&#34; title=&#34;相关资料&#34;&gt;&lt;/a&gt;相关资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Bt411w77m/?share_source=copy_web&amp;vd_source=4ed5c2c0429d7681216f506ac1e74065&#34;&gt;稚晖君&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/dog-qiuqiu/MobileNet-Yolo&#34;&gt;yolo50k仓库&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1FL411u72p/?share_source=copy_web&amp;vd_source=4ed5c2c0429d7681216f506ac1e74065&#34;&gt;实时运行案例&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="电赛" />
        <updated>2023-05-14T09:04:31.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/05/14/%E7%94%B5%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-micropython/</id>
        <title>电赛学习笔记-micropython</title>
        <link rel="alternate" href="http://example.com/2023/05/14/%E7%94%B5%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-micropython/"/>
        <content type="html">&lt;h1 id=&#34;micropython简介&#34;&gt;&lt;a href=&#34;#micropython简介&#34; class=&#34;headerlink&#34; title=&#34;micropython简介&#34;&gt;&lt;/a&gt;micropython简介&lt;/h1&gt;&lt;p&gt;micropython是一个能够利用python进行单片机开发的固件，目前主要是在esp32平台上进行的开发&lt;/p&gt;
&lt;h1 id=&#34;micropython安装&#34;&gt;&lt;a href=&#34;#micropython安装&#34; class=&#34;headerlink&#34; title=&#34;micropython安装&#34;&gt;&lt;/a&gt;micropython安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在micropython官网找到对应的单片机的型号的固件文件（.bin），下载到对应位置&lt;/li&gt;
&lt;li&gt;pip install esptool&lt;/li&gt;
&lt;li&gt;连接esp32单片机，查看端口号&lt;/li&gt;
&lt;li&gt;根据micropython官网的指示，利用esptool.py文件，清除单片机flash，再部署固件到单片机。&lt;/li&gt;
&lt;li&gt;安装uPyCraft IDE，选择好开发板类型和端口号后，&lt;h1 id=&#34;micropython使用&#34;&gt;&lt;a href=&#34;#micropython使用&#34; class=&#34;headerlink&#34; title=&#34;micropython使用&#34;&gt;&lt;/a&gt;micropython使用&lt;/h1&gt;需要根据单片机自带的库函数，进行python文档的开发&lt;h1 id=&#34;micropython的优点&#34;&gt;&lt;a href=&#34;#micropython的优点&#34; class=&#34;headerlink&#34; title=&#34;micropython的优点&#34;&gt;&lt;/a&gt;micropython的优点&lt;/h1&gt;代码量少，配置简单&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="电赛" />
        <updated>2023-05-14T08:47:54.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/05/11/%E7%94%B5%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</id>
        <title>电赛学习笔记（1）——stm32学习笔记</title>
        <link rel="alternate" href="http://example.com/2023/05/11/%E7%94%B5%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
        <content type="html">&lt;h1 id=&#34;stm32基础&#34;&gt;&lt;a href=&#34;#stm32基础&#34; class=&#34;headerlink&#34; title=&#34;stm32基础&#34;&gt;&lt;/a&gt;stm32基础&lt;/h1&gt;&lt;h2 id=&#34;关于stm32产品线&#34;&gt;&lt;a href=&#34;#关于stm32产品线&#34; class=&#34;headerlink&#34; title=&#34;关于stm32产品线&#34;&gt;&lt;/a&gt;关于stm32产品线&lt;/h2&gt;&lt;h3 id=&#34;stm32f1系列-cortex-m3&#34;&gt;&lt;a href=&#34;#stm32f1系列-cortex-m3&#34; class=&#34;headerlink&#34; title=&#34;stm32f1系列 cortex-m3&#34;&gt;&lt;/a&gt;stm32f1系列 cortex-m3&lt;/h3&gt;&lt;h3 id=&#34;stm32f4系列-cortex-m4&#34;&gt;&lt;a href=&#34;#stm32f4系列-cortex-m4&#34; class=&#34;headerlink&#34; title=&#34;stm32f4系列 cortex-m4&#34;&gt;&lt;/a&gt;stm32f4系列 cortex-m4&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;内置了rgb lcd驱动&lt;/li&gt;
&lt;li&gt;加入了DSP与FPU模块&lt;h3 id=&#34;stm32f7系列-cortex-m7&#34;&gt;&lt;a href=&#34;#stm32f7系列-cortex-m7&#34; class=&#34;headerlink&#34; title=&#34;stm32f7系列 cortex-m7&#34;&gt;&lt;/a&gt;stm32f7系列 cortex-m7&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;高速内存得到应用 &lt;h2 id=&#34;寄存器编程&#34;&gt;&lt;a href=&#34;#寄存器编程&#34; class=&#34;headerlink&#34; title=&#34;寄存器编程&#34;&gt;&lt;/a&gt;寄存器编程&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;关键字volatile&lt;/strong&gt;需要在声明寄存器变量的时候添加，因为要防止编译器自行优化。&lt;/p&gt;
&lt;h2 id=&#34;HAL库&#34;&gt;&lt;a href=&#34;#HAL库&#34; class=&#34;headerlink&#34; title=&#34;HAL库&#34;&gt;&lt;/a&gt;HAL库&lt;/h2&gt;&lt;p&gt;硬件抽象层，可以将不同产品线的芯片的寄存器操作抽象为函数，方便移植&lt;br&gt;&lt;strong&gt;&lt;font color=&#34;red&#34;&gt;本笔记使用HAL库进行编程&lt;/font&gt;&lt;/strong&gt;&lt;br&gt;相对的，HAL库会产生大量的判断来降低代码运行效率&lt;br&gt;但是，还有另一个Low Layer库（LL），这个库可以提高效率&lt;/p&gt;
&lt;h2 id=&#34;stm32cubeMX配置&#34;&gt;&lt;a href=&#34;#stm32cubeMX配置&#34; class=&#34;headerlink&#34; title=&#34;stm32cubeMX配置&#34;&gt;&lt;/a&gt;stm32cubeMX配置&lt;/h2&gt;&lt;h2 id=&#34;stm32计时器&#34;&gt;&lt;a href=&#34;#stm32计时器&#34; class=&#34;headerlink&#34; title=&#34;stm32计时器&#34;&gt;&lt;/a&gt;stm32计时器&lt;/h2&gt;&lt;h3 id=&#34;PWM调制输出&#34;&gt;&lt;a href=&#34;#PWM调制输出&#34; class=&#34;headerlink&#34; title=&#34;PWM调制输出&#34;&gt;&lt;/a&gt;PWM调制输出&lt;/h3&gt;&lt;h4 id=&#34;几个重要参数&#34;&gt;&lt;a href=&#34;#几个重要参数&#34; class=&#34;headerlink&#34; title=&#34;几个重要参数&#34;&gt;&lt;/a&gt;几个重要参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;占空比：高电平占整个周期的比例&lt;/li&gt;
&lt;li&gt;频率：整个PWM周期的倒数&lt;/li&gt;
&lt;li&gt;分辨率：占空比变化步长 &lt;h4 id=&#34;PWM实现方法&#34;&gt;&lt;a href=&#34;#PWM实现方法&#34; class=&#34;headerlink&#34; title=&#34;PWM实现方法&#34;&gt;&lt;/a&gt;PWM实现方法&lt;/h4&gt;输出比较模式，依靠内部计数器cnt和ccr设置的数值的比较来进行输出电平的控制，常用的有匹配时电平翻转和PWM模式&lt;br&gt;PWM占空比：$$DutyCycle&amp;#x3D;\frac{CCR}{ARR}$$&lt;br&gt;PWM频率：$$Freq&amp;#x3D;\frac{F_{clk}}{ARR}$$&lt;br&gt;PWM分辨率：$$Resolution&amp;#x3D;\frac{ARR}{2^{n}}$$&lt;h4 id=&#34;高级定时器&#34;&gt;&lt;a href=&#34;#高级定时器&#34; class=&#34;headerlink&#34; title=&#34;高级定时器&#34;&gt;&lt;/a&gt;高级定时器&lt;/h4&gt;死区生成：可以避免推挽电路上下管同时打开导致短路&lt;h3 id=&#34;PWM控制电机&#34;&gt;&lt;a href=&#34;#PWM控制电机&#34; class=&#34;headerlink&#34; title=&#34;PWM控制电机&#34;&gt;&lt;/a&gt;PWM控制电机&lt;/h3&gt;舵机是根据pwm信号控制舵机转动角度的，内部有直流电机&lt;h4 id=&#34;电机驱动芯片&#34;&gt;&lt;a href=&#34;#电机驱动芯片&#34; class=&#34;headerlink&#34; title=&#34;电机驱动芯片&#34;&gt;&lt;/a&gt;电机驱动芯片&lt;/h4&gt;利用H桥，可以控制电机转动方向。四个开关管可以构成两个推挽电路，使得电机可以获得两个方向的电流。&lt;br&gt;电机需要的电源一般是大功率的，不能直接通过gpio驱动，因此可以通过让stlink的5v口接入电机驱动芯片来获得电源。但是注意，pwm信号的地应当和电机电源的地相连，否则会出现电平不稳定的情况。&lt;h3 id=&#34;PWM代码&#34;&gt;&lt;a href=&#34;#PWM代码&#34; class=&#34;headerlink&#34; title=&#34;PWM代码&#34;&gt;&lt;/a&gt;PWM代码&lt;/h3&gt;pwm的激活结构如下：&lt;br&gt;&lt;img src=&#34;/2023/05/11/%E7%94%B5%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/PWM_Structure.jpg&#34; alt=&#34;PWM_Structure&#34;&gt;&lt;/li&gt;
&lt;li&gt;RCC开启时钟&lt;/li&gt;
&lt;li&gt;配置时基单元&lt;/li&gt;
&lt;li&gt;配置输出比较单元&lt;/li&gt;
&lt;li&gt;配置GPIO，设置为复用推挽输出&lt;/li&gt;
&lt;li&gt;运行控制，启动计数器&lt;h4 id=&#34;TIM库函数&#34;&gt;&lt;a href=&#34;#TIM库函数&#34; class=&#34;headerlink&#34; title=&#34;TIM库函数&#34;&gt;&lt;/a&gt;TIM库函数&lt;/h4&gt;在hal库中，tim相关库函数在stm32f1xx_hal_tim.h文件中&lt;br&gt;其中有关输出比较的内容有：&lt;/li&gt;
&lt;li&gt;TIM_OC_InitTypeDef: 输出比较初始化结构体&lt;/li&gt;
&lt;li&gt;HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)：输出比较初始化函数&lt;/li&gt;
&lt;li&gt;HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef *sConfig, uint32_t Channel)：配置输出通道函数&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="电赛" />
        <updated>2023-05-11T08:19:20.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/</id>
        <title>关于解决无法上传图片的问题</title>
        <link rel="alternate" href="http://example.com/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/"/>
        <content type="html">&lt;h1 id=&#34;问题&#34;&gt;&lt;a href=&#34;#问题&#34; class=&#34;headerlink&#34; title=&#34;问题&#34;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;事情是这样的，我在写博客的时候发现，我的图片即使以正确的格式引用，依旧会出现无法加载的问题&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/problem.jpg&#34; alt=&#34;问题如图&#34;&gt;&lt;/p&gt;
&lt;p&gt;众所周知，没有图片，你写个啥都没法直观地展示，就好像pre时用txt做演示，大家嘴上不说什么，心里肯定知道&lt;del&gt;你是忘了做ppt了&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;总之，根据我一晚上的研究成果，整理出来了几个解决图片无法显示的问题的方法供大家参考。&lt;/p&gt;
&lt;h1 id=&#34;解决方法&#34;&gt;&lt;a href=&#34;#解决方法&#34; class=&#34;headerlink&#34; title=&#34;解决方法&#34;&gt;&lt;/a&gt;解决方法&lt;/h1&gt;&lt;h2 id=&#34;目录&#34;&gt;&lt;a href=&#34;#目录&#34; class=&#34;headerlink&#34; title=&#34;目录&#34;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;p&gt;一共有这么几个方法，大家可以都试试，挑一个自己最喜欢的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;./#%E5%9B%BE%E5%BA%8A%E6%B3%95&#34;&gt;图床法&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github&amp;amp;gitee图床&lt;/li&gt;
&lt;li&gt;图床网站&lt;/li&gt;
&lt;li&gt;PicGo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;./#%E6%9C%AC%E5%9C%B0%E4%B8%8A%E4%BC%A0%E6%B3%95&#34;&gt;本地上传法&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;图床法&#34;&gt;&lt;a href=&#34;#图床法&#34; class=&#34;headerlink&#34; title=&#34;图床法&#34;&gt;&lt;/a&gt;图床法&lt;/h2&gt;&lt;p&gt;是这样的，一般来说，你的hexo博客在部署到服务器时，不会给你上传那些文章里链接的图片的，所以你的md文章里链接的图片一般情况下是无法上传的，自然就无法加载出来，但是你的图片如果是网络图片，直接链接网址，就可以通过联网加载的方式显示有如下几种方法&lt;/p&gt;
&lt;h3 id=&#34;Github-amp-Gitee仓库图床&#34;&gt;&lt;a href=&#34;#Github-amp-Gitee仓库图床&#34; class=&#34;headerlink&#34; title=&#34;Github&amp;amp;Gitee仓库图床&#34;&gt;&lt;/a&gt;Github&amp;amp;Gitee仓库图床&lt;/h3&gt;&lt;p&gt;这个的原理就是让你的公有仓库变成图床，白嫖存储空间&lt;/p&gt;
&lt;h4 id=&#34;操作流程&#34;&gt;&lt;a href=&#34;#操作流程&#34; class=&#34;headerlink&#34; title=&#34;操作流程&#34;&gt;&lt;/a&gt;操作流程&lt;/h4&gt;&lt;p&gt;具体来说，github和gitee方法相似，这里仅介绍github，gitee方法类似&lt;br&gt;gitee的访问速度会更快一点，github的容量没有限制，可以自己取舍&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注册一个github账户&lt;/li&gt;
&lt;li&gt;创建一个新的公有库，注意一定是&lt;strong&gt;公有&lt;/strong&gt;，否则外部无法访问&lt;/li&gt;
&lt;li&gt;在库存中创建一个文件夹&lt;br&gt; &lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/github.jpg&#34; alt=&#34;add_a_file&#34;&gt;&lt;/li&gt;
&lt;li&gt;把你的图片上传&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/upload.jpg&#34; alt=&#34;upload&#34;&gt;&lt;/li&gt;
&lt;li&gt;点击你的图片，复制地址框中的地址，注意要把bolb改为raw&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/raw.jpg&#34; alt=&#34;raw&#34;&gt;&lt;/li&gt;
&lt;li&gt;然后就可以在你的博客里引用这个地址了！&lt;blockquote&gt;
&lt;p&gt;你可以用cdn加速github，比如Jsdelivr，加速方法不在本文讨论范围&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;图床网站&#34;&gt;&lt;a href=&#34;#图床网站&#34; class=&#34;headerlink&#34; title=&#34;图床网站&#34;&gt;&lt;/a&gt;图床网站&lt;/h3&gt;&lt;p&gt;上面说的只是把github当作一个公开访问的图片网站，当然，市面上还有很多的专用图床网站，免费的付费的都有，这里介绍一个免费的网站&lt;a href=&#34;https://imgtu.com/&#34;&gt;imgtu.com&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开网站，上传图片&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/image.jpg&#34; alt=&#34;image&#34;&gt;&lt;blockquote&gt;
&lt;p&gt;注意不能挂梯子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;上传完成后，在底部链接栏，找到md链接，复制粘贴到你的文章插图位置就ok了&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/save_the_link.jpg&#34; alt=&#34;save_the_link&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个方法还是比较简单的,基本上有手就行，没手的话，&lt;del&gt;那你也别搞博客了&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&#34;PicGo&#34;&gt;&lt;a href=&#34;#PicGo&#34; class=&#34;headerlink&#34; title=&#34;PicGo&#34;&gt;&lt;/a&gt;PicGo&lt;/h3&gt;&lt;p&gt;除了以上介绍的两种方法，还有一个比较“软件化”的方案，就是&lt;a href=&#34;https://molunerfinn.com/PicGo/&#34;&gt;PicGo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PicGo是一个开源的软件，它的优点是方便快捷，不用登网站，操作比较easy，而且集成了很多平台。&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/PicGo.jpg&#34; alt=&#34;PicGo&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;操作方法&#34;&gt;&lt;a href=&#34;#操作方法&#34; class=&#34;headerlink&#34; title=&#34;操作方法&#34;&gt;&lt;/a&gt;操作方法&lt;/h4&gt;&lt;p&gt;还是以GitHub为例，首先我们进入&lt;strong&gt;图床设置&lt;/strong&gt;-&amp;gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/picgo_github.jpg&#34; alt=&#34;picgo_github&#34;&gt;&lt;br&gt;在对应的框里输入信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;存储路径是你的GitHub仓库里的路径，没有时会创建&lt;br&gt;自定义域名就是你可以用cdn加速访问图片，最后两级就是你的用户名和仓库名&lt;br&gt;下面介绍一下token的获取方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;获取Github-Token&#34;&gt;&lt;a href=&#34;#获取Github-Token&#34; class=&#34;headerlink&#34; title=&#34;获取Github Token&#34;&gt;&lt;/a&gt;获取Github Token&lt;/h5&gt;&lt;p&gt;首先从个人列表进入settings&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/token1.jpg&#34; alt=&#34;token1&#34;&gt;&lt;br&gt;然后进入最底部的developer settings&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/token2.jpg&#34; alt=&#34;token2&#34;&gt;&lt;br&gt;然后进入Personal access tokens，点generate new token&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/token3.jpg&#34; alt=&#34;token3&#34;&gt;&lt;br&gt;按照如下操作&lt;br&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/token4.jpg&#34; alt=&#34;token4&#34;&gt;&lt;br&gt;生成后记得复制，这个token&lt;font color=&#34;Red&#34; size=&#34;6&#34;&gt;&lt;strong&gt;只会出现一次&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;至此，PicGo的使用介绍就完成了&lt;/p&gt;
&lt;h2 id=&#34;本地上传法&#34;&gt;&lt;a href=&#34;#本地上传法&#34; class=&#34;headerlink&#34; title=&#34;本地上传法&#34;&gt;&lt;/a&gt;本地上传法&lt;/h2&gt;&lt;h2 id=&#34;（施工中，累了，明天再说）&#34;&gt;&lt;a href=&#34;#（施工中，累了，明天再说）&#34; class=&#34;headerlink&#34; title=&#34;（施工中，累了，明天再说）&#34;&gt;&lt;/a&gt;（施工中，累了，明天再说）&lt;/h2&gt;&lt;p&gt;2022.4.20更新&lt;/p&gt;
&lt;p&gt;继续说本地上传法&lt;/p&gt;
&lt;p&gt;我们之前说过，本地的图片是不会被hexo上传的，其实这个说法不严谨&lt;br&gt;严格来说，是你凭空放一张图片，无法上传&lt;br&gt;但是，我们可以通过一个方法来上传本地图片，那就是hexo-asset-image。&lt;/p&gt;
&lt;h3 id=&#34;操作方法-1&#34;&gt;&lt;a href=&#34;#操作方法-1&#34; class=&#34;headerlink&#34; title=&#34;操作方法&#34;&gt;&lt;/a&gt;操作方法&lt;/h3&gt;&lt;p&gt;首先安装hexo-asset-image&lt;br&gt;&lt;code&gt;npm install https://github.com/CodeFalling/hexo-asset-image --save&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意，如果你安装速度慢的话，可以讲npm换为淘宝镜像，切换方法如下：&lt;br&gt;&lt;code&gt;npm config set registry https://registry.npm.taobao.org&lt;/code&gt;&lt;br&gt;安装完成后，我们要在_config.yml中作如下更改&lt;blockquote&gt;
&lt;p&gt; 将 post_asset_folder 设置为true&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2022/04/18/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/post.jpg&#34; alt=&#34;post&#34;&gt;&lt;br&gt;然后，每当我们新建一篇博客时，就会有一个同名文件夹在_post文件夹中生成了&lt;br&gt;我们把需要插入的图片放到这个文件夹里面，在文章中引用格式如下&lt;br&gt;&lt;code&gt;![图片描述]（./包名/NO.01.001.jpg）&lt;/code&gt;&lt;br&gt;&lt;font size=&#34;5&#34;&gt;或者&lt;/font&gt;&lt;br&gt;&lt;code&gt;![logo](logo.jpg)&lt;/code&gt;&lt;br&gt;就可以了，这个方法也是我在用的方法，非常方便，缺点是对服务器压力比较大。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;上述的几个方法，各有优缺点，可以结合自己的特点来使用&lt;br&gt;注意图片描述必须是全英文，否则无法显示图片&lt;br&gt;希望有所帮助&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="markdown" />
        <updated>2022-04-18T15:45:02.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/04/18/Hexo%E4%B8%BB%E9%A2%98%E6%A8%A1%E6%9D%BF%E5%88%87%E6%8D%A2/</id>
        <title>Hexo主题模板切换</title>
        <link rel="alternate" href="http://example.com/2022/04/18/Hexo%E4%B8%BB%E9%A2%98%E6%A8%A1%E6%9D%BF%E5%88%87%E6%8D%A2/"/>
        <content type="html">&lt;h1 id=&#34;下载主题&#34;&gt;&lt;a href=&#34;#下载主题&#34; class=&#34;headerlink&#34; title=&#34;下载主题&#34;&gt;&lt;/a&gt;下载主题&lt;/h1&gt;&lt;p&gt;首先，我们找一个比较好看的主题，比如我找的Fluid&lt;br&gt;&lt;img src=&#34;/2022/04/18/Hexo%E4%B8%BB%E9%A2%98%E6%A8%A1%E6%9D%BF%E5%88%87%E6%8D%A2/fluid.jpg&#34; alt=&#34;fluid网址：https://hexo.fluid-dev.com &#34;&gt;&lt;/p&gt;
&lt;p&gt;找到了这个主题的&lt;a href=&#34;https://github.com/fluid-dev/hexo-theme-fluid&#34;&gt;github网址&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;然后呢，我们需要在cmd中输入一行神秘代码&lt;br&gt;&lt;code&gt;git clone https://github.com/fluid-dev/hexo-theme-fluid themes\fluid&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;git clone 是在GitHub上下载的命令，中间的部分是这个主题的网址，最后是你在blog目录下需要把这个下载的主题存到的位置，系统会自动创建空的文件夹。&lt;/p&gt;
&lt;p&gt;然后静待下载，下载完成后，我们的工作就成功了一大半了！&lt;/p&gt;
&lt;h1 id=&#34;应用主题&#34;&gt;&lt;a href=&#34;#应用主题&#34; class=&#34;headerlink&#34; title=&#34;应用主题&#34;&gt;&lt;/a&gt;应用主题&lt;/h1&gt;&lt;p&gt;应用主题的方法很简单，只需要打开blog目录下的_config.yml文件，把倒数第二个部分的“theme：”改为你的主题所在文件夹的名字就OK了。&lt;br&gt;&lt;img src=&#34;/2022/04/18/Hexo%E4%B8%BB%E9%A2%98%E6%A8%A1%E6%9D%BF%E5%88%87%E6%8D%A2/config.jpg&#34; alt=&#34;这样&#34;&gt;&lt;/p&gt;
&lt;p&gt;别忘了部署到服务器！&lt;/p&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="markdown" />
        <updated>2022-04-18T12:56:34.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/08/24/md%E8%AF%AD%E6%B3%95%E8%AF%95%E9%AA%8C/</id>
        <title>md语法试验</title>
        <link rel="alternate" href="http://example.com/2021/08/24/md%E8%AF%AD%E6%B3%95%E8%AF%95%E9%AA%8C/"/>
        <content type="html">&lt;h1 id=&#34;分层&#34;&gt;&lt;a href=&#34;#分层&#34; class=&#34;headerlink&#34; title=&#34;分层&#34;&gt;&lt;/a&gt;分层&lt;/h1&gt;&lt;h2 id=&#34;二级目录&#34;&gt;&lt;a href=&#34;#二级目录&#34; class=&#34;headerlink&#34; title=&#34;二级目录&#34;&gt;&lt;/a&gt;二级目录&lt;/h2&gt;&lt;h3 id=&#34;列表&#34;&gt;&lt;a href=&#34;#列表&#34; class=&#34;headerlink&#34; title=&#34;列表&#34;&gt;&lt;/a&gt;列表&lt;/h3&gt;&lt;h4 id=&#34;无序列表&#34;&gt;&lt;a href=&#34;#无序列表&#34; class=&#34;headerlink&#34; title=&#34;无序列表&#34;&gt;&lt;/a&gt;无序列表&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;小标&lt;/li&gt;
&lt;li&gt;无序&lt;/li&gt;
&lt;li&gt;各种符号都行&lt;ul&gt;
&lt;li&gt;第二层嵌套&lt;ul&gt;
&lt;li&gt;第n层嵌套&lt;h4 id=&#34;有序列表&#34;&gt;&lt;a href=&#34;#有序列表&#34; class=&#34;headerlink&#34; title=&#34;有序列表&#34;&gt;&lt;/a&gt;有序列表&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;有序列表&lt;/li&gt;
&lt;li&gt;第一行序号为起始序号&lt;/li&gt;
&lt;li&gt;即使后面序号错误也会顺序下排&lt;ol&gt;
&lt;li&gt;嵌套效果&lt;h2 id=&#34;内容&#34;&gt;&lt;a href=&#34;#内容&#34; class=&#34;headerlink&#34; title=&#34;内容&#34;&gt;&lt;/a&gt;内容&lt;/h2&gt;&lt;h3 id=&#34;引用说明&#34;&gt;&lt;a href=&#34;#引用说明&#34; class=&#34;headerlink&#34; title=&#34;引用说明&#34;&gt;&lt;/a&gt;引用说明&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;引用内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二级引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三级引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;代码块&#34;&gt;&lt;a href=&#34;#代码块&#34; class=&#34;headerlink&#34; title=&#34;代码块&#34;&gt;&lt;/a&gt;代码块&lt;/h3&gt;&lt;p&gt;&lt;code&gt;少量代码，单行使用，用·包裹&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;br&gt;大量代码多行使用，用三个·包裹&lt;br&gt;大量代码多行使用，用三个·包裹&lt;br&gt;大量代码多行使用，用三个·包裹&lt;br&gt;大量代码多行使用，用三个·包裹&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;链接&#34;&gt;&lt;a href=&#34;#链接&#34; class=&#34;headerlink&#34; title=&#34;链接&#34;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;h3 id=&#34;网页链接&#34;&gt;&lt;a href=&#34;#网页链接&#34; class=&#34;headerlink&#34; title=&#34;网页链接&#34;&gt;&lt;/a&gt;网页链接&lt;/h3&gt;&lt;h4 id=&#34;行内式&#34;&gt;&lt;a href=&#34;#行内式&#34; class=&#34;headerlink&#34; title=&#34;行内式&#34;&gt;&lt;/a&gt;行内式&lt;/h4&gt;&lt;p&gt;链接放在【】中，地址放在后面的小括号中，引号内是title&lt;br&gt;&lt;a href=&#34;www.baidu.com&#34; title=&#34;百度一下，你就知道&#34;&gt;百度&lt;/a&gt;&lt;br&gt;[百度]是一个搜索引擎&lt;/p&gt;
&lt;h4 id=&#34;参数式&#34;&gt;&lt;a href=&#34;#参数式&#34; class=&#34;headerlink&#34; title=&#34;参数式&#34;&gt;&lt;/a&gt;参数式&lt;/h4&gt;&lt;p&gt;链接在【】内，地址在冒号后面，title用引号&lt;br&gt;[百度]:&lt;a href=&#34;http://www.baidu.com/&#34;&gt;www.baidu.com&lt;/a&gt; “百度一下，你就知道”&lt;br&gt;[百度]是一个搜索引擎&lt;/p&gt;
&lt;h3 id=&#34;图片&#34;&gt;&lt;a href=&#34;#图片&#34; class=&#34;headerlink&#34; title=&#34;图片&#34;&gt;&lt;/a&gt;图片&lt;/h3&gt;&lt;p&gt;与链接基本一致，注意在引用图片时【】前加上！&lt;br&gt;&lt;img src=&#34;/2021/08/24/md%E8%AF%AD%E6%B3%95%E8%AF%95%E9%AA%8C/download\edge\13623636-6d878e3d3ef63825&#34; alt=&#34;logo&#34;&gt; “my logo”&lt;/p&gt;
&lt;h2 id=&#34;工整&#34;&gt;&lt;a href=&#34;#工整&#34; class=&#34;headerlink&#34; title=&#34;工整&#34;&gt;&lt;/a&gt;工整&lt;/h2&gt;&lt;h3 id=&#34;分割线&#34;&gt;&lt;a href=&#34;#分割线&#34; class=&#34;headerlink&#34; title=&#34;分割线&#34;&gt;&lt;/a&gt;分割线&lt;/h3&gt;&lt;h2 id=&#34;由-这三种之一的三个符号表示&#34;&gt;&lt;a href=&#34;#由-这三种之一的三个符号表示&#34; class=&#34;headerlink&#34; title=&#34;由* - _这三种之一的三个符号表示&#34;&gt;&lt;/a&gt;由* - _这三种之一的三个符号表示&lt;/h2&gt;&lt;p&gt;这就是分割线&lt;/p&gt;
&lt;h3 id=&#34;表格&#34;&gt;&lt;a href=&#34;#表格&#34; class=&#34;headerlink&#34; title=&#34;表格&#34;&gt;&lt;/a&gt;表格&lt;/h3&gt;&lt;p&gt;&amp;#x2F;&amp;#x2F;例子&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;123&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;234&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;345&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;abc&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bcd&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;cde&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;h3 id=&#34;强调字体&#34;&gt;&lt;a href=&#34;#强调字体&#34; class=&#34;headerlink&#34; title=&#34;强调字体&#34;&gt;&lt;/a&gt;强调字体&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;强调字体&lt;br&gt; 用星号包裹，如&lt;em&gt;md&lt;/em&gt;,&lt;strong&gt;md&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;转义&lt;br&gt; 用\&lt;/li&gt;
&lt;li&gt;删除线&lt;br&gt; &lt;del&gt;删除&lt;/del&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="技术" />
        <category term="博客" />
        <category term="markdown" />
        <updated>2021-08-24T07:32:52.000Z</updated>
    </entry>
</feed>
